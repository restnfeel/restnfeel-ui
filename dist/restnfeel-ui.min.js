
(function(l, i, v, e) { v = l.createElement(i); v.async = 1; v.src = '//' + (location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; e = l.getElementsByTagName(i)[0]; e.parentNode.insertBefore(v, e)})(document, 'script');
'use strict';

var global$1 = (typeof global !== "undefined" ? global :
            typeof self !== "undefined" ? self :
            typeof window !== "undefined" ? window : {});

if (typeof global$1.setTimeout === 'function') ;
if (typeof global$1.clearTimeout === 'function') ;

// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
var performance$1 = global$1.performance || {};
var performanceNow =
  performance$1.now        ||
  performance$1.mozNow     ||
  performance$1.msNow      ||
  performance$1.oNow       ||
  performance$1.webkitNow  ||
  function(){ return (new Date()).getTime() };

var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function unwrapExports (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x.default : x;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

var n="function"===typeof Symbol&&Symbol.for,p=n?Symbol.for("react.element"):60103,q=n?Symbol.for("react.portal"):60106,r=n?Symbol.for("react.fragment"):60107,t=n?Symbol.for("react.strict_mode"):60108,u=n?Symbol.for("react.profiler"):60114,v=n?Symbol.for("react.provider"):60109,w=n?Symbol.for("react.context"):60110,x=n?Symbol.for("react.concurrent_mode"):60111,y=n?Symbol.for("react.forward_ref"):60112,z=n?Symbol.for("react.suspense"):60113,A=n?Symbol.for("react.memo"):
60115,B=n?Symbol.for("react.lazy"):60116,C="function"===typeof Symbol&&Symbol.iterator;function aa(a,b,e,c,d,g,h,f){if(!a){a=void 0;if(void 0===b)a=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[e,c,d,g,h,f],m=0;a=Error(b.replace(/%s/g,function(){return l[m++]}));a.name="Invariant Violation";}a.framesToPop=1;throw a;}}
function D(a){for(var b=arguments.length-1,e="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=0;c<b;c++)e+="&args[]="+encodeURIComponent(arguments[c+1]);aa(!1,"Minified React error #"+a+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",e);}var E={isMounted:function(){return !1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},F={};
function G(a,b,e){this.props=a;this.context=b;this.refs=F;this.updater=e||E;}G.prototype.isReactComponent={};G.prototype.setState=function(a,b){"object"!==typeof a&&"function"!==typeof a&&null!=a?D("85"):void 0;this.updater.enqueueSetState(this,a,b,"setState");};G.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,"forceUpdate");};function H(){}H.prototype=G.prototype;function I(a,b,e){this.props=a;this.context=b;this.refs=F;this.updater=e||E;}var J=I.prototype=new H;
J.constructor=I;objectAssign(J,G.prototype);J.isPureReactComponent=!0;var K={current:null,currentDispatcher:null},L=Object.prototype.hasOwnProperty,M={key:!0,ref:!0,__self:!0,__source:!0};
function N(a,b,e){var c=void 0,d={},g=null,h=null;if(null!=b)for(c in void 0!==b.ref&&(h=b.ref),void 0!==b.key&&(g=""+b.key),b)L.call(b,c)&&!M.hasOwnProperty(c)&&(d[c]=b[c]);var f=arguments.length-2;if(1===f)d.children=e;else if(1<f){for(var l=Array(f),m=0;m<f;m++)l[m]=arguments[m+2];d.children=l;}if(a&&a.defaultProps)for(c in f=a.defaultProps,f)void 0===d[c]&&(d[c]=f[c]);return {$$typeof:p,type:a,key:g,ref:h,props:d,_owner:K.current}}
function ba(a,b){return {$$typeof:p,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function O(a){return "object"===typeof a&&null!==a&&a.$$typeof===p}function escape(a){var b={"=":"=0",":":"=2"};return "$"+(""+a).replace(/[=:]/g,function(a){return b[a]})}var P=/\/+/g,Q=[];function R(a,b,e,c){if(Q.length){var d=Q.pop();d.result=a;d.keyPrefix=b;d.func=e;d.context=c;d.count=0;return d}return {result:a,keyPrefix:b,func:e,context:c,count:0}}
function S(a){a.result=null;a.keyPrefix=null;a.func=null;a.context=null;a.count=0;10>Q.length&&Q.push(a);}
function T(a,b,e,c){var d=typeof a;if("undefined"===d||"boolean"===d)a=null;var g=!1;if(null===a)g=!0;else switch(d){case "string":case "number":g=!0;break;case "object":switch(a.$$typeof){case p:case q:g=!0;}}if(g)return e(c,a,""===b?"."+U(a,0):b),1;g=0;b=""===b?".":b+":";if(Array.isArray(a))for(var h=0;h<a.length;h++){d=a[h];var f=b+U(d,h);g+=T(d,f,e,c);}else if(null===a||"object"!==typeof a?f=null:(f=C&&a[C]||a["@@iterator"],f="function"===typeof f?f:null),"function"===typeof f)for(a=f.call(a),h=
0;!(d=a.next()).done;)d=d.value,f=b+U(d,h++),g+=T(d,f,e,c);else"object"===d&&(e=""+a,D("31","[object Object]"===e?"object with keys {"+Object.keys(a).join(", ")+"}":e,""));return g}function V(a,b,e){return null==a?0:T(a,"",b,e)}function U(a,b){return "object"===typeof a&&null!==a&&null!=a.key?escape(a.key):b.toString(36)}function ca(a,b){a.func.call(a.context,b,a.count++);}
function da(a,b,e){var c=a.result,d=a.keyPrefix;a=a.func.call(a.context,b,a.count++);Array.isArray(a)?W(a,c,e,function(a){return a}):null!=a&&(O(a)&&(a=ba(a,d+(!a.key||b&&b.key===a.key?"":(""+a.key).replace(P,"$&/")+"/")+e)),c.push(a));}function W(a,b,e,c,d){var g="";null!=e&&(g=(""+e).replace(P,"$&/")+"/");b=R(b,g,c,d);V(a,da,b);S(b);}
var X={Children:{map:function(a,b,e){if(null==a)return a;var c=[];W(a,c,null,b,e);return c},forEach:function(a,b,e){if(null==a)return a;b=R(null,null,b,e);V(a,ca,b);S(b);},count:function(a){return V(a,function(){return null},null)},toArray:function(a){var b=[];W(a,b,null,function(a){return a});return b},only:function(a){O(a)?void 0:D("143");return a}},createRef:function(){return {current:null}},Component:G,PureComponent:I,createContext:function(a,b){void 0===b&&(b=null);a={$$typeof:w,_calculateChangedBits:b,
_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null};a.Provider={$$typeof:v,_context:a};return a.Consumer=a},forwardRef:function(a){return {$$typeof:y,render:a}},lazy:function(a){return {$$typeof:B,_ctor:a,_status:-1,_result:null}},memo:function(a,b){return {$$typeof:A,type:a,compare:void 0===b?null:b}},Fragment:r,StrictMode:t,Suspense:z,createElement:N,cloneElement:function(a,b,e){null===a||void 0===a?D("267",a):void 0;var c=void 0,d=objectAssign({},a.props),g=a.key,h=a.ref,f=a._owner;
if(null!=b){void 0!==b.ref&&(h=b.ref,f=K.current);void 0!==b.key&&(g=""+b.key);var l=void 0;a.type&&a.type.defaultProps&&(l=a.type.defaultProps);for(c in b)L.call(b,c)&&!M.hasOwnProperty(c)&&(d[c]=void 0===b[c]&&void 0!==l?l[c]:b[c]);}c=arguments.length-2;if(1===c)d.children=e;else if(1<c){l=Array(c);for(var m=0;m<c;m++)l[m]=arguments[m+2];d.children=l;}return {$$typeof:p,type:a.type,key:g,ref:h,props:d,_owner:f}},createFactory:function(a){var b=N.bind(null,a);b.type=a;return b},isValidElement:O,version:"16.6.3",
__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:K,assign:objectAssign}};X.unstable_ConcurrentMode=x;X.unstable_Profiler=u;var Y={default:X},Z=Y&&X||Y;var react_production_min=Z.default||Z;

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

var ReactPropTypesSecret_1 = ReactPropTypesSecret;

var react_development = createCommonjsModule(function (module) {
});

var react = createCommonjsModule(function (module) {

{
  module.exports = react_production_min;
}
});
var react_1 = react.React;
var react_2 = react.Fragment;
var react_3 = react.cloneElement;
var react_4 = react.createContext;
var react_5 = react.Component;
var react_6 = react.createElement;

var scheduler_production_min = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports,"__esModule",{value:!0});var d=null,f=!1,h=3,k=-1,l=-1,m=!1,n=!1;function p(){if(!m){var a=d.expirationTime;n?q():n=!0;r(t,a);}}
function u(){var a=d,b=d.next;if(d===b)d=null;else{var c=d.previous;d=c.next=b;b.previous=c;}a.next=a.previous=null;c=a.callback;b=a.expirationTime;a=a.priorityLevel;var e=h,Q=l;h=a;l=b;try{var g=c();}finally{h=e,l=Q;}if("function"===typeof g)if(g={callback:g,priorityLevel:a,expirationTime:b,next:null,previous:null},null===d)d=g.next=g.previous=g;else{c=null;a=d;do{if(a.expirationTime>=b){c=a;break}a=a.next;}while(a!==d);null===c?c=d:c===d&&(d=g,p());b=c.previous;b.next=c.previous=g;g.next=c;g.previous=
b;}}function v(){if(-1===k&&null!==d&&1===d.priorityLevel){m=!0;try{do u();while(null!==d&&1===d.priorityLevel)}finally{m=!1,null!==d?p():n=!1;}}}function t(a){m=!0;var b=f;f=a;try{if(a)for(;null!==d;){var c=exports.unstable_now();if(d.expirationTime<=c){do u();while(null!==d&&d.expirationTime<=c)}else break}else if(null!==d){do u();while(null!==d&&!w())}}finally{m=!1,f=b,null!==d?p():n=!1,v();}}
var x=Date,y="function"===typeof setTimeout?setTimeout:void 0,z="function"===typeof clearTimeout?clearTimeout:void 0,A="function"===typeof requestAnimationFrame?requestAnimationFrame:void 0,B="function"===typeof cancelAnimationFrame?cancelAnimationFrame:void 0,C,D;function E(a){C=A(function(b){z(D);a(b);});D=y(function(){B(C);a(exports.unstable_now());},100);}
if("object"===typeof performance&&"function"===typeof performance.now){var F=performance;exports.unstable_now=function(){return F.now()};}else exports.unstable_now=function(){return x.now()};var r,q,w;
if("undefined"!==typeof window&&window._schedMock){var G=window._schedMock;r=G[0];q=G[1];w=G[2];}else if("undefined"===typeof window||"function"!==typeof window.addEventListener){var H=null,I=-1,J=function(a,b){if(null!==H){var c=H;H=null;try{I=b,c(a);}finally{I=-1;}}};r=function(a,b){-1!==I?setTimeout(r,0,a,b):(H=a,setTimeout(J,b,!0,b),setTimeout(J,1073741823,!1,1073741823));};q=function(){H=null;};w=function(){return !1};exports.unstable_now=function(){return -1===I?0:I};}else{"undefined"!==typeof console&&
("function"!==typeof A&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!==typeof B&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"));var K=null,L=!1,M=-1,N=!1,O=!1,P=0,R=33,S=33;w=function(){return P<=exports.unstable_now()};var T="__reactIdleCallback$"+Math.random().toString(36).slice(2);
window.addEventListener("message",function(a){if(a.source===window&&a.data===T){L=!1;a=K;var b=M;K=null;M=-1;var c=exports.unstable_now(),e=!1;if(0>=P-c)if(-1!==b&&b<=c)e=!0;else{N||(N=!0,E(U));K=a;M=b;return}if(null!==a){O=!0;try{a(e);}finally{O=!1;}}}},!1);var U=function(a){if(null!==K){E(U);var b=a-P+S;b<S&&R<S?(8>b&&(b=8),S=b<R?R:b):R=b;P=a+S;L||(L=!0,window.postMessage(T,"*"));}else N=!1;};r=function(a,b){K=a;M=b;O||0>b?window.postMessage(T,"*"):N||(N=!0,E(U));};q=function(){K=null;L=!1;M=-1;};}
exports.unstable_ImmediatePriority=1;exports.unstable_UserBlockingPriority=2;exports.unstable_NormalPriority=3;exports.unstable_IdlePriority=5;exports.unstable_LowPriority=4;exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3;}var c=h,e=k;h=a;k=exports.unstable_now();try{return b()}finally{h=c,k=e,v();}};
exports.unstable_scheduleCallback=function(a,b){var c=-1!==k?k:exports.unstable_now();if("object"===typeof b&&null!==b&&"number"===typeof b.timeout)b=c+b.timeout;else switch(h){case 1:b=c+-1;break;case 2:b=c+250;break;case 5:b=c+1073741823;break;case 4:b=c+1E4;break;default:b=c+5E3;}a={callback:a,priorityLevel:h,expirationTime:b,next:null,previous:null};if(null===d)d=a.next=a.previous=a,p();else{c=null;var e=d;do{if(e.expirationTime>b){c=e;break}e=e.next;}while(e!==d);null===c?c=d:c===d&&(d=a,p());
b=c.previous;b.next=c.previous=a;a.next=c;a.previous=b;}return a};exports.unstable_cancelCallback=function(a){var b=a.next;if(null!==b){if(b===a)d=null;else{a===d&&(d=b);var c=a.previous;c.next=b;b.previous=c;}a.next=a.previous=null;}};exports.unstable_wrapCallback=function(a){var b=h;return function(){var c=h,e=k;h=b;k=exports.unstable_now();try{return a.apply(this,arguments)}finally{h=c,k=e,v();}}};exports.unstable_getCurrentPriorityLevel=function(){return h};
exports.unstable_shouldYield=function(){return !f&&(null!==d&&d.expirationTime<l||w())};
});

unwrapExports(scheduler_production_min);
var scheduler_production_min_1 = scheduler_production_min.unstable_now;
var scheduler_production_min_2 = scheduler_production_min.unstable_ImmediatePriority;
var scheduler_production_min_3 = scheduler_production_min.unstable_UserBlockingPriority;
var scheduler_production_min_4 = scheduler_production_min.unstable_NormalPriority;
var scheduler_production_min_5 = scheduler_production_min.unstable_IdlePriority;
var scheduler_production_min_6 = scheduler_production_min.unstable_LowPriority;
var scheduler_production_min_7 = scheduler_production_min.unstable_runWithPriority;
var scheduler_production_min_8 = scheduler_production_min.unstable_scheduleCallback;
var scheduler_production_min_9 = scheduler_production_min.unstable_cancelCallback;
var scheduler_production_min_10 = scheduler_production_min.unstable_wrapCallback;
var scheduler_production_min_11 = scheduler_production_min.unstable_getCurrentPriorityLevel;
var scheduler_production_min_12 = scheduler_production_min.unstable_shouldYield;

var scheduler_development = createCommonjsModule(function (module, exports) {
});

unwrapExports(scheduler_development);
var scheduler_development_1 = scheduler_development.unstable_now;
var scheduler_development_2 = scheduler_development.unstable_ImmediatePriority;
var scheduler_development_3 = scheduler_development.unstable_UserBlockingPriority;
var scheduler_development_4 = scheduler_development.unstable_NormalPriority;
var scheduler_development_5 = scheduler_development.unstable_IdlePriority;
var scheduler_development_6 = scheduler_development.unstable_LowPriority;
var scheduler_development_7 = scheduler_development.unstable_runWithPriority;
var scheduler_development_8 = scheduler_development.unstable_scheduleCallback;
var scheduler_development_9 = scheduler_development.unstable_cancelCallback;
var scheduler_development_10 = scheduler_development.unstable_wrapCallback;
var scheduler_development_11 = scheduler_development.unstable_getCurrentPriorityLevel;
var scheduler_development_12 = scheduler_development.unstable_shouldYield;

var scheduler = createCommonjsModule(function (module) {

{
  module.exports = scheduler_production_min;
}
});

function ca$1(a,b,c,d,e,f,g,h){if(!a){a=void 0;if(void 0===b)a=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var k=[c,d,e,f,g,h],l=0;a=Error(b.replace(/%s/g,function(){return k[l++]}));a.name="Invariant Violation";}a.framesToPop=1;throw a;}}
function t$1(a){for(var b=arguments.length-1,c="https://reactjs.org/docs/error-decoder.html?invariant="+a,d=0;d<b;d++)c+="&args[]="+encodeURIComponent(arguments[d+1]);ca$1(!1,"Minified React error #"+a+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",c);}react?void 0:t$1("227");function da$1(a,b,c,d,e,f,g,h,k){var l=Array.prototype.slice.call(arguments,3);try{b.apply(c,l);}catch(m){this.onError(m);}}
var ea=!1,fa=null,ha=!1,ia=null,ja={onError:function(a){ea=!0;fa=a;}};function ka(a,b,c,d,e,f,g,h,k){ea=!1;fa=null;da$1.apply(ja,arguments);}function la(a,b,c,d,e,f,g,h,k){ka.apply(this,arguments);if(ea){if(ea){var l=fa;ea=!1;fa=null;}else t$1("198"),l=void 0;ha||(ha=!0,ia=l);}}var ma=null,na={};
function oa(){if(ma)for(var a in na){var b=na[a],c=ma.indexOf(a);-1<c?void 0:t$1("96",a);if(!pa[c]){b.extractEvents?void 0:t$1("97",a);pa[c]=b;c=b.eventTypes;for(var d in c){var e=void 0;var f=c[d],g=b,h=d;qa.hasOwnProperty(h)?t$1("99",h):void 0;qa[h]=f;var k=f.phasedRegistrationNames;if(k){for(e in k)k.hasOwnProperty(e)&&ra(k[e],g,h);e=!0;}else f.registrationName?(ra(f.registrationName,g,h),e=!0):e=!1;e?void 0:t$1("98",d,a);}}}}
function ra(a,b,c){sa[a]?t$1("100",a):void 0;sa[a]=b;ta[a]=b.eventTypes[c].dependencies;}var pa=[],qa={},sa={},ta={},ua=null,va=null,wa=null;function xa(a,b,c){var d=a.type||"unknown-event";a.currentTarget=wa(c);la(d,b,void 0,a);a.currentTarget=null;}function ya(a,b){null==b?t$1("30"):void 0;if(null==a)return b;if(Array.isArray(a)){if(Array.isArray(b))return a.push.apply(a,b),a;a.push(b);return a}return Array.isArray(b)?[a].concat(b):[a,b]}
function za(a,b,c){Array.isArray(a)?a.forEach(b,c):a&&b.call(c,a);}var Aa=null;function Ba(a){if(a){var b=a._dispatchListeners,c=a._dispatchInstances;if(Array.isArray(b))for(var d=0;d<b.length&&!a.isPropagationStopped();d++)xa(a,b[d],c[d]);else b&&xa(a,b,c);a._dispatchListeners=null;a._dispatchInstances=null;a.isPersistent()||a.constructor.release(a);}}
var Ca={injectEventPluginOrder:function(a){ma?t$1("101"):void 0;ma=Array.prototype.slice.call(a);oa();},injectEventPluginsByName:function(a){var b=!1,c;for(c in a)if(a.hasOwnProperty(c)){var d=a[c];na.hasOwnProperty(c)&&na[c]===d||(na[c]?t$1("102",c):void 0,na[c]=d,b=!0);}b&&oa();}};
function Da(a,b){var c=a.stateNode;if(!c)return null;var d=ua(c);if(!d)return null;c=d[b];a:switch(b){case "onClick":case "onClickCapture":case "onDoubleClick":case "onDoubleClickCapture":case "onMouseDown":case "onMouseDownCapture":case "onMouseMove":case "onMouseMoveCapture":case "onMouseUp":case "onMouseUpCapture":(d=!d.disabled)||(a=a.type,d=!("button"===a||"input"===a||"select"===a||"textarea"===a));a=!d;break a;default:a=!1;}if(a)return null;c&&"function"!==typeof c?t$1("231",b,typeof c):void 0;
return c}function Ea(a){null!==a&&(Aa=ya(Aa,a));a=Aa;Aa=null;if(a&&(za(a,Ba),Aa?t$1("95"):void 0,ha))throw a=ia,ha=!1,ia=null,a;}var Fa=Math.random().toString(36).slice(2),Ga="__reactInternalInstance$"+Fa,Ha="__reactEventHandlers$"+Fa;function Ia(a){if(a[Ga])return a[Ga];for(;!a[Ga];)if(a.parentNode)a=a.parentNode;else return null;a=a[Ga];return 5===a.tag||6===a.tag?a:null}function Ja(a){a=a[Ga];return !a||5!==a.tag&&6!==a.tag?null:a}
function Ka(a){if(5===a.tag||6===a.tag)return a.stateNode;t$1("33");}function La(a){return a[Ha]||null}function Ma(a){do a=a.return;while(a&&5!==a.tag);return a?a:null}function Na(a,b,c){if(b=Da(a,c.dispatchConfig.phasedRegistrationNames[b]))c._dispatchListeners=ya(c._dispatchListeners,b),c._dispatchInstances=ya(c._dispatchInstances,a);}
function Oa(a){if(a&&a.dispatchConfig.phasedRegistrationNames){for(var b=a._targetInst,c=[];b;)c.push(b),b=Ma(b);for(b=c.length;0<b--;)Na(c[b],"captured",a);for(b=0;b<c.length;b++)Na(c[b],"bubbled",a);}}function Pa(a,b,c){a&&c&&c.dispatchConfig.registrationName&&(b=Da(a,c.dispatchConfig.registrationName))&&(c._dispatchListeners=ya(c._dispatchListeners,b),c._dispatchInstances=ya(c._dispatchInstances,a));}function Qa(a){a&&a.dispatchConfig.registrationName&&Pa(a._targetInst,null,a);}
function Ra(a){za(a,Oa);}var Sa=!("undefined"===typeof window||!window.document||!window.document.createElement);function Ta(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c["Webkit"+a]="webkit"+b;c["Moz"+a]="moz"+b;return c}var Ua={animationend:Ta("Animation","AnimationEnd"),animationiteration:Ta("Animation","AnimationIteration"),animationstart:Ta("Animation","AnimationStart"),transitionend:Ta("Transition","TransitionEnd")},Va={},Wa={};
Sa&&(Wa=document.createElement("div").style,"AnimationEvent"in window||(delete Ua.animationend.animation,delete Ua.animationiteration.animation,delete Ua.animationstart.animation),"TransitionEvent"in window||delete Ua.transitionend.transition);function Xa(a){if(Va[a])return Va[a];if(!Ua[a])return a;var b=Ua[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Wa)return Va[a]=b[c];return a}
var Ya=Xa("animationend"),Za=Xa("animationiteration"),$a=Xa("animationstart"),ab=Xa("transitionend"),bb="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),cb=null,eb=null,fb=null;
function gb(){if(fb)return fb;var a,b=eb,c=b.length,d,e="value"in cb?cb.value:cb.textContent,f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);return fb=e.slice(a,1<d?1-d:void 0)}function hb(){return !0}function ib(){return !1}
function A$1(a,b,c,d){this.dispatchConfig=a;this._targetInst=b;this.nativeEvent=c;a=this.constructor.Interface;for(var e in a)a.hasOwnProperty(e)&&((b=a[e])?this[e]=b(c):"target"===e?this.target=d:this[e]=c[e]);this.isDefaultPrevented=(null!=c.defaultPrevented?c.defaultPrevented:!1===c.returnValue)?hb:ib;this.isPropagationStopped=ib;return this}
objectAssign(A$1.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():"unknown"!==typeof a.returnValue&&(a.returnValue=!1),this.isDefaultPrevented=hb);},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():"unknown"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=hb);},persist:function(){this.isPersistent=hb;},isPersistent:ib,destructor:function(){var a=this.constructor.Interface,
b;for(b in a)this[b]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null;this.isPropagationStopped=this.isDefaultPrevented=ib;this._dispatchInstances=this._dispatchListeners=null;}});A$1.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};
A$1.extend=function(a){function b(){}function c(){return d.apply(this,arguments)}var d=this;b.prototype=d.prototype;var e=new b;objectAssign(e,c.prototype);c.prototype=e;c.prototype.constructor=c;c.Interface=objectAssign({},d.Interface,a);c.extend=d.extend;jb(c);return c};jb(A$1);function kb(a,b,c,d){if(this.eventPool.length){var e=this.eventPool.pop();this.call(e,a,b,c,d);return e}return new this(a,b,c,d)}function lb(a){a instanceof this?void 0:t$1("279");a.destructor();10>this.eventPool.length&&this.eventPool.push(a);}
function jb(a){a.eventPool=[];a.getPooled=kb;a.release=lb;}var mb=A$1.extend({data:null}),nb=A$1.extend({data:null}),ob=[9,13,27,32],pb=Sa&&"CompositionEvent"in window,qb=null;Sa&&"documentMode"in document&&(qb=document.documentMode);
var rb=Sa&&"TextEvent"in window&&!qb,sb=Sa&&(!pb||qb&&8<qb&&11>=qb),tb=String.fromCharCode(32),ub={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",
captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},vb=!1;
function wb(a,b){switch(a){case "keyup":return -1!==ob.indexOf(b.keyCode);case "keydown":return 229!==b.keyCode;case "keypress":case "mousedown":case "blur":return !0;default:return !1}}function xb(a){a=a.detail;return "object"===typeof a&&"data"in a?a.data:null}var yb=!1;function zb(a,b){switch(a){case "compositionend":return xb(b);case "keypress":if(32!==b.which)return null;vb=!0;return tb;case "textInput":return a=b.data,a===tb&&vb?null:a;default:return null}}
function Ab(a,b){if(yb)return "compositionend"===a||!pb&&wb(a,b)?(a=gb(),fb=eb=cb=null,yb=!1,a):null;switch(a){case "paste":return null;case "keypress":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case "compositionend":return sb&&"ko"!==b.locale?null:b.data;default:return null}}
var Bb={eventTypes:ub,extractEvents:function(a,b,c,d){var e=void 0;var f=void 0;if(pb)b:{switch(a){case "compositionstart":e=ub.compositionStart;break b;case "compositionend":e=ub.compositionEnd;break b;case "compositionupdate":e=ub.compositionUpdate;break b}e=void 0;}else yb?wb(a,c)&&(e=ub.compositionEnd):"keydown"===a&&229===c.keyCode&&(e=ub.compositionStart);e?(sb&&"ko"!==c.locale&&(yb||e!==ub.compositionStart?e===ub.compositionEnd&&yb&&(f=gb()):(cb=d,eb="value"in cb?cb.value:cb.textContent,yb=
!0)),e=mb.getPooled(e,b,c,d),f?e.data=f:(f=xb(c),null!==f&&(e.data=f)),Ra(e),f=e):f=null;(a=rb?zb(a,c):Ab(a,c))?(b=nb.getPooled(ub.beforeInput,b,c,d),b.data=a,Ra(b)):b=null;return null===f?b:null===b?f:[f,b]}},Cb=null,Db=null,Eb=null;function Hb(a){if(a=va(a)){"function"!==typeof Cb?t$1("280"):void 0;var b=ua(a.stateNode);Cb(a.stateNode,a.type,b);}}function Ib(a){Db?Eb?Eb.push(a):Eb=[a]:Db=a;}function Jb(){if(Db){var a=Db,b=Eb;Eb=Db=null;Hb(a);if(b)for(a=0;a<b.length;a++)Hb(b[a]);}}
function Kb(a,b){return a(b)}function Lb(a,b,c){return a(b,c)}function Mb(){}var Nb=!1;function Ob(a,b){if(Nb)return a(b);Nb=!0;try{return Kb(a,b)}finally{if(Nb=!1,null!==Db||null!==Eb)Mb(),Jb();}}var Pb={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Qb(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return "input"===b?!!Pb[a.type]:"textarea"===b?!0:!1}
function Rb(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}function Sb(a){if(!Sa)return !1;a="on"+a;var b=a in document;b||(b=document.createElement("div"),b.setAttribute(a,"return;"),b="function"===typeof b[a]);return b}function Tb(a){var b=a.type;return (a=a.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===b||"radio"===b)}
function Ub(a){var b=Tb(a)?"checked":"value",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=""+a[b];if(!a.hasOwnProperty(b)&&"undefined"!==typeof c&&"function"===typeof c.get&&"function"===typeof c.set){var e=c.get,f=c.set;Object.defineProperty(a,b,{configurable:!0,get:function(){return e.call(this)},set:function(a){d=""+a;f.call(this,a);}});Object.defineProperty(a,b,{enumerable:c.enumerable});return {getValue:function(){return d},setValue:function(a){d=""+a;},stopTracking:function(){a._valueTracker=
null;delete a[b];}}}}function Vb(a){a._valueTracker||(a._valueTracker=Ub(a));}function Wb(a){if(!a)return !1;var b=a._valueTracker;if(!b)return !0;var c=b.getValue();var d="";a&&(d=Tb(a)?a.checked?"true":"false":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}
var Xb=react.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,Yb=/^(.*)[\\\/]/,D$1="function"===typeof Symbol&&Symbol.for,Zb=D$1?Symbol.for("react.element"):60103,$b=D$1?Symbol.for("react.portal"):60106,ac=D$1?Symbol.for("react.fragment"):60107,bc=D$1?Symbol.for("react.strict_mode"):60108,cc=D$1?Symbol.for("react.profiler"):60114,dc=D$1?Symbol.for("react.provider"):60109,ec=D$1?Symbol.for("react.context"):60110,fc=D$1?Symbol.for("react.concurrent_mode"):60111,gc=D$1?Symbol.for("react.forward_ref"):60112,hc=D$1?Symbol.for("react.suspense"):
60113,ic=D$1?Symbol.for("react.memo"):60115,jc=D$1?Symbol.for("react.lazy"):60116,kc="function"===typeof Symbol&&Symbol.iterator;function lc(a){if(null===a||"object"!==typeof a)return null;a=kc&&a[kc]||a["@@iterator"];return "function"===typeof a?a:null}
function mc(a){if(null==a)return null;if("function"===typeof a)return a.displayName||a.name||null;if("string"===typeof a)return a;switch(a){case fc:return "ConcurrentMode";case ac:return "Fragment";case $b:return "Portal";case cc:return "Profiler";case bc:return "StrictMode";case hc:return "Suspense"}if("object"===typeof a)switch(a.$$typeof){case ec:return "Context.Consumer";case dc:return "Context.Provider";case gc:var b=a.render;b=b.displayName||b.name||"";return a.displayName||(""!==b?"ForwardRef("+b+
")":"ForwardRef");case ic:return mc(a.type);case jc:if(a=1===a._status?a._result:null)return mc(a)}return null}function nc(a){var b="";do{a:switch(a.tag){case 2:case 16:case 0:case 1:case 5:case 8:case 13:var c=a._debugOwner,d=a._debugSource,e=mc(a.type);var f=null;c&&(f=mc(c.type));c=e;e="";d?e=" (at "+d.fileName.replace(Yb,"")+":"+d.lineNumber+")":f&&(e=" (created by "+f+")");f="\n    in "+(c||"Unknown")+e;break a;default:f="";}b+=f;a=a.return;}while(a);return b}
var oc=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,pc=Object.prototype.hasOwnProperty,qc={},rc={};
function sc(a){if(pc.call(rc,a))return !0;if(pc.call(qc,a))return !1;if(oc.test(a))return rc[a]=!0;qc[a]=!0;return !1}function tc(a,b,c,d){if(null!==c&&0===c.type)return !1;switch(typeof b){case "function":case "symbol":return !0;case "boolean":if(d)return !1;if(null!==c)return !c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return "data-"!==a&&"aria-"!==a;default:return !1}}
function uc(a,b,c,d){if(null===b||"undefined"===typeof b||tc(a,b,c,d))return !0;if(d)return !1;if(null!==c)switch(c.type){case 3:return !b;case 4:return !1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return !1}function E$1(a,b,c,d,e){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b;}var F$1={};
"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a){F$1[a]=new E$1(a,0,!1,a,null);});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(a){var b=a[0];F$1[b]=new E$1(b,1,!1,a[1],null);});["contentEditable","draggable","spellCheck","value"].forEach(function(a){F$1[a]=new E$1(a,2,!1,a.toLowerCase(),null);});
["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(a){F$1[a]=new E$1(a,2,!1,a,null);});"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a){F$1[a]=new E$1(a,3,!1,a.toLowerCase(),null);});["checked","multiple","muted","selected"].forEach(function(a){F$1[a]=new E$1(a,3,!0,a,null);});
["capture","download"].forEach(function(a){F$1[a]=new E$1(a,4,!1,a,null);});["cols","rows","size","span"].forEach(function(a){F$1[a]=new E$1(a,6,!1,a,null);});["rowSpan","start"].forEach(function(a){F$1[a]=new E$1(a,5,!1,a.toLowerCase(),null);});var vc=/[\-:]([a-z])/g;function xc(a){return a[1].toUpperCase()}
"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a){var b=a.replace(vc,
xc);F$1[b]=new E$1(b,1,!1,a,null);});"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a){var b=a.replace(vc,xc);F$1[b]=new E$1(b,1,!1,a,"http://www.w3.org/1999/xlink");});["xml:base","xml:lang","xml:space"].forEach(function(a){var b=a.replace(vc,xc);F$1[b]=new E$1(b,1,!1,a,"http://www.w3.org/XML/1998/namespace");});F$1.tabIndex=new E$1("tabIndex",1,!1,"tabindex",null);
function yc(a,b,c,d){var e=F$1.hasOwnProperty(b)?F$1[b]:null;var f=null!==e?0===e.type:d?!1:!(2<b.length)||"o"!==b[0]&&"O"!==b[0]||"n"!==b[1]&&"N"!==b[1]?!1:!0;f||(uc(b,c,e,d)&&(c=null),d||null===e?sc(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,""+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:"":c:(b=e.attributeName,d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?"":""+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c))));}
function zc(a){switch(typeof a){case "boolean":case "number":case "object":case "string":case "undefined":return a;default:return ""}}function Ac(a,b){var c=b.checked;return objectAssign({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=c?c:a._wrapperState.initialChecked})}
function Bc(a,b){var c=null==b.defaultValue?"":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=zc(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:"checkbox"===b.type||"radio"===b.type?null!=b.checked:null!=b.value};}function Cc(a,b){b=b.checked;null!=b&&yc(a,"checked",b,!1);}
function Dc(a,b){Cc(a,b);var c=zc(b.value),d=b.type;if(null!=c)if("number"===d){if(0===c&&""===a.value||a.value!=c)a.value=""+c;}else a.value!==""+c&&(a.value=""+c);else if("submit"===d||"reset"===d){a.removeAttribute("value");return}b.hasOwnProperty("value")?Ec(a,b.type,c):b.hasOwnProperty("defaultValue")&&Ec(a,b.type,zc(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked);}
function Fc(a,b,c){if(b.hasOwnProperty("value")||b.hasOwnProperty("defaultValue")){var d=b.type;if(!("submit"!==d&&"reset"!==d||void 0!==b.value&&null!==b.value))return;b=""+a._wrapperState.initialValue;c||b===a.value||(a.value=b);a.defaultValue=b;}c=a.name;""!==c&&(a.name="");a.defaultChecked=!a.defaultChecked;a.defaultChecked=!!a._wrapperState.initialChecked;""!==c&&(a.name=c);}
function Ec(a,b,c){if("number"!==b||a.ownerDocument.activeElement!==a)null==c?a.defaultValue=""+a._wrapperState.initialValue:a.defaultValue!==""+c&&(a.defaultValue=""+c);}var Gc={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Hc(a,b,c){a=A$1.getPooled(Gc.change,a,b,c);a.type="change";Ib(c);Ra(a);return a}var Jc=null,Kc=null;function Lc(a){Ea(a);}
function Mc(a){var b=Ka(a);if(Wb(b))return a}function Nc(a,b){if("change"===a)return b}var Oc=!1;Sa&&(Oc=Sb("input")&&(!document.documentMode||9<document.documentMode));function Pc(){Jc&&(Jc.detachEvent("onpropertychange",Qc),Kc=Jc=null);}function Qc(a){"value"===a.propertyName&&Mc(Kc)&&(a=Hc(Kc,a,Rb(a)),Ob(Lc,a));}function Rc(a,b,c){"focus"===a?(Pc(),Jc=b,Kc=c,Jc.attachEvent("onpropertychange",Qc)):"blur"===a&&Pc();}function Sc(a){if("selectionchange"===a||"keyup"===a||"keydown"===a)return Mc(Kc)}
function Tc(a,b){if("click"===a)return Mc(b)}function Uc(a,b){if("input"===a||"change"===a)return Mc(b)}
var Vc={eventTypes:Gc,_isInputEventSupported:Oc,extractEvents:function(a,b,c,d){var e=b?Ka(b):window,f=void 0,g=void 0,h=e.nodeName&&e.nodeName.toLowerCase();"select"===h||"input"===h&&"file"===e.type?f=Nc:Qb(e)?Oc?f=Uc:(f=Sc,g=Rc):(h=e.nodeName)&&"input"===h.toLowerCase()&&("checkbox"===e.type||"radio"===e.type)&&(f=Tc);if(f&&(f=f(a,b)))return Hc(f,c,d);g&&g(a,e,b);"blur"===a&&(a=e._wrapperState)&&a.controlled&&"number"===e.type&&Ec(e,"number",e.value);}},Wc=A$1.extend({view:null,detail:null}),Xc={Alt:"altKey",
Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Yc(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Xc[a])?!!b[a]:!1}function Zc(){return Yc}
var $c=0,ad=0,bd=!1,cd=!1,dd=Wc.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Zc,button:null,buttons:null,relatedTarget:function(a){return a.relatedTarget||(a.fromElement===a.srcElement?a.toElement:a.fromElement)},movementX:function(a){if("movementX"in a)return a.movementX;var b=$c;$c=a.screenX;return bd?"mousemove"===a.type?a.screenX-b:0:(bd=!0,0)},movementY:function(a){if("movementY"in a)return a.movementY;
var b=ad;ad=a.screenY;return cd?"mousemove"===a.type?a.screenY-b:0:(cd=!0,0)}}),ed=dd.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),fd={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",
dependencies:["pointerout","pointerover"]}},gd={eventTypes:fd,extractEvents:function(a,b,c,d){var e="mouseover"===a||"pointerover"===a,f="mouseout"===a||"pointerout"===a;if(e&&(c.relatedTarget||c.fromElement)||!f&&!e)return null;e=d.window===d?d:(e=d.ownerDocument)?e.defaultView||e.parentWindow:window;f?(f=b,b=(b=c.relatedTarget||c.toElement)?Ia(b):null):f=null;if(f===b)return null;var g=void 0,h=void 0,k=void 0,l=void 0;if("mouseout"===a||"mouseover"===a)g=dd,h=fd.mouseLeave,k=fd.mouseEnter,l="mouse";
else if("pointerout"===a||"pointerover"===a)g=ed,h=fd.pointerLeave,k=fd.pointerEnter,l="pointer";var m=null==f?e:Ka(f);e=null==b?e:Ka(b);a=g.getPooled(h,f,c,d);a.type=l+"leave";a.target=m;a.relatedTarget=e;c=g.getPooled(k,b,c,d);c.type=l+"enter";c.target=e;c.relatedTarget=m;d=b;if(f&&d)a:{b=f;e=d;l=0;for(g=b;g;g=Ma(g))l++;g=0;for(k=e;k;k=Ma(k))g++;for(;0<l-g;)b=Ma(b),l--;for(;0<g-l;)e=Ma(e),g--;for(;l--;){if(b===e||b===e.alternate)break a;b=Ma(b);e=Ma(e);}b=null;}else b=null;e=b;for(b=[];f&&f!==e;){l=
f.alternate;if(null!==l&&l===e)break;b.push(f);f=Ma(f);}for(f=[];d&&d!==e;){l=d.alternate;if(null!==l&&l===e)break;f.push(d);d=Ma(d);}for(d=0;d<b.length;d++)Pa(b[d],"bubbled",a);for(d=f.length;0<d--;)Pa(f[d],"captured",c);return [a,c]}},hd=Object.prototype.hasOwnProperty;function id(a,b){return a===b?0!==a||0!==b||1/a===1/b:a!==a&&b!==b}
function jd(a,b){if(id(a,b))return !0;if("object"!==typeof a||null===a||"object"!==typeof b||null===b)return !1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return !1;for(d=0;d<c.length;d++)if(!hd.call(b,c[d])||!id(a[c[d]],b[c[d]]))return !1;return !0}function kd(a){var b=a;if(a.alternate)for(;b.return;)b=b.return;else{if(0!==(b.effectTag&2))return 1;for(;b.return;)if(b=b.return,0!==(b.effectTag&2))return 1}return 3===b.tag?2:3}function ld(a){2!==kd(a)?t$1("188"):void 0;}
function md(a){var b=a.alternate;if(!b)return b=kd(a),3===b?t$1("188"):void 0,1===b?null:a;for(var c=a,d=b;;){var e=c.return,f=e?e.alternate:null;if(!e||!f)break;if(e.child===f.child){for(var g=e.child;g;){if(g===c)return ld(e),a;if(g===d)return ld(e),b;g=g.sibling;}t$1("188");}if(c.return!==d.return)c=e,d=f;else{g=!1;for(var h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling;}if(!g){for(h=f.child;h;){if(h===c){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling;}g?
void 0:t$1("189");}}c.alternate!==d?t$1("190"):void 0;}3!==c.tag?t$1("188"):void 0;return c.stateNode.current===c?a:b}function nd(a){a=md(a);if(!a)return null;for(var b=a;;){if(5===b.tag||6===b.tag)return b;if(b.child)b.child.return=b,b=b.child;else{if(b===a)break;for(;!b.sibling;){if(!b.return||b.return===a)return null;b=b.return;}b.sibling.return=b.return;b=b.sibling;}}return null}
var od=A$1.extend({animationName:null,elapsedTime:null,pseudoElement:null}),pd=A$1.extend({clipboardData:function(a){return "clipboardData"in a?a.clipboardData:window.clipboardData}}),qd=Wc.extend({relatedTarget:null});function rd(a){var b=a.keyCode;"charCode"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}
var sd={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},td={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",
116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},ud=Wc.extend({key:function(a){if(a.key){var b=sd[a.key]||a.key;if("Unidentified"!==b)return b}return "keypress"===a.type?(a=rd(a),13===a?"Enter":String.fromCharCode(a)):"keydown"===a.type||"keyup"===a.type?td[a.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Zc,charCode:function(a){return "keypress"===
a.type?rd(a):0},keyCode:function(a){return "keydown"===a.type||"keyup"===a.type?a.keyCode:0},which:function(a){return "keypress"===a.type?rd(a):"keydown"===a.type||"keyup"===a.type?a.keyCode:0}}),vd=dd.extend({dataTransfer:null}),wd=Wc.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Zc}),xd=A$1.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),yd=dd.extend({deltaX:function(a){return "deltaX"in a?a.deltaX:"wheelDeltaX"in
a?-a.wheelDeltaX:0},deltaY:function(a){return "deltaY"in a?a.deltaY:"wheelDeltaY"in a?-a.wheelDeltaY:"wheelDelta"in a?-a.wheelDelta:0},deltaZ:null,deltaMode:null}),zd=[["abort","abort"],[Ya,"animationEnd"],[Za,"animationIteration"],[$a,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],
["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],
["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[ab,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],Ad={},Bd={};function Cd(a,b){var c=a[0];a=a[1];var d="on"+(a[0].toUpperCase()+a.slice(1));b={phasedRegistrationNames:{bubbled:d,captured:d+"Capture"},dependencies:[c],isInteractive:b};Ad[a]=b;Bd[c]=b;}
[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["auxclick","auxClick"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],
["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(a){Cd(a,!0);});zd.forEach(function(a){Cd(a,!1);});
var Dd={eventTypes:Ad,isInteractiveTopLevelEventType:function(a){a=Bd[a];return void 0!==a&&!0===a.isInteractive},extractEvents:function(a,b,c,d){var e=Bd[a];if(!e)return null;switch(a){case "keypress":if(0===rd(c))return null;case "keydown":case "keyup":a=ud;break;case "blur":case "focus":a=qd;break;case "click":if(2===c.button)return null;case "auxclick":case "dblclick":case "mousedown":case "mousemove":case "mouseup":case "mouseout":case "mouseover":case "contextmenu":a=dd;break;case "drag":case "dragend":case "dragenter":case "dragexit":case "dragleave":case "dragover":case "dragstart":case "drop":a=
vd;break;case "touchcancel":case "touchend":case "touchmove":case "touchstart":a=wd;break;case Ya:case Za:case $a:a=od;break;case ab:a=xd;break;case "scroll":a=Wc;break;case "wheel":a=yd;break;case "copy":case "cut":case "paste":a=pd;break;case "gotpointercapture":case "lostpointercapture":case "pointercancel":case "pointerdown":case "pointermove":case "pointerout":case "pointerover":case "pointerup":a=ed;break;default:a=A$1;}b=a.getPooled(e,b,c,d);Ra(b);return b}},Ed=Dd.isInteractiveTopLevelEventType,
Fd=[];function Gd(a){var b=a.targetInst,c=b;do{if(!c){a.ancestors.push(c);break}var d;for(d=c;d.return;)d=d.return;d=3!==d.tag?null:d.stateNode.containerInfo;if(!d)break;a.ancestors.push(c);c=Ia(d);}while(c);for(c=0;c<a.ancestors.length;c++){b=a.ancestors[c];var e=Rb(a.nativeEvent);d=a.topLevelType;for(var f=a.nativeEvent,g=null,h=0;h<pa.length;h++){var k=pa[h];k&&(k=k.extractEvents(d,b,f,e))&&(g=ya(g,k));}Ea(g);}}var Hd=!0;
function G$1(a,b){if(!b)return null;var c=(Ed(a)?Id:Jd).bind(null,a);b.addEventListener(a,c,!1);}function Kd(a,b){if(!b)return null;var c=(Ed(a)?Id:Jd).bind(null,a);b.addEventListener(a,c,!0);}function Id(a,b){Lb(Jd,a,b);}
function Jd(a,b){if(Hd){var c=Rb(b);c=Ia(c);null===c||"number"!==typeof c.tag||2===kd(c)||(c=null);if(Fd.length){var d=Fd.pop();d.topLevelType=a;d.nativeEvent=b;d.targetInst=c;a=d;}else a={topLevelType:a,nativeEvent:b,targetInst:c,ancestors:[]};try{Ob(Gd,a);}finally{a.topLevelType=null,a.nativeEvent=null,a.targetInst=null,a.ancestors.length=0,10>Fd.length&&Fd.push(a);}}}var Ld={},Md=0,Nd="_reactListenersID"+(""+Math.random()).slice(2);
function Od(a){Object.prototype.hasOwnProperty.call(a,Nd)||(a[Nd]=Md++,Ld[a[Nd]]={});return Ld[a[Nd]]}function Pd(a){a=a||("undefined"!==typeof document?document:void 0);if("undefined"===typeof a)return null;try{return a.activeElement||a.body}catch(b){return a.body}}function Qd(a){for(;a&&a.firstChild;)a=a.firstChild;return a}
function Rd(a,b){var c=Qd(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return {node:c,offset:b-a};a=d;}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode;}c=void 0;}c=Qd(c);}}function Sd(a,b){return a&&b?a===b?!0:a&&3===a.nodeType?!1:b&&3===b.nodeType?Sd(a,b.parentNode):"contains"in a?a.contains(b):a.compareDocumentPosition?!!(a.compareDocumentPosition(b)&16):!1:!1}
function Td(){for(var a=window,b=Pd();b instanceof a.HTMLIFrameElement;){try{a=b.contentDocument.defaultView;}catch(c){break}b=Pd(a.document);}return b}function Ud(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&("input"===b&&("text"===a.type||"search"===a.type||"tel"===a.type||"url"===a.type||"password"===a.type)||"textarea"===b||"true"===a.contentEditable)}
var Vd=Sa&&"documentMode"in document&&11>=document.documentMode,Wd={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Xd=null,Yd=null,Zd=null,$d=!1;
function ae(a,b){var c=b.window===b?b.document:9===b.nodeType?b:b.ownerDocument;if($d||null==Xd||Xd!==Pd(c))return null;c=Xd;"selectionStart"in c&&Ud(c)?c={start:c.selectionStart,end:c.selectionEnd}:(c=(c.ownerDocument&&c.ownerDocument.defaultView||window).getSelection(),c={anchorNode:c.anchorNode,anchorOffset:c.anchorOffset,focusNode:c.focusNode,focusOffset:c.focusOffset});return Zd&&jd(Zd,c)?null:(Zd=c,a=A$1.getPooled(Wd.select,Yd,a,b),a.type="select",a.target=Xd,Ra(a),a)}
var be={eventTypes:Wd,extractEvents:function(a,b,c,d){var e=d.window===d?d.document:9===d.nodeType?d:d.ownerDocument,f;if(!(f=!e)){a:{e=Od(e);f=ta.onSelect;for(var g=0;g<f.length;g++){var h=f[g];if(!e.hasOwnProperty(h)||!e[h]){e=!1;break a}}e=!0;}f=!e;}if(f)return null;e=b?Ka(b):window;switch(a){case "focus":if(Qb(e)||"true"===e.contentEditable)Xd=e,Yd=b,Zd=null;break;case "blur":Zd=Yd=Xd=null;break;case "mousedown":$d=!0;break;case "contextmenu":case "mouseup":case "dragend":return $d=!1,ae(c,d);case "selectionchange":if(Vd)break;
case "keydown":case "keyup":return ae(c,d)}return null}};Ca.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" "));ua=La;va=Ja;wa=Ka;Ca.injectEventPluginsByName({SimpleEventPlugin:Dd,EnterLeaveEventPlugin:gd,ChangeEventPlugin:Vc,SelectEventPlugin:be,BeforeInputEventPlugin:Bb});function de(a){var b="";react.Children.forEach(a,function(a){null!=a&&(b+=a);});return b}
function ee(a,b){a=objectAssign({children:void 0},b);if(b=de(b.children))a.children=b;return a}function fe(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b["$"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty("$"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0);}else{c=""+zc(c);b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e]);}null!==b&&(b.selected=!0);}}
function ge(a,b){null!=b.dangerouslySetInnerHTML?t$1("91"):void 0;return objectAssign({},b,{value:void 0,defaultValue:void 0,children:""+a._wrapperState.initialValue})}function he(a,b){var c=b.value;null==c&&(c=b.defaultValue,b=b.children,null!=b&&(null!=c?t$1("92"):void 0,Array.isArray(b)&&(1>=b.length?void 0:t$1("93"),b=b[0]),c=b),null==c&&(c=""));a._wrapperState={initialValue:zc(c)};}
function ie(a,b){var c=zc(b.value),d=zc(b.defaultValue);null!=c&&(c=""+c,c!==a.value&&(a.value=c),null==b.defaultValue&&a.defaultValue!==c&&(a.defaultValue=c));null!=d&&(a.defaultValue=""+d);}function je(a){var b=a.textContent;b===a._wrapperState.initialValue&&(a.value=b);}var ke={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};
function le(a){switch(a){case "svg":return "http://www.w3.org/2000/svg";case "math":return "http://www.w3.org/1998/Math/MathML";default:return "http://www.w3.org/1999/xhtml"}}function me(a,b){return null==a||"http://www.w3.org/1999/xhtml"===a?le(b):"http://www.w3.org/2000/svg"===a&&"foreignObject"===b?"http://www.w3.org/1999/xhtml":a}
var ne=void 0,oe=function(a){return "undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)});}:a}(function(a,b){if(a.namespaceURI!==ke.svg||"innerHTML"in a)a.innerHTML=b;else{ne=ne||document.createElement("div");ne.innerHTML="<svg>"+b+"</svg>";for(b=ne.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild);}});
function pe(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b;}
var qe={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,
floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},re=["Webkit","ms","Moz","O"];Object.keys(qe).forEach(function(a){re.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);qe[b]=qe[a];});});function se(a,b,c){return null==b||"boolean"===typeof b||""===b?"":c||"number"!==typeof b||0===b||qe.hasOwnProperty(a)&&qe[a]?(""+b).trim():b+"px"}
function te(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf("--"),e=se(c,b[c],d);"float"===c&&(c="cssFloat");d?a.setProperty(c,e):a[c]=e;}}var ue=objectAssign({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});
function ve(a,b){b&&(ue[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML?t$1("137",a,""):void 0),null!=b.dangerouslySetInnerHTML&&(null!=b.children?t$1("60"):void 0,"object"===typeof b.dangerouslySetInnerHTML&&"__html"in b.dangerouslySetInnerHTML?void 0:t$1("61")),null!=b.style&&"object"!==typeof b.style?t$1("62",""):void 0);}
function we(a,b){if(-1===a.indexOf("-"))return "string"===typeof b.is;switch(a){case "annotation-xml":case "color-profile":case "font-face":case "font-face-src":case "font-face-uri":case "font-face-format":case "font-face-name":case "missing-glyph":return !1;default:return !0}}
function xe(a,b){a=9===a.nodeType||11===a.nodeType?a:a.ownerDocument;var c=Od(a);b=ta[b];for(var d=0;d<b.length;d++){var e=b[d];if(!c.hasOwnProperty(e)||!c[e]){switch(e){case "scroll":Kd("scroll",a);break;case "focus":case "blur":Kd("focus",a);Kd("blur",a);c.blur=!0;c.focus=!0;break;case "cancel":case "close":Sb(e)&&Kd(e,a);break;case "invalid":case "submit":case "reset":break;default:-1===bb.indexOf(e)&&G$1(e,a);}c[e]=!0;}}}function ye(){}var ze=null,Ae=null;
function Be(a,b){switch(a){case "button":case "input":case "select":case "textarea":return !!b.autoFocus}return !1}function Ce(a,b){return "textarea"===a||"option"===a||"noscript"===a||"string"===typeof b.children||"number"===typeof b.children||"object"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&null!=b.dangerouslySetInnerHTML.__html}var De="function"===typeof setTimeout?setTimeout:void 0,Ee="function"===typeof clearTimeout?clearTimeout:void 0;
function Fe(a){for(a=a.nextSibling;a&&1!==a.nodeType&&3!==a.nodeType;)a=a.nextSibling;return a}function Ge(a){for(a=a.firstChild;a&&1!==a.nodeType&&3!==a.nodeType;)a=a.nextSibling;return a}var He=[],Ie=-1;function H$1(a){0>Ie||(a.current=He[Ie],He[Ie]=null,Ie--);}function I$1(a,b){Ie++;He[Ie]=a.current;a.current=b;}var Je={},J$1={current:Je},K$1={current:!1},Ke=Je;
function Le(a,b){var c=a.type.contextTypes;if(!c)return Je;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}function L$1(a){a=a.childContextTypes;return null!==a&&void 0!==a}function Me(a){H$1(K$1,a);H$1(J$1,a);}function Ne(a){H$1(K$1,a);H$1(J$1,a);}
function Oe(a,b,c){J$1.current!==Je?t$1("168"):void 0;I$1(J$1,b,a);I$1(K$1,c,a);}function Pe(a,b,c){var d=a.stateNode;a=b.childContextTypes;if("function"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)e in a?void 0:t$1("108",mc(b)||"Unknown",e);return objectAssign({},c,d)}function Qe(a){var b=a.stateNode;b=b&&b.__reactInternalMemoizedMergedChildContext||Je;Ke=J$1.current;I$1(J$1,b,a);I$1(K$1,K$1.current,a);return !0}
function Re(a,b,c){var d=a.stateNode;d?void 0:t$1("169");c?(b=Pe(a,b,Ke),d.__reactInternalMemoizedMergedChildContext=b,H$1(K$1,a),H$1(J$1,a),I$1(J$1,b,a)):H$1(K$1,a);I$1(K$1,c,a);}var Se=null,Te=null;function Ue(a){return function(b){try{return a(b)}catch(c){}}}
function Ve(a){if("undefined"===typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return !1;var b=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(b.isDisabled||!b.supportsFiber)return !0;try{var c=b.inject(a);Se=Ue(function(a){return b.onCommitFiberRoot(c,a)});Te=Ue(function(a){return b.onCommitFiberUnmount(c,a)});}catch(d){}return !0}
function We(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null;this.index=0;this.ref=null;this.pendingProps=b;this.firstContextDependency=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.effectTag=0;this.lastEffect=this.firstEffect=this.nextEffect=null;this.childExpirationTime=this.expirationTime=0;this.alternate=null;}function M$1(a,b,c,d){return new We(a,b,c,d)}
function Xe(a){a=a.prototype;return !(!a||!a.isReactComponent)}function Ye(a){if("function"===typeof a)return Xe(a)?1:0;if(void 0!==a&&null!==a){a=a.$$typeof;if(a===gc)return 11;if(a===ic)return 14}return 2}
function Ze(a,b){var c=a.alternate;null===c?(c=M$1(a.tag,b,a.key,a.mode),c.elementType=a.elementType,c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.pendingProps=b,c.effectTag=0,c.nextEffect=null,c.firstEffect=null,c.lastEffect=null);c.childExpirationTime=a.childExpirationTime;c.expirationTime=a.expirationTime;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;c.firstContextDependency=a.firstContextDependency;c.sibling=a.sibling;
c.index=a.index;c.ref=a.ref;return c}
function $e(a,b,c,d,e,f){var g=2;d=a;if("function"===typeof a)Xe(a)&&(g=1);else if("string"===typeof a)g=5;else a:switch(a){case ac:return af(c.children,e,f,b);case fc:return bf(c,e|3,f,b);case bc:return bf(c,e|2,f,b);case cc:return a=M$1(12,c,b,e|4),a.elementType=cc,a.type=cc,a.expirationTime=f,a;case hc:return a=M$1(13,c,b,e),a.elementType=hc,a.type=hc,a.expirationTime=f,a;default:if("object"===typeof a&&null!==a)switch(a.$$typeof){case dc:g=10;break a;case ec:g=9;break a;case gc:g=11;break a;case ic:g=
14;break a;case jc:g=16;d=null;break a}t$1("130",null==a?a:typeof a,"");}b=M$1(g,c,b,e);b.elementType=a;b.type=d;b.expirationTime=f;return b}function af(a,b,c,d){a=M$1(7,a,d,b);a.expirationTime=c;return a}function bf(a,b,c,d){a=M$1(8,a,d,b);b=0===(b&1)?bc:fc;a.elementType=b;a.type=b;a.expirationTime=c;return a}function cf(a,b,c){a=M$1(6,a,null,b);a.expirationTime=c;return a}
function df(a,b,c){b=M$1(4,null!==a.children?a.children:[],a.key,b);b.expirationTime=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}function ef(a,b){a.didError=!1;var c=a.earliestPendingTime;0===c?a.earliestPendingTime=a.latestPendingTime=b:c<b?a.earliestPendingTime=b:a.latestPendingTime>b&&(a.latestPendingTime=b);ff(b,a);}
function gf(a,b){a.didError=!1;var c=a.latestPingedTime;0!==c&&c>=b&&(a.latestPingedTime=0);c=a.earliestPendingTime;var d=a.latestPendingTime;c===b?a.earliestPendingTime=d===b?a.latestPendingTime=0:d:d===b&&(a.latestPendingTime=c);c=a.earliestSuspendedTime;d=a.latestSuspendedTime;0===c?a.earliestSuspendedTime=a.latestSuspendedTime=b:c<b?a.earliestSuspendedTime=b:d>b&&(a.latestSuspendedTime=b);ff(b,a);}
function hf(a,b){var c=a.earliestPendingTime;a=a.earliestSuspendedTime;c>b&&(b=c);a>b&&(b=a);return b}function ff(a,b){var c=b.earliestSuspendedTime,d=b.latestSuspendedTime,e=b.earliestPendingTime,f=b.latestPingedTime;e=0!==e?e:f;0===e&&(0===a||d<a)&&(e=d);a=e;0!==a&&c>a&&(a=c);b.nextExpirationTimeToWorkOn=e;b.expirationTime=a;}var jf=!1;
function kf(a){return {baseState:a,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function lf(a){return {baseState:a.baseState,firstUpdate:a.firstUpdate,lastUpdate:a.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}
function mf(a){return {expirationTime:a,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function nf(a,b){null===a.lastUpdate?a.firstUpdate=a.lastUpdate=b:(a.lastUpdate.next=b,a.lastUpdate=b);}
function of(a,b){var c=a.alternate;if(null===c){var d=a.updateQueue;var e=null;null===d&&(d=a.updateQueue=kf(a.memoizedState));}else d=a.updateQueue,e=c.updateQueue,null===d?null===e?(d=a.updateQueue=kf(a.memoizedState),e=c.updateQueue=kf(c.memoizedState)):d=a.updateQueue=lf(e):null===e&&(e=c.updateQueue=lf(d));null===e||d===e?nf(d,b):null===d.lastUpdate||null===e.lastUpdate?(nf(d,b),nf(e,b)):(nf(d,b),e.lastUpdate=b);}
function pf(a,b){var c=a.updateQueue;c=null===c?a.updateQueue=kf(a.memoizedState):qf(a,c);null===c.lastCapturedUpdate?c.firstCapturedUpdate=c.lastCapturedUpdate=b:(c.lastCapturedUpdate.next=b,c.lastCapturedUpdate=b);}function qf(a,b){var c=a.alternate;null!==c&&b===c.updateQueue&&(b=a.updateQueue=lf(b));return b}
function rf(a,b,c,d,e,f){switch(c.tag){case 1:return a=c.payload,"function"===typeof a?a.call(f,d,e):a;case 3:a.effectTag=a.effectTag&-2049|64;case 0:a=c.payload;e="function"===typeof a?a.call(f,d,e):a;if(null===e||void 0===e)break;return objectAssign({},d,e);case 2:jf=!0;}return d}
function sf(a,b,c,d,e){jf=!1;b=qf(a,b);for(var f=b.baseState,g=null,h=0,k=b.firstUpdate,l=f;null!==k;){var m=k.expirationTime;m<e?(null===g&&(g=k,f=l),h<m&&(h=m)):(l=rf(a,b,k,l,c,d),null!==k.callback&&(a.effectTag|=32,k.nextEffect=null,null===b.lastEffect?b.firstEffect=b.lastEffect=k:(b.lastEffect.nextEffect=k,b.lastEffect=k)));k=k.next;}m=null;for(k=b.firstCapturedUpdate;null!==k;){var q=k.expirationTime;q<e?(null===m&&(m=k,null===g&&(f=l)),h<q&&(h=q)):(l=rf(a,b,k,l,c,d),null!==k.callback&&(a.effectTag|=
32,k.nextEffect=null,null===b.lastCapturedEffect?b.firstCapturedEffect=b.lastCapturedEffect=k:(b.lastCapturedEffect.nextEffect=k,b.lastCapturedEffect=k)));k=k.next;}null===g&&(b.lastUpdate=null);null===m?b.lastCapturedUpdate=null:a.effectTag|=32;null===g&&null===m&&(f=l);b.baseState=f;b.firstUpdate=g;b.firstCapturedUpdate=m;a.expirationTime=h;a.memoizedState=l;}
function tf(a,b,c){null!==b.firstCapturedUpdate&&(null!==b.lastUpdate&&(b.lastUpdate.next=b.firstCapturedUpdate,b.lastUpdate=b.lastCapturedUpdate),b.firstCapturedUpdate=b.lastCapturedUpdate=null);uf(b.firstEffect,c);b.firstEffect=b.lastEffect=null;uf(b.firstCapturedEffect,c);b.firstCapturedEffect=b.lastCapturedEffect=null;}function uf(a,b){for(;null!==a;){var c=a.callback;if(null!==c){a.callback=null;var d=b;"function"!==typeof c?t$1("191",c):void 0;c.call(d);}a=a.nextEffect;}}
function vf(a,b){return {value:a,source:b,stack:nc(b)}}var wf={current:null},xf=null,yf=null,zf=null;function Af(a,b){var c=a.type._context;I$1(wf,c._currentValue,a);c._currentValue=b;}function Bf(a){var b=wf.current;H$1(wf,a);a.type._context._currentValue=b;}function Cf(a){xf=a;zf=yf=null;a.firstContextDependency=null;}
function Df(a,b){if(zf!==a&&!1!==b&&0!==b){if("number"!==typeof b||1073741823===b)zf=a,b=1073741823;b={context:a,observedBits:b,next:null};null===yf?(null===xf?t$1("293"):void 0,xf.firstContextDependency=yf=b):yf=yf.next=b;}return a._currentValue}var Ef={},N$1={current:Ef},Ff={current:Ef},Gf={current:Ef};function Hf(a){a===Ef?t$1("174"):void 0;return a}
function If(a,b){I$1(Gf,b,a);I$1(Ff,a,a);I$1(N$1,Ef,a);var c=b.nodeType;switch(c){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:me(null,"");break;default:c=8===c?b.parentNode:b,b=c.namespaceURI||null,c=c.tagName,b=me(b,c);}H$1(N$1,a);I$1(N$1,b,a);}function Jf(a){H$1(N$1,a);H$1(Ff,a);H$1(Gf,a);}function Kf(a){Hf(Gf.current);var b=Hf(N$1.current);var c=me(b,a.type);b!==c&&(I$1(Ff,a,a),I$1(N$1,c,a));}function Lf(a){Ff.current===a&&(H$1(N$1,a),H$1(Ff,a));}
function O$1(a,b){if(a&&a.defaultProps){b=objectAssign({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c]);}return b}function Mf(a){var b=a._result;switch(a._status){case 1:return b;case 2:throw b;case 0:throw b;default:throw a._status=0,b=a._ctor,b=b(),b.then(function(b){0===a._status&&(b=b.default,a._status=1,a._result=b);},function(b){0===a._status&&(a._status=2,a._result=b);}),a._result=b,b;}}var Nf=Xb.ReactCurrentOwner,Of=(new react.Component).refs;
function Pf(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:objectAssign({},b,c);a.memoizedState=c;d=a.updateQueue;null!==d&&0===a.expirationTime&&(d.baseState=c);}
var Uf={isMounted:function(a){return (a=a._reactInternalFiber)?2===kd(a):!1},enqueueSetState:function(a,b,c){a=a._reactInternalFiber;var d=Qf();d=Rf(d,a);var e=mf(d);e.payload=b;void 0!==c&&null!==c&&(e.callback=c);of(a,e);Tf(a,d);},enqueueReplaceState:function(a,b,c){a=a._reactInternalFiber;var d=Qf();d=Rf(d,a);var e=mf(d);e.tag=1;e.payload=b;void 0!==c&&null!==c&&(e.callback=c);of(a,e);Tf(a,d);},enqueueForceUpdate:function(a,b){a=a._reactInternalFiber;var c=Qf();c=Rf(c,a);var d=mf(c);d.tag=
2;void 0!==b&&null!==b&&(d.callback=b);of(a,d);Tf(a,c);}};function Vf(a,b,c,d,e,f,g){a=a.stateNode;return "function"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,f,g):b.prototype&&b.prototype.isPureReactComponent?!jd(c,d)||!jd(e,f):!0}
function Wf(a,b,c){var d=!1,e=Je;var f=b.contextType;"object"===typeof f&&null!==f?f=Nf.currentDispatcher.readContext(f):(e=L$1(b)?Ke:J$1.current,d=b.contextTypes,f=(d=null!==d&&void 0!==d)?Le(a,e):Je);b=new b(c,f);a.memoizedState=null!==b.state&&void 0!==b.state?b.state:null;b.updater=Uf;a.stateNode=b;b._reactInternalFiber=a;d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=e,a.__reactInternalMemoizedMaskedChildContext=f);return b}
function Xf(a,b,c,d){a=b.state;"function"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);"function"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&Uf.enqueueReplaceState(b,b.state,null);}
function Yf(a,b,c,d){var e=a.stateNode;e.props=c;e.state=a.memoizedState;e.refs=Of;var f=b.contextType;"object"===typeof f&&null!==f?e.context=Nf.currentDispatcher.readContext(f):(f=L$1(b)?Ke:J$1.current,e.context=Le(a,f));f=a.updateQueue;null!==f&&(sf(a,f,c,e,d),e.state=a.memoizedState);f=b.getDerivedStateFromProps;"function"===typeof f&&(Pf(a,b,f,c),e.state=a.memoizedState);"function"===typeof b.getDerivedStateFromProps||"function"===typeof e.getSnapshotBeforeUpdate||"function"!==typeof e.UNSAFE_componentWillMount&&
"function"!==typeof e.componentWillMount||(b=e.state,"function"===typeof e.componentWillMount&&e.componentWillMount(),"function"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&Uf.enqueueReplaceState(e,e.state,null),f=a.updateQueue,null!==f&&(sf(a,f,c,e,d),e.state=a.memoizedState));"function"===typeof e.componentDidMount&&(a.effectTag|=4);}var Zf=Array.isArray;
function $f(a,b,c){a=c.ref;if(null!==a&&"function"!==typeof a&&"object"!==typeof a){if(c._owner){c=c._owner;var d=void 0;c&&(1!==c.tag?t$1("289"):void 0,d=c.stateNode);d?void 0:t$1("147",a);var e=""+a;if(null!==b&&null!==b.ref&&"function"===typeof b.ref&&b.ref._stringRef===e)return b.ref;b=function(a){var b=d.refs;b===Of&&(b=d.refs={});null===a?delete b[e]:b[e]=a;};b._stringRef=e;return b}"string"!==typeof a?t$1("284"):void 0;c._owner?void 0:t$1("290",a);}return a}
function ag(a,b){"textarea"!==a.type&&t$1("31","[object Object]"===Object.prototype.toString.call(b)?"object with keys {"+Object.keys(b).join(", ")+"}":b,"");}
function bg(a){function b(b,c){if(a){var d=b.lastEffect;null!==d?(d.nextEffect=c,b.lastEffect=c):b.firstEffect=b.lastEffect=c;c.nextEffect=null;c.effectTag=8;}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b,c){a=Ze(a,b,c);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.effectTag=
2,c):d;b.effectTag=2;return c}function g(b){a&&null===b.alternate&&(b.effectTag=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=cf(c,a.mode,d),b.return=a,b;b=e(b,c,d);b.return=a;return b}function k(a,b,c,d){if(null!==b&&b.elementType===c.type)return d=e(b,c.props,d),d.ref=$f(a,b,c),d.return=a,d;d=$e(c.type,c.key,c.props,null,a.mode,d);d.ref=$f(a,b,c);d.return=a;return d}function l(a,b,c,d){if(null===b||4!==b.tag||b.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==
c.implementation)return b=df(c,a.mode,d),b.return=a,b;b=e(b,c.children||[],d);b.return=a;return b}function m(a,b,c,d,g){if(null===b||7!==b.tag)return b=af(c,a.mode,d,g),b.return=a,b;b=e(b,c,d);b.return=a;return b}function q(a,b,c){if("string"===typeof b||"number"===typeof b)return b=cf(""+b,a.mode,c),b.return=a,b;if("object"===typeof b&&null!==b){switch(b.$$typeof){case Zb:return c=$e(b.type,b.key,b.props,null,a.mode,c),c.ref=$f(a,null,b),c.return=a,c;case $b:return b=df(b,a.mode,c),b.return=a,b}if(Zf(b)||
lc(b))return b=af(b,a.mode,c,null),b.return=a,b;ag(a,b);}return null}function x(a,b,c,d){var e=null!==b?b.key:null;if("string"===typeof c||"number"===typeof c)return null!==e?null:h(a,b,""+c,d);if("object"===typeof c&&null!==c){switch(c.$$typeof){case Zb:return c.key===e?c.type===ac?m(a,b,c.props.children,d,e):k(a,b,c,d):null;case $b:return c.key===e?l(a,b,c,d):null}if(Zf(c)||lc(c))return null!==e?null:m(a,b,c,d,null);ag(a,c);}return null}function z(a,b,c,d,e){if("string"===typeof d||"number"===typeof d)return a=
a.get(c)||null,h(b,a,""+d,e);if("object"===typeof d&&null!==d){switch(d.$$typeof){case Zb:return a=a.get(null===d.key?c:d.key)||null,d.type===ac?m(b,a,d.props.children,e,d.key):k(b,a,d,e);case $b:return a=a.get(null===d.key?c:d.key)||null,l(b,a,d,e)}if(Zf(d)||lc(d))return a=a.get(c)||null,m(b,a,d,e,null);ag(b,d);}return null}function B(e,g,h,k){for(var l=null,r=null,m=g,u=g=0,p=null;null!==m&&u<h.length;u++){m.index>u?(p=m,m=null):p=m.sibling;var v=x(e,m,h[u],k);if(null===v){null===m&&(m=p);break}a&&
m&&null===v.alternate&&b(e,m);g=f(v,g,u);null===r?l=v:r.sibling=v;r=v;m=p;}if(u===h.length)return c(e,m),l;if(null===m){for(;u<h.length;u++)if(m=q(e,h[u],k))g=f(m,g,u),null===r?l=m:r.sibling=m,r=m;return l}for(m=d(e,m);u<h.length;u++)if(p=z(m,e,u,h[u],k))a&&null!==p.alternate&&m.delete(null===p.key?u:p.key),g=f(p,g,u),null===r?l=p:r.sibling=p,r=p;a&&m.forEach(function(a){return b(e,a)});return l}function Q(e,g,h,k){var l=lc(h);"function"!==typeof l?t$1("150"):void 0;h=l.call(h);null==h?t$1("151"):void 0;
for(var m=l=null,r=g,u=g=0,p=null,v=h.next();null!==r&&!v.done;u++,v=h.next()){r.index>u?(p=r,r=null):p=r.sibling;var y=x(e,r,v.value,k);if(null===y){r||(r=p);break}a&&r&&null===y.alternate&&b(e,r);g=f(y,g,u);null===m?l=y:m.sibling=y;m=y;r=p;}if(v.done)return c(e,r),l;if(null===r){for(;!v.done;u++,v=h.next())v=q(e,v.value,k),null!==v&&(g=f(v,g,u),null===m?l=v:m.sibling=v,m=v);return l}for(r=d(e,r);!v.done;u++,v=h.next())v=z(r,e,u,v.value,k),null!==v&&(a&&null!==v.alternate&&r.delete(null===v.key?u:
v.key),g=f(v,g,u),null===m?l=v:m.sibling=v,m=v);a&&r.forEach(function(a){return b(e,a)});return l}return function(a,d,f,h){var k="object"===typeof f&&null!==f&&f.type===ac&&null===f.key;k&&(f=f.props.children);var l="object"===typeof f&&null!==f;if(l)switch(f.$$typeof){case Zb:a:{l=f.key;for(k=d;null!==k;){if(k.key===l)if(7===k.tag?f.type===ac:k.elementType===f.type){c(a,k.sibling);d=e(k,f.type===ac?f.props.children:f.props,h);d.ref=$f(a,k,f);d.return=a;a=d;break a}else{c(a,k);break}else b(a,k);k=
k.sibling;}f.type===ac?(d=af(f.props.children,a.mode,h,f.key),d.return=a,a=d):(h=$e(f.type,f.key,f.props,null,a.mode,h),h.ref=$f(a,d,f),h.return=a,a=h);}return g(a);case $b:a:{for(k=f.key;null!==d;){if(d.key===k)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[],h);d.return=a;a=d;break a}else{c(a,d);break}else b(a,d);d=d.sibling;}d=df(f,a.mode,h);d.return=a;a=d;}return g(a)}if("string"===typeof f||"number"===typeof f)return f=
""+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f,h),d.return=a,a=d):(c(a,d),d=cf(f,a.mode,h),d.return=a,a=d),g(a);if(Zf(f))return B(a,d,f,h);if(lc(f))return Q(a,d,f,h);l&&ag(a,f);if("undefined"===typeof f&&!k)switch(a.tag){case 1:case 0:h=a.type,t$1("152",h.displayName||h.name||"Component");}return c(a,d)}}var cg=bg(!0),dg=bg(!1),eg=null,fg=null,gg=!1;
function hg(a,b){var c=M$1(5,null,null,0);c.elementType="DELETED";c.type="DELETED";c.stateNode=b;c.return=a;c.effectTag=8;null!==a.lastEffect?(a.lastEffect.nextEffect=c,a.lastEffect=c):a.firstEffect=a.lastEffect=c;}function ig(a,b){switch(a.tag){case 5:var c=a.type;b=1!==b.nodeType||c.toLowerCase()!==b.nodeName.toLowerCase()?null:b;return null!==b?(a.stateNode=b,!0):!1;case 6:return b=""===a.pendingProps||3!==b.nodeType?null:b,null!==b?(a.stateNode=b,!0):!1;default:return !1}}
function jg(a){if(gg){var b=fg;if(b){var c=b;if(!ig(a,b)){b=Fe(c);if(!b||!ig(a,b)){a.effectTag|=2;gg=!1;eg=a;return}hg(eg,c);}eg=a;fg=Ge(b);}else a.effectTag|=2,gg=!1,eg=a;}}function kg(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag;)a=a.return;eg=a;}function lg(a){if(a!==eg)return !1;if(!gg)return kg(a),gg=!0,!1;var b=a.type;if(5!==a.tag||"head"!==b&&"body"!==b&&!Ce(b,a.memoizedProps))for(b=fg;b;)hg(a,b),b=Fe(b);kg(a);fg=eg?Fe(a.stateNode):null;return !0}function mg(){fg=eg=null;gg=!1;}var ng=Xb.ReactCurrentOwner;
function P$1(a,b,c,d){b.child=null===a?dg(b,null,c,d):cg(b,a.child,c,d);}function og(a,b,c,d,e){c=c.render;var f=b.ref;Cf(b,e);d=c(d,f);b.effectTag|=1;P$1(a,b,d,e);return b.child}
function pg(a,b,c,d,e,f){if(null===a){var g=c.type;if("function"===typeof g&&!Xe(g)&&void 0===g.defaultProps&&null===c.compare)return b.tag=15,b.type=g,qg(a,b,g,d,e,f);a=$e(c.type,null,d,null,b.mode,f);a.ref=b.ref;a.return=b;return b.child=a}g=a.child;if(e<f&&(e=g.memoizedProps,c=c.compare,c=null!==c?c:jd,c(e,d)&&a.ref===b.ref))return rg(a,b,f);b.effectTag|=1;a=Ze(g,d,f);a.ref=b.ref;a.return=b;return b.child=a}
function qg(a,b,c,d,e,f){return null!==a&&e<f&&jd(a.memoizedProps,d)&&a.ref===b.ref?rg(a,b,f):sg(a,b,c,d,f)}function tg(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.effectTag|=128;}function sg(a,b,c,d,e){var f=L$1(c)?Ke:J$1.current;f=Le(b,f);Cf(b,e);c=c(d,f);b.effectTag|=1;P$1(a,b,c,e);return b.child}
function ug(a,b,c,d,e){if(L$1(c)){var f=!0;Qe(b);}else f=!1;Cf(b,e);if(null===b.stateNode)null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2),Wf(b,c,d,e),Yf(b,c,d,e),d=!0;else if(null===a){var g=b.stateNode,h=b.memoizedProps;g.props=h;var k=g.context,l=c.contextType;"object"===typeof l&&null!==l?l=Nf.currentDispatcher.readContext(l):(l=L$1(c)?Ke:J$1.current,l=Le(b,l));var m=c.getDerivedStateFromProps,q="function"===typeof m||"function"===typeof g.getSnapshotBeforeUpdate;q||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&
"function"!==typeof g.componentWillReceiveProps||(h!==d||k!==l)&&Xf(b,g,d,l);jf=!1;var x=b.memoizedState;k=g.state=x;var z=b.updateQueue;null!==z&&(sf(b,z,d,g,e),k=b.memoizedState);h!==d||x!==k||K$1.current||jf?("function"===typeof m&&(Pf(b,c,m,d),k=b.memoizedState),(h=jf||Vf(b,c,h,d,x,k,l))?(q||"function"!==typeof g.UNSAFE_componentWillMount&&"function"!==typeof g.componentWillMount||("function"===typeof g.componentWillMount&&g.componentWillMount(),"function"===typeof g.UNSAFE_componentWillMount&&
g.UNSAFE_componentWillMount()),"function"===typeof g.componentDidMount&&(b.effectTag|=4)):("function"===typeof g.componentDidMount&&(b.effectTag|=4),b.memoizedProps=d,b.memoizedState=k),g.props=d,g.state=k,g.context=l,d=h):("function"===typeof g.componentDidMount&&(b.effectTag|=4),d=!1);}else g=b.stateNode,h=b.memoizedProps,g.props=b.type===b.elementType?h:O$1(b.type,h),k=g.context,l=c.contextType,"object"===typeof l&&null!==l?l=Nf.currentDispatcher.readContext(l):(l=L$1(c)?Ke:J$1.current,l=Le(b,l)),m=c.getDerivedStateFromProps,
(q="function"===typeof m||"function"===typeof g.getSnapshotBeforeUpdate)||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&"function"!==typeof g.componentWillReceiveProps||(h!==d||k!==l)&&Xf(b,g,d,l),jf=!1,k=b.memoizedState,x=g.state=k,z=b.updateQueue,null!==z&&(sf(b,z,d,g,e),x=b.memoizedState),h!==d||k!==x||K$1.current||jf?("function"===typeof m&&(Pf(b,c,m,d),x=b.memoizedState),(m=jf||Vf(b,c,h,d,k,x,l))?(q||"function"!==typeof g.UNSAFE_componentWillUpdate&&"function"!==typeof g.componentWillUpdate||
("function"===typeof g.componentWillUpdate&&g.componentWillUpdate(d,x,l),"function"===typeof g.UNSAFE_componentWillUpdate&&g.UNSAFE_componentWillUpdate(d,x,l)),"function"===typeof g.componentDidUpdate&&(b.effectTag|=4),"function"===typeof g.getSnapshotBeforeUpdate&&(b.effectTag|=256)):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=256),b.memoizedProps=
d,b.memoizedState=x),g.props=d,g.state=x,g.context=l,d=m):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=256),d=!1);return vg(a,b,c,d,f,e)}
function vg(a,b,c,d,e,f){tg(a,b);var g=0!==(b.effectTag&64);if(!d&&!g)return e&&Re(b,c,!1),rg(a,b,f);d=b.stateNode;ng.current=b;var h=g&&"function"!==typeof c.getDerivedStateFromError?null:d.render();b.effectTag|=1;null!==a&&g?(b.child=cg(b,a.child,null,f),b.child=cg(b,null,h,f)):P$1(a,b,h,f);b.memoizedState=d.state;e&&Re(b,c,!0);return b.child}function wg(a){var b=a.stateNode;b.pendingContext?Oe(a,b.pendingContext,b.pendingContext!==b.context):b.context&&Oe(a,b.context,!1);If(a,b.containerInfo);}
function xg(a,b,c){var d=b.mode,e=b.pendingProps,f=b.memoizedState;if(0===(b.effectTag&64)){f=null;var g=!1;}else f={timedOutAt:null!==f?f.timedOutAt:0},g=!0,b.effectTag&=-65;null===a?g?(g=e.fallback,e=af(null,d,0,null),0===(b.mode&1)&&(e.child=null!==b.memoizedState?b.child.child:b.child),d=af(g,d,c,null),e.sibling=d,c=e,c.return=d.return=b):c=d=dg(b,null,e.children,c):null!==a.memoizedState?(d=a.child,a=d.sibling,g?(c=e.fallback,e=Ze(d,d.pendingProps,0),0===(b.mode&1)&&(g=null!==b.memoizedState?
b.child.child:b.child,g!==d.child&&(e.child=g)),d=e.sibling=Ze(a,c,a.expirationTime),c=e,e.childExpirationTime=0,c.return=d.return=b):c=d=cg(b,d.child,e.children,c)):(a=a.child,g?(g=e.fallback,e=af(null,d,0,null),e.child=a,0===(b.mode&1)&&(e.child=null!==b.memoizedState?b.child.child:b.child),d=e.sibling=af(g,d,c,null),d.effectTag|=2,c=e,e.childExpirationTime=0,c.return=d.return=b):d=c=cg(b,a,e.children,c));b.memoizedState=f;b.child=c;return d}
function rg(a,b,c){null!==a&&(b.firstContextDependency=a.firstContextDependency);if(b.childExpirationTime<c)return null;null!==a&&b.child!==a.child?t$1("153"):void 0;if(null!==b.child){a=b.child;c=Ze(a,a.pendingProps,a.expirationTime);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=Ze(a,a.pendingProps,a.expirationTime),c.return=b;c.sibling=null;}return b.child}
function yg(a,b,c){var d=b.expirationTime;if(null!==a&&a.memoizedProps===b.pendingProps&&!K$1.current&&d<c){switch(b.tag){case 3:wg(b);mg();break;case 5:Kf(b);break;case 1:L$1(b.type)&&Qe(b);break;case 4:If(b,b.stateNode.containerInfo);break;case 10:Af(b,b.memoizedProps.value);break;case 13:if(null!==b.memoizedState){d=b.child.childExpirationTime;if(0!==d&&d>=c)return xg(a,b,c);b=rg(a,b,c);return null!==b?b.sibling:null}}return rg(a,b,c)}b.expirationTime=0;switch(b.tag){case 2:d=b.elementType;null!==
a&&(a.alternate=null,b.alternate=null,b.effectTag|=2);a=b.pendingProps;var e=Le(b,J$1.current);Cf(b,c);e=d(a,e);b.effectTag|=1;if("object"===typeof e&&null!==e&&"function"===typeof e.render&&void 0===e.$$typeof){b.tag=1;if(L$1(d)){var f=!0;Qe(b);}else f=!1;b.memoizedState=null!==e.state&&void 0!==e.state?e.state:null;var g=d.getDerivedStateFromProps;"function"===typeof g&&Pf(b,d,g,a);e.updater=Uf;b.stateNode=e;e._reactInternalFiber=b;Yf(b,d,a,c);b=vg(null,b,d,!0,f,c);}else b.tag=0,P$1(null,b,e,c),b=b.child;
return b;case 16:e=b.elementType;null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2);f=b.pendingProps;a=Mf(e);b.type=a;e=b.tag=Ye(a);f=O$1(a,f);g=void 0;switch(e){case 0:g=sg(null,b,a,f,c);break;case 1:g=ug(null,b,a,f,c);break;case 11:g=og(null,b,a,f,c);break;case 14:g=pg(null,b,a,O$1(a.type,f),d,c);break;default:t$1("283",a);}return g;case 0:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:O$1(d,e),sg(a,b,d,e,c);case 1:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:O$1(d,e),ug(a,b,d,
e,c);case 3:wg(b);d=b.updateQueue;null===d?t$1("282"):void 0;e=b.memoizedState;e=null!==e?e.element:null;sf(b,d,b.pendingProps,null,c);d=b.memoizedState.element;if(d===e)mg(),b=rg(a,b,c);else{e=b.stateNode;if(e=(null===a||null===a.child)&&e.hydrate)fg=Ge(b.stateNode.containerInfo),eg=b,e=gg=!0;e?(b.effectTag|=2,b.child=dg(b,null,d,c)):(P$1(a,b,d,c),mg());b=b.child;}return b;case 5:return Kf(b),null===a&&jg(b),d=b.type,e=b.pendingProps,f=null!==a?a.memoizedProps:null,g=e.children,Ce(d,e)?g=null:null!==
f&&Ce(d,f)&&(b.effectTag|=16),tg(a,b),1!==c&&b.mode&1&&e.hidden?(b.expirationTime=1,b=null):(P$1(a,b,g,c),b=b.child),b;case 6:return null===a&&jg(b),null;case 13:return xg(a,b,c);case 4:return If(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=cg(b,null,d,c):P$1(a,b,d,c),b.child;case 11:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:O$1(d,e),og(a,b,d,e,c);case 7:return P$1(a,b,b.pendingProps,c),b.child;case 8:return P$1(a,b,b.pendingProps.children,c),b.child;case 12:return P$1(a,b,b.pendingProps.children,
c),b.child;case 10:a:{d=b.type._context;e=b.pendingProps;g=b.memoizedProps;f=e.value;Af(b,f);if(null!==g){var h=g.value;f=h===f&&(0!==h||1/h===1/f)||h!==h&&f!==f?0:("function"===typeof d._calculateChangedBits?d._calculateChangedBits(h,f):1073741823)|0;if(0===f){if(g.children===e.children&&!K$1.current){b=rg(a,b,c);break a}}else for(g=b.child,null!==g&&(g.return=b);null!==g;){h=g.firstContextDependency;if(null!==h){do{if(h.context===d&&0!==(h.observedBits&f)){if(1===g.tag){var k=mf(c);k.tag=2;of(g,k);}g.expirationTime<
c&&(g.expirationTime=c);k=g.alternate;null!==k&&k.expirationTime<c&&(k.expirationTime=c);for(var l=g.return;null!==l;){k=l.alternate;if(l.childExpirationTime<c)l.childExpirationTime=c,null!==k&&k.childExpirationTime<c&&(k.childExpirationTime=c);else if(null!==k&&k.childExpirationTime<c)k.childExpirationTime=c;else break;l=l.return;}}k=g.child;h=h.next;}while(null!==h)}else k=10===g.tag?g.type===b.type?null:g.child:g.child;if(null!==k)k.return=g;else for(k=g;null!==k;){if(k===b){k=null;break}g=k.sibling;
if(null!==g){g.return=k.return;k=g;break}k=k.return;}g=k;}}P$1(a,b,e.children,c);b=b.child;}return b;case 9:return e=b.type,f=b.pendingProps,d=f.children,Cf(b,c),e=Df(e,f.unstable_observedBits),d=d(e),b.effectTag|=1,P$1(a,b,d,c),b.child;case 14:return e=b.type,f=O$1(e.type,b.pendingProps),pg(a,b,e,f,d,c);case 15:return qg(a,b,b.type,b.pendingProps,d,c);case 17:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:O$1(d,e),null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2),b.tag=1,L$1(d)?(a=!0,Qe(b)):
a=!1,Cf(b,c),Wf(b,d,e,c),Yf(b,d,e,c),vg(null,b,d,!0,a,c);default:t$1("156");}}function zg(a){a.effectTag|=4;}var Ag=void 0,Bg=void 0,Fg=void 0,Gg=void 0;Ag=function(a,b){for(var c=b.child;null!==c;){if(5===c.tag||6===c.tag)a.appendChild(c.stateNode);else if(4!==c.tag&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return;}c.sibling.return=c.return;c=c.sibling;}};Bg=function(){};
Fg=function(a,b,c,d,e){var f=a.memoizedProps;if(f!==d){var g=b.stateNode;Hf(N$1.current);a=null;switch(c){case "input":f=Ac(g,f);d=Ac(g,d);a=[];break;case "option":f=ee(g,f);d=ee(g,d);a=[];break;case "select":f=objectAssign({},f,{value:void 0});d=objectAssign({},d,{value:void 0});a=[];break;case "textarea":f=ge(g,f);d=ge(g,d);a=[];break;default:"function"!==typeof f.onClick&&"function"===typeof d.onClick&&(g.onclick=ye);}ve(c,d);g=c=void 0;var h=null;for(c in f)if(!d.hasOwnProperty(c)&&f.hasOwnProperty(c)&&null!=f[c])if("style"===
c){var k=f[c];for(g in k)k.hasOwnProperty(g)&&(h||(h={}),h[g]="");}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(sa.hasOwnProperty(c)?a||(a=[]):(a=a||[]).push(c,null));for(c in d){var l=d[c];k=null!=f?f[c]:void 0;if(d.hasOwnProperty(c)&&l!==k&&(null!=l||null!=k))if("style"===c)if(k){for(g in k)!k.hasOwnProperty(g)||l&&l.hasOwnProperty(g)||(h||(h={}),h[g]="");for(g in l)l.hasOwnProperty(g)&&k[g]!==l[g]&&(h||
(h={}),h[g]=l[g]);}else h||(a||(a=[]),a.push(c,h)),h=l;else"dangerouslySetInnerHTML"===c?(l=l?l.__html:void 0,k=k?k.__html:void 0,null!=l&&k!==l&&(a=a||[]).push(c,""+l)):"children"===c?k===l||"string"!==typeof l&&"number"!==typeof l||(a=a||[]).push(c,""+l):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(sa.hasOwnProperty(c)?(null!=l&&xe(e,c),a||k===l||(a=[])):(a=a||[]).push(c,l));}h&&(a=a||[]).push("style",h);e=a;(b.updateQueue=e)&&zg(b);}};Gg=function(a,b,c,d){c!==d&&zg(b);};
function Hg(a,b){var c=b.source,d=b.stack;null===d&&null!==c&&(d=nc(c));null!==c&&mc(c.type);b=b.value;null!==a&&1===a.tag&&mc(a.type);try{console.error(b);}catch(e){setTimeout(function(){throw e;});}}function Ig(a){var b=a.ref;if(null!==b)if("function"===typeof b)try{b(null);}catch(c){Jg(a,c);}else b.current=null;}
function Kg(a){"function"===typeof Te&&Te(a);switch(a.tag){case 0:case 11:case 14:case 15:var b=a.updateQueue;if(null!==b&&(b=b.lastEffect,null!==b)){var c=b=b.next;do{var d=c.destroy;if(null!==d){var e=a;try{d();}catch(f){Jg(e,f);}}c=c.next;}while(c!==b)}break;case 1:Ig(a);b=a.stateNode;if("function"===typeof b.componentWillUnmount)try{b.props=a.memoizedProps,b.state=a.memoizedState,b.componentWillUnmount();}catch(f){Jg(a,f);}break;case 5:Ig(a);break;case 4:Lg(a);}}
function Mg(a){return 5===a.tag||3===a.tag||4===a.tag}
function Ng(a){a:{for(var b=a.return;null!==b;){if(Mg(b)){var c=b;break a}b=b.return;}t$1("160");c=void 0;}var d=b=void 0;switch(c.tag){case 5:b=c.stateNode;d=!1;break;case 3:b=c.stateNode.containerInfo;d=!0;break;case 4:b=c.stateNode.containerInfo;d=!0;break;default:t$1("161");}c.effectTag&16&&(pe(b,""),c.effectTag&=-17);a:b:for(c=a;;){for(;null===c.sibling;){if(null===c.return||Mg(c.return)){c=null;break a}c=c.return;}c.sibling.return=c.return;for(c=c.sibling;5!==c.tag&&6!==c.tag;){if(c.effectTag&2)continue b;
if(null===c.child||4===c.tag)continue b;else c.child.return=c,c=c.child;}if(!(c.effectTag&2)){c=c.stateNode;break a}}for(var e=a;;){if(5===e.tag||6===e.tag)if(c)if(d){var f=b,g=e.stateNode,h=c;8===f.nodeType?f.parentNode.insertBefore(g,h):f.insertBefore(g,h);}else b.insertBefore(e.stateNode,c);else d?(g=b,h=e.stateNode,8===g.nodeType?(f=g.parentNode,f.insertBefore(h,g)):(f=g,f.appendChild(h)),g=g._reactRootContainer,null!==g&&void 0!==g||null!==f.onclick||(f.onclick=ye)):b.appendChild(e.stateNode);
else if(4!==e.tag&&null!==e.child){e.child.return=e;e=e.child;continue}if(e===a)break;for(;null===e.sibling;){if(null===e.return||e.return===a)return;e=e.return;}e.sibling.return=e.return;e=e.sibling;}}
function Lg(a){for(var b=a,c=!1,d=void 0,e=void 0;;){if(!c){c=b.return;a:for(;;){null===c?t$1("160"):void 0;switch(c.tag){case 5:d=c.stateNode;e=!1;break a;case 3:d=c.stateNode.containerInfo;e=!0;break a;case 4:d=c.stateNode.containerInfo;e=!0;break a}c=c.return;}c=!0;}if(5===b.tag||6===b.tag){a:for(var f=b,g=f;;)if(Kg(g),null!==g.child&&4!==g.tag)g.child.return=g,g=g.child;else{if(g===f)break;for(;null===g.sibling;){if(null===g.return||g.return===f)break a;g=g.return;}g.sibling.return=g.return;g=g.sibling;}e?
(f=d,g=b.stateNode,8===f.nodeType?f.parentNode.removeChild(g):f.removeChild(g)):d.removeChild(b.stateNode);}else if(4===b.tag?(d=b.stateNode.containerInfo,e=!0):Kg(b),null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return;b=b.return;4===b.tag&&(c=!1);}b.sibling.return=b.return;b=b.sibling;}}
function Og(a,b){switch(b.tag){case 0:case 11:case 14:case 15:break;case 1:break;case 5:var c=b.stateNode;if(null!=c){var d=b.memoizedProps,e=null!==a?a.memoizedProps:d;a=b.type;var f=b.updateQueue;b.updateQueue=null;if(null!==f){c[Ha]=d;"input"===a&&"radio"===d.type&&null!=d.name&&Cc(c,d);we(a,e);b=we(a,d);for(e=0;e<f.length;e+=2){var g=f[e],h=f[e+1];"style"===g?te(c,h):"dangerouslySetInnerHTML"===g?oe(c,h):"children"===g?pe(c,h):yc(c,g,h,b);}switch(a){case "input":Dc(c,d);break;case "textarea":ie(c,
d);break;case "select":b=c._wrapperState.wasMultiple,c._wrapperState.wasMultiple=!!d.multiple,a=d.value,null!=a?fe(c,!!d.multiple,a,!1):b!==!!d.multiple&&(null!=d.defaultValue?fe(c,!!d.multiple,d.defaultValue,!0):fe(c,!!d.multiple,d.multiple?[]:"",!1));}}}break;case 6:null===b.stateNode?t$1("162"):void 0;b.stateNode.nodeValue=b.memoizedProps;break;case 3:break;case 12:break;case 13:c=b.memoizedState;a=b;null===c?d=!1:(d=!0,a=b.child,0===c.timedOutAt&&(c.timedOutAt=Qf()));if(null!==a)a:for(b=c=a;;){if(5===
b.tag)a=b.stateNode,d?a.style.display="none":(a=b.stateNode,f=b.memoizedProps.style,f=void 0!==f&&null!==f&&f.hasOwnProperty("display")?f.display:null,a.style.display=se("display",f));else if(6===b.tag)b.stateNode.nodeValue=d?"":b.memoizedProps;else if(13===b.tag&&null!==b.memoizedState){a=b.child.sibling;a.return=b;b=a;continue}else if(null!==b.child){b.child.return=b;b=b.child;continue}if(b===c)break a;for(;null===b.sibling;){if(null===b.return||b.return===c)break a;b=b.return;}b.sibling.return=
b.return;b=b.sibling;}break;case 17:break;default:t$1("163");}}function Pg(a,b,c){c=mf(c);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){Qg(d);Hg(a,b);};return c}
function Rg(a,b,c){c=mf(c);c.tag=3;var d=a.type.getDerivedStateFromError;if("function"===typeof d){var e=b.value;c.payload=function(){return d(e)};}var f=a.stateNode;null!==f&&"function"===typeof f.componentDidCatch&&(c.callback=function(){"function"!==typeof d&&(null===Sg?Sg=new Set([this]):Sg.add(this));var c=b.value,e=b.stack;Hg(a,b);this.componentDidCatch(c,{componentStack:null!==e?e:""});});return c}
function Tg(a){switch(a.tag){case 1:L$1(a.type)&&Me(a);var b=a.effectTag;return b&2048?(a.effectTag=b&-2049|64,a):null;case 3:return Jf(a),Ne(a),b=a.effectTag,0!==(b&64)?t$1("285"):void 0,a.effectTag=b&-2049|64,a;case 5:return Lf(a),null;case 13:return b=a.effectTag,b&2048?(a.effectTag=b&-2049|64,a):null;case 4:return Jf(a),null;case 10:return Bf(a),null;default:return null}}
var Ug={readContext:Df},Vg=Xb.ReactCurrentOwner,Wg=1073741822,Xg=0,Yg=!1,R$1=null,S$1=null,T$1=0,Zg=-1,$g=!1,U$1=null,ah=!1,Sg=null;function dh(){if(null!==R$1)for(var a=R$1.return;null!==a;){var b=a;switch(b.tag){case 1:var c=b.type.childContextTypes;null!==c&&void 0!==c&&Me(b);break;case 3:Jf(b);Ne(b);break;case 5:Lf(b);break;case 4:Jf(b);break;case 10:Bf(b);}a=a.return;}S$1=null;T$1=0;Zg=-1;$g=!1;R$1=null;}function eh(a){for(;;){var b=a.alternate,c=a.return,d=a.sibling;if(0===(a.effectTag&1024)){R$1=a;a:{var e=b;b=a;var f=T$1;var g=b.pendingProps;switch(b.tag){case 2:break;case 16:break;case 15:case 0:break;case 1:L$1(b.type)&&Me(b);break;case 3:Jf(b);Ne(b);g=b.stateNode;g.pendingContext&&(g.context=g.pendingContext,g.pendingContext=null);if(null===e||null===e.child)lg(b),b.effectTag&=-3;Bg(b);break;case 5:Lf(b);var h=Hf(Gf.current);f=b.type;if(null!==e&&null!=b.stateNode)Fg(e,b,f,g,h),e.ref!==b.ref&&(b.effectTag|=
128);else if(g){var k=Hf(N$1.current);if(lg(b)){g=b;e=g.stateNode;var l=g.type,m=g.memoizedProps,q=h;e[Ga]=g;e[Ha]=m;f=void 0;h=l;switch(h){case "iframe":case "object":G$1("load",e);break;case "video":case "audio":for(l=0;l<bb.length;l++)G$1(bb[l],e);break;case "source":G$1("error",e);break;case "img":case "image":case "link":G$1("error",e);G$1("load",e);break;case "form":G$1("reset",e);G$1("submit",e);break;case "details":G$1("toggle",e);break;case "input":Bc(e,m);G$1("invalid",e);xe(q,"onChange");break;case "select":e._wrapperState=
{wasMultiple:!!m.multiple};G$1("invalid",e);xe(q,"onChange");break;case "textarea":he(e,m),G$1("invalid",e),xe(q,"onChange");}ve(h,m);l=null;for(f in m)m.hasOwnProperty(f)&&(k=m[f],"children"===f?"string"===typeof k?e.textContent!==k&&(l=["children",k]):"number"===typeof k&&e.textContent!==""+k&&(l=["children",""+k]):sa.hasOwnProperty(f)&&null!=k&&xe(q,f));switch(h){case "input":Vb(e);Fc(e,m,!0);break;case "textarea":Vb(e);je(e,m);break;case "select":case "option":break;default:"function"===typeof m.onClick&&
(e.onclick=ye);}f=l;g.updateQueue=f;g=null!==f?!0:!1;g&&zg(b);}else{m=b;e=f;q=g;l=9===h.nodeType?h:h.ownerDocument;k===ke.html&&(k=le(e));k===ke.html?"script"===e?(e=l.createElement("div"),e.innerHTML="<script>\x3c/script>",l=e.removeChild(e.firstChild)):"string"===typeof q.is?l=l.createElement(e,{is:q.is}):(l=l.createElement(e),"select"===e&&q.multiple&&(l.multiple=!0)):l=l.createElementNS(k,e);e=l;e[Ga]=m;e[Ha]=g;Ag(e,b,!1,!1);q=e;l=f;m=g;var x=h,z=we(l,m);switch(l){case "iframe":case "object":G$1("load",
q);h=m;break;case "video":case "audio":for(h=0;h<bb.length;h++)G$1(bb[h],q);h=m;break;case "source":G$1("error",q);h=m;break;case "img":case "image":case "link":G$1("error",q);G$1("load",q);h=m;break;case "form":G$1("reset",q);G$1("submit",q);h=m;break;case "details":G$1("toggle",q);h=m;break;case "input":Bc(q,m);h=Ac(q,m);G$1("invalid",q);xe(x,"onChange");break;case "option":h=ee(q,m);break;case "select":q._wrapperState={wasMultiple:!!m.multiple};h=objectAssign({},m,{value:void 0});G$1("invalid",q);xe(x,"onChange");break;case "textarea":he(q,
m);h=ge(q,m);G$1("invalid",q);xe(x,"onChange");break;default:h=m;}ve(l,h);k=void 0;var B=l,Q=q,v=h;for(k in v)if(v.hasOwnProperty(k)){var r=v[k];"style"===k?te(Q,r):"dangerouslySetInnerHTML"===k?(r=r?r.__html:void 0,null!=r&&oe(Q,r)):"children"===k?"string"===typeof r?("textarea"!==B||""!==r)&&pe(Q,r):"number"===typeof r&&pe(Q,""+r):"suppressContentEditableWarning"!==k&&"suppressHydrationWarning"!==k&&"autoFocus"!==k&&(sa.hasOwnProperty(k)?null!=r&&xe(x,k):null!=r&&yc(Q,k,r,z));}switch(l){case "input":Vb(q);
Fc(q,m,!1);break;case "textarea":Vb(q);je(q,m);break;case "option":null!=m.value&&q.setAttribute("value",""+zc(m.value));break;case "select":h=q;h.multiple=!!m.multiple;q=m.value;null!=q?fe(h,!!m.multiple,q,!1):null!=m.defaultValue&&fe(h,!!m.multiple,m.defaultValue,!0);break;default:"function"===typeof h.onClick&&(q.onclick=ye);}(g=Be(f,g))&&zg(b);b.stateNode=e;}null!==b.ref&&(b.effectTag|=128);}else null===b.stateNode?t$1("166"):void 0;break;case 6:e&&null!=b.stateNode?Gg(e,b,e.memoizedProps,g):("string"!==
typeof g&&(null===b.stateNode?t$1("166"):void 0),e=Hf(Gf.current),Hf(N$1.current),lg(b)?(g=b,f=g.stateNode,e=g.memoizedProps,f[Ga]=g,(g=f.nodeValue!==e)&&zg(b)):(f=b,g=(9===e.nodeType?e:e.ownerDocument).createTextNode(g),g[Ga]=b,f.stateNode=g));break;case 11:break;case 13:g=b.memoizedState;if(0!==(b.effectTag&64)){b.expirationTime=f;R$1=b;break a}g=null!==g;f=null!==e&&null!==e.memoizedState;null!==e&&!g&&f&&(e=e.child.sibling,null!==e&&(h=b.firstEffect,null!==h?(b.firstEffect=e,e.nextEffect=h):(b.firstEffect=
b.lastEffect=e,e.nextEffect=null),e.effectTag=8));if(g!==f||0===(b.effectTag&1)&&g)b.effectTag|=4;break;case 7:break;case 8:break;case 12:break;case 4:Jf(b);Bg(b);break;case 10:Bf(b);break;case 9:break;case 14:break;case 17:L$1(b.type)&&Me(b);break;default:t$1("156");}R$1=null;}b=a;if(1===T$1||1!==b.childExpirationTime){g=0;for(f=b.child;null!==f;)e=f.expirationTime,h=f.childExpirationTime,e>g&&(g=e),h>g&&(g=h),f=f.sibling;b.childExpirationTime=g;}if(null!==R$1)return R$1;null!==c&&0===(c.effectTag&1024)&&(null===
c.firstEffect&&(c.firstEffect=a.firstEffect),null!==a.lastEffect&&(null!==c.lastEffect&&(c.lastEffect.nextEffect=a.firstEffect),c.lastEffect=a.lastEffect),1<a.effectTag&&(null!==c.lastEffect?c.lastEffect.nextEffect=a:c.firstEffect=a,c.lastEffect=a));}else{a=Tg(a,T$1);if(null!==a)return a.effectTag&=1023,a;null!==c&&(c.firstEffect=c.lastEffect=null,c.effectTag|=1024);}if(null!==d)return d;if(null!==c)a=c;else break}return null}
function fh(a){var b=yg(a.alternate,a,T$1);a.memoizedProps=a.pendingProps;null===b&&(b=eh(a));Vg.current=null;return b}
function gh(a,b){Yg?t$1("243"):void 0;Yg=!0;Vg.currentDispatcher=Ug;var c=a.nextExpirationTimeToWorkOn;if(c!==T$1||a!==S$1||null===R$1)dh(),S$1=a,T$1=c,R$1=Ze(S$1.current,null,T$1),a.pendingCommitExpirationTime=0;var d=!1;do{try{if(b)for(;null!==R$1&&!hh();)R$1=fh(R$1);else for(;null!==R$1;)R$1=fh(R$1);}catch(B){if(zf=yf=xf=null,null===R$1)d=!0,Qg(B);else{null===R$1?t$1("271"):void 0;var e=R$1,f=e.return;if(null===f)d=!0,Qg(B);else{a:{var g=a,h=f,k=e,l=B;f=T$1;k.effectTag|=1024;k.firstEffect=k.lastEffect=null;if(null!==l&&"object"===
typeof l&&"function"===typeof l.then){var m=l;l=h;var q=-1,x=-1;do{if(13===l.tag){var z=l.alternate;if(null!==z&&(z=z.memoizedState,null!==z)){x=10*(1073741822-z.timedOutAt);break}z=l.pendingProps.maxDuration;if("number"===typeof z)if(0>=z)q=0;else if(-1===q||z<q)q=z;}l=l.return;}while(null!==l);l=h;do{if(z=13===l.tag)z=void 0===l.memoizedProps.fallback?!1:null===l.memoizedState;if(z){h=ih.bind(null,g,l,k,0===(l.mode&1)?1073741823:f);m.then(h,h);if(0===(l.mode&1)){l.effectTag|=64;k.effectTag&=-1957;
1===k.tag&&null===k.alternate&&(k.tag=17);k.expirationTime=f;break a}-1===q?g=1073741823:(-1===x&&(x=10*(1073741822-hf(g,f))-5E3),g=x+q);0<=g&&Zg<g&&(Zg=g);l.effectTag|=2048;l.expirationTime=f;break a}l=l.return;}while(null!==l);l=Error((mc(k.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+nc(k));}$g=!0;l=vf(l,k);g=h;do{switch(g.tag){case 3:k=
l;g.effectTag|=2048;g.expirationTime=f;f=Pg(g,k,f);pf(g,f);break a;case 1:if(k=l,h=g.type,m=g.stateNode,0===(g.effectTag&64)&&("function"===typeof h.getDerivedStateFromError||null!==m&&"function"===typeof m.componentDidCatch&&(null===Sg||!Sg.has(m)))){g.effectTag|=2048;g.expirationTime=f;f=Rg(g,k,f);pf(g,f);break a}}g=g.return;}while(null!==g)}R$1=eh(e);continue}}}break}while(1);Yg=!1;zf=yf=xf=Vg.currentDispatcher=null;if(d)S$1=null,a.finishedWork=null;else if(null!==R$1)a.finishedWork=null;else{d=a.current.alternate;
null===d?t$1("281"):void 0;S$1=null;if($g){e=a.latestPendingTime;f=a.latestSuspendedTime;g=a.latestPingedTime;if(0!==e&&e<c||0!==f&&f<c||0!==g&&g<c){gf(a,c);jh(a,d,c,a.expirationTime,-1);return}if(!a.didError&&b){a.didError=!0;c=a.nextExpirationTimeToWorkOn=c;b=a.expirationTime=1073741823;jh(a,d,c,b,-1);return}}b&&-1!==Zg?(gf(a,c),b=10*(1073741822-hf(a,c)),b<Zg&&(Zg=b),b=10*(1073741822-Qf()),b=Zg-b,jh(a,d,c,a.expirationTime,0>b?0:b)):(a.pendingCommitExpirationTime=c,a.finishedWork=d);}}
function Jg(a,b){for(var c=a.return;null!==c;){switch(c.tag){case 1:var d=c.stateNode;if("function"===typeof c.type.getDerivedStateFromError||"function"===typeof d.componentDidCatch&&(null===Sg||!Sg.has(d))){a=vf(b,a);a=Rg(c,a,1073741823);of(c,a);Tf(c,1073741823);return}break;case 3:a=vf(b,a);a=Pg(c,a,1073741823);of(c,a);Tf(c,1073741823);return}c=c.return;}3===a.tag&&(c=vf(b,a),c=Pg(a,c,1073741823),of(a,c),Tf(a,1073741823));}
function Rf(a,b){0!==Xg?a=Xg:Yg?a=ah?1073741823:T$1:b.mode&1?(a=kh?1073741822-10*(((1073741822-a+15)/10|0)+1):1073741822-25*(((1073741822-a+500)/25|0)+1),null!==S$1&&a===T$1&&--a):a=1073741823;kh&&(0===lh||a<lh)&&(lh=a);return a}
function ih(a,b,c,d){var e=a.earliestSuspendedTime;var f=a.latestSuspendedTime;if(0!==e&&d<=e&&d>=f){f=e=d;a.didError=!1;var g=a.latestPingedTime;if(0===g||g>f)a.latestPingedTime=f;ff(f,a);}else e=Qf(),e=Rf(e,b),ef(a,e);0!==(b.mode&1)&&a===S$1&&T$1===d&&(S$1=null);mh(b,e);0===(b.mode&1)&&(mh(c,e),1===c.tag&&null!==c.stateNode&&(b=mf(e),b.tag=2,of(c,b)));c=a.expirationTime;0!==c&&nh(a,c);}
function mh(a,b){a.expirationTime<b&&(a.expirationTime=b);var c=a.alternate;null!==c&&c.expirationTime<b&&(c.expirationTime=b);var d=a.return,e=null;if(null===d&&3===a.tag)e=a.stateNode;else for(;null!==d;){c=d.alternate;d.childExpirationTime<b&&(d.childExpirationTime=b);null!==c&&c.childExpirationTime<b&&(c.childExpirationTime=b);if(null===d.return&&3===d.tag){e=d.stateNode;break}d=d.return;}return e}
function Tf(a,b){a=mh(a,b);null!==a&&(!Yg&&0!==T$1&&b>T$1&&dh(),ef(a,b),Yg&&!ah&&S$1===a||nh(a,a.expirationTime),oh>ph&&(oh=0,t$1("185")));}function qh(a,b,c,d,e){var f=Xg;Xg=1073741823;try{return a(b,c,d,e)}finally{Xg=f;}}var rh=null,V$1=null,sh=0,th=void 0,W$1=!1,uh=null,X$1=0,lh=0,vh=!1,wh=null,Z$1=!1,xh=!1,kh=!1,yh=null,zh=scheduler.unstable_now(),Ah=1073741822-(zh/10|0),Bh=Ah,ph=50,oh=0,Ch=null;function Dh(){Ah=1073741822-((scheduler.unstable_now()-zh)/10|0);}
function Eh(a,b){if(0!==sh){if(b<sh)return;null!==th&&scheduler.unstable_cancelCallback(th);}sh=b;a=scheduler.unstable_now()-zh;th=scheduler.unstable_scheduleCallback(Fh,{timeout:10*(1073741822-b)-a});}function jh(a,b,c,d,e){a.expirationTime=d;0!==e||hh()?0<e&&(a.timeoutHandle=De(Gh.bind(null,a,b,c),e)):(a.pendingCommitExpirationTime=c,a.finishedWork=b);}function Gh(a,b,c){a.pendingCommitExpirationTime=c;a.finishedWork=b;Dh();Bh=Ah;Hh(a,c);}function Qf(){if(W$1)return Bh;Ih();if(0===X$1||1===X$1)Dh(),Bh=Ah;return Bh}
function nh(a,b){null===a.nextScheduledRoot?(a.expirationTime=b,null===V$1?(rh=V$1=a,a.nextScheduledRoot=a):(V$1=V$1.nextScheduledRoot=a,V$1.nextScheduledRoot=rh)):b>a.expirationTime&&(a.expirationTime=b);W$1||(Z$1?xh&&(uh=a,X$1=1073741823,Jh(a,1073741823,!1)):1073741823===b?Kh(1073741823,!1):Eh(a,b));}
function Ih(){var a=0,b=null;if(null!==V$1)for(var c=V$1,d=rh;null!==d;){var e=d.expirationTime;if(0===e){null===c||null===V$1?t$1("244"):void 0;if(d===d.nextScheduledRoot){rh=V$1=d.nextScheduledRoot=null;break}else if(d===rh)rh=e=d.nextScheduledRoot,V$1.nextScheduledRoot=e,d.nextScheduledRoot=null;else if(d===V$1){V$1=c;V$1.nextScheduledRoot=rh;d.nextScheduledRoot=null;break}else c.nextScheduledRoot=d.nextScheduledRoot,d.nextScheduledRoot=null;d=c.nextScheduledRoot;}else{e>a&&(a=e,b=d);if(d===V$1)break;if(1073741823===
a)break;c=d;d=d.nextScheduledRoot;}}uh=b;X$1=a;}var Lh=!1;function hh(){return Lh?!0:scheduler.unstable_shouldYield()?Lh=!0:!1}function Fh(){try{if(!hh()&&null!==rh){Dh();var a=rh;do{var b=a.expirationTime;0!==b&&Ah<=b&&(a.nextExpirationTimeToWorkOn=Ah);a=a.nextScheduledRoot;}while(a!==rh)}Kh(0,!0);}finally{Lh=!1;}}
function Kh(a,b){Ih();if(b)for(Dh(),Bh=Ah;null!==uh&&0!==X$1&&a<=X$1&&!(Lh&&Ah>X$1);)Jh(uh,X$1,Ah>X$1),Ih(),Dh(),Bh=Ah;else for(;null!==uh&&0!==X$1&&a<=X$1;)Jh(uh,X$1,!1),Ih();b&&(sh=0,th=null);0!==X$1&&Eh(uh,X$1);oh=0;Ch=null;if(null!==yh)for(a=yh,yh=null,b=0;b<a.length;b++){var c=a[b];try{c._onComplete();}catch(d){vh||(vh=!0,wh=d);}}if(vh)throw a=wh,wh=null,vh=!1,a;}function Hh(a,b){W$1?t$1("253"):void 0;uh=a;X$1=b;Jh(a,b,!1);Kh(1073741823,!1);}
function Jh(a,b,c){W$1?t$1("245"):void 0;W$1=!0;if(c){var d=a.finishedWork;null!==d?Mh(a,d,b):(a.finishedWork=null,d=a.timeoutHandle,-1!==d&&(a.timeoutHandle=-1,Ee(d)),gh(a,c),d=a.finishedWork,null!==d&&(hh()?a.finishedWork=d:Mh(a,d,b)));}else d=a.finishedWork,null!==d?Mh(a,d,b):(a.finishedWork=null,d=a.timeoutHandle,-1!==d&&(a.timeoutHandle=-1,Ee(d)),gh(a,c),d=a.finishedWork,null!==d&&Mh(a,d,b));W$1=!1;}
function Mh(a,b,c){var d=a.firstBatch;if(null!==d&&d._expirationTime>=c&&(null===yh?yh=[d]:yh.push(d),d._defer)){a.finishedWork=b;a.expirationTime=0;return}a.finishedWork=null;a===Ch?oh++:(Ch=a,oh=0);ah=Yg=!0;a.current===b?t$1("177"):void 0;c=a.pendingCommitExpirationTime;0===c?t$1("261"):void 0;a.pendingCommitExpirationTime=0;d=b.expirationTime;var e=b.childExpirationTime;d=e>d?e:d;a.didError=!1;0===d?(a.earliestPendingTime=0,a.latestPendingTime=0,a.earliestSuspendedTime=0,a.latestSuspendedTime=0,a.latestPingedTime=
0):(e=a.latestPendingTime,0!==e&&(e>d?a.earliestPendingTime=a.latestPendingTime=0:a.earliestPendingTime>d&&(a.earliestPendingTime=a.latestPendingTime)),e=a.earliestSuspendedTime,0===e?ef(a,d):d<a.latestSuspendedTime?(a.earliestSuspendedTime=0,a.latestSuspendedTime=0,a.latestPingedTime=0,ef(a,d)):d>e&&ef(a,d));ff(0,a);Vg.current=null;1<b.effectTag?null!==b.lastEffect?(b.lastEffect.nextEffect=b,d=b.firstEffect):d=b:d=b.firstEffect;ze=Hd;e=Td();if(Ud(e)){if("selectionStart"in e)var f={start:e.selectionStart,
end:e.selectionEnd};else a:{f=(f=e.ownerDocument)&&f.defaultView||window;var g=f.getSelection&&f.getSelection();if(g&&0!==g.rangeCount){f=g.anchorNode;var h=g.anchorOffset,k=g.focusNode;g=g.focusOffset;try{f.nodeType,k.nodeType;}catch(db){f=null;break a}var l=0,m=-1,q=-1,x=0,z=0,B=e,Q=null;b:for(;;){for(var v;;){B!==f||0!==h&&3!==B.nodeType||(m=l+h);B!==k||0!==g&&3!==B.nodeType||(q=l+g);3===B.nodeType&&(l+=B.nodeValue.length);if(null===(v=B.firstChild))break;Q=B;B=v;}for(;;){if(B===e)break b;Q===f&&
++x===h&&(m=l);Q===k&&++z===g&&(q=l);if(null!==(v=B.nextSibling))break;B=Q;Q=B.parentNode;}B=v;}f=-1===m||-1===q?null:{start:m,end:q};}else f=null;}f=f||{start:0,end:0};}else f=null;Ae={focusedElem:e,selectionRange:f};Hd=!1;for(U$1=d;null!==U$1;){e=!1;f=void 0;try{for(;null!==U$1;){if(U$1.effectTag&256)a:{var r=U$1.alternate;h=U$1;switch(h.tag){case 0:case 11:case 15:break a;case 1:if(h.effectTag&256&&null!==r){var u=r.memoizedProps,y=r.memoizedState,Y=h.stateNode,Th=Y.getSnapshotBeforeUpdate(h.elementType===h.type?
u:O$1(h.type,u),y);Y.__reactInternalSnapshotBeforeUpdate=Th;}break a;case 3:case 5:case 6:case 4:case 17:break a;default:t$1("163");}}U$1=U$1.nextEffect;}}catch(db){e=!0,f=db;}e&&(null===U$1?t$1("178"):void 0,Jg(U$1,f),null!==U$1&&(U$1=U$1.nextEffect));}for(U$1=d;null!==U$1;){r=!1;u=void 0;try{for(;null!==U$1;){var w=U$1.effectTag;w&16&&pe(U$1.stateNode,"");if(w&128){var C=U$1.alternate;if(null!==C){var p=C.ref;null!==p&&("function"===typeof p?p(null):p.current=null);}}switch(w&14){case 2:Ng(U$1);U$1.effectTag&=-3;break;case 6:Ng(U$1);U$1.effectTag&=
-3;Og(U$1.alternate,U$1);break;case 4:Og(U$1.alternate,U$1);break;case 8:y=U$1,Lg(y),y.return=null,y.child=null,y.alternate&&(y.alternate.child=null,y.alternate.return=null);}U$1=U$1.nextEffect;}}catch(db){r=!0,u=db;}r&&(null===U$1?t$1("178"):void 0,Jg(U$1,u),null!==U$1&&(U$1=U$1.nextEffect));}p=Ae;C=Td();w=p.focusedElem;u=p.selectionRange;if(C!==w&&w&&w.ownerDocument&&Sd(w.ownerDocument.documentElement,w)){null!==u&&Ud(w)&&(C=u.start,p=u.end,void 0===p&&(p=C),"selectionStart"in w?(w.selectionStart=C,w.selectionEnd=Math.min(p,
w.value.length)):(p=(C=w.ownerDocument||document)&&C.defaultView||window,p.getSelection&&(p=p.getSelection(),y=w.textContent.length,r=Math.min(u.start,y),u=void 0===u.end?r:Math.min(u.end,y),!p.extend&&r>u&&(y=u,u=r,r=y),y=Rd(w,r),Y=Rd(w,u),y&&Y&&(1!==p.rangeCount||p.anchorNode!==y.node||p.anchorOffset!==y.offset||p.focusNode!==Y.node||p.focusOffset!==Y.offset)&&(C=C.createRange(),C.setStart(y.node,y.offset),p.removeAllRanges(),r>u?(p.addRange(C),p.extend(Y.node,Y.offset)):(C.setEnd(Y.node,Y.offset),
p.addRange(C))))));C=[];for(p=w;p=p.parentNode;)1===p.nodeType&&C.push({element:p,left:p.scrollLeft,top:p.scrollTop});"function"===typeof w.focus&&w.focus();for(w=0;w<C.length;w++)p=C[w],p.element.scrollLeft=p.left,p.element.scrollTop=p.top;}Ae=null;Hd=!!ze;ze=null;a.current=b;for(U$1=d;null!==U$1;){d=!1;w=void 0;try{for(C=c;null!==U$1;){var Fb=U$1.effectTag;if(Fb&36){var Gb=U$1.alternate;p=U$1;r=C;switch(p.tag){case 0:case 11:case 15:break;case 1:var wc=p.stateNode;if(p.effectTag&4)if(null===Gb)wc.componentDidMount();
else{var ci=p.elementType===p.type?Gb.memoizedProps:O$1(p.type,Gb.memoizedProps);wc.componentDidUpdate(ci,Gb.memoizedState,wc.__reactInternalSnapshotBeforeUpdate);}var Cg=p.updateQueue;null!==Cg&&tf(p,Cg,wc,r);break;case 3:var Dg=p.updateQueue;if(null!==Dg){u=null;if(null!==p.child)switch(p.child.tag){case 5:u=p.child.stateNode;break;case 1:u=p.child.stateNode;}tf(p,Dg,u,r);}break;case 5:var di=p.stateNode;null===Gb&&p.effectTag&4&&Be(p.type,p.memoizedProps)&&di.focus();break;case 6:break;case 4:break;
case 12:break;case 13:break;case 17:break;default:t$1("163");}}if(Fb&128){var Ic=U$1.ref;if(null!==Ic){var Eg=U$1.stateNode;switch(U$1.tag){case 5:var ce=Eg;break;default:ce=Eg;}"function"===typeof Ic?Ic(ce):Ic.current=ce;}}U$1=U$1.nextEffect;}}catch(db){d=!0,w=db;}d&&(null===U$1?t$1("178"):void 0,Jg(U$1,w),null!==U$1&&(U$1=U$1.nextEffect));}Yg=ah=!1;"function"===typeof Se&&Se(b.stateNode);Fb=b.expirationTime;b=b.childExpirationTime;b=b>Fb?b:Fb;0===b&&(Sg=null);a.expirationTime=b;a.finishedWork=null;}
function Qg(a){null===uh?t$1("246"):void 0;uh.expirationTime=0;vh||(vh=!0,wh=a);}function Nh(a,b){var c=Z$1;Z$1=!0;try{return a(b)}finally{(Z$1=c)||W$1||Kh(1073741823,!1);}}function Oh(a,b){if(Z$1&&!xh){xh=!0;try{return a(b)}finally{xh=!1;}}return a(b)}function Ph(a,b,c){if(kh)return a(b,c);Z$1||W$1||0===lh||(Kh(lh,!1),lh=0);var d=kh,e=Z$1;Z$1=kh=!0;try{return a(b,c)}finally{kh=d,(Z$1=e)||W$1||Kh(1073741823,!1);}}
function Qh(a,b,c,d,e){var f=b.current;a:if(c){c=c._reactInternalFiber;b:{2===kd(c)&&1===c.tag?void 0:t$1("170");var g=c;do{switch(g.tag){case 3:g=g.stateNode.context;break b;case 1:if(L$1(g.type)){g=g.stateNode.__reactInternalMemoizedMergedChildContext;break b}}g=g.return;}while(null!==g);t$1("171");g=void 0;}if(1===c.tag){var h=c.type;if(L$1(h)){c=Pe(c,h,g);break a}}c=g;}else c=Je;null===b.context?b.context=c:b.pendingContext=c;b=e;e=mf(d);e.payload={element:a};b=void 0===b?null:b;null!==b&&(e.callback=b);
of(f,e);Tf(f,d);return d}function Rh(a,b,c,d){var e=b.current,f=Qf();e=Rf(f,e);return Qh(a,b,c,e,d)}function Sh(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return a.child.stateNode;default:return a.child.stateNode}}function Uh(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return {$$typeof:$b,key:null==d?null:""+d,children:a,containerInfo:b,implementation:c}}
Cb=function(a,b,c){switch(b){case "input":Dc(a,c);b=c.name;if("radio"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;c=c.querySelectorAll("input[name="+JSON.stringify(""+b)+'][type="radio"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=La(d);e?void 0:t$1("90");Wb(d);Dc(d,e);}}}break;case "textarea":ie(a,c);break;case "select":b=c.value,null!=b&&fe(a,!!c.multiple,b,!1);}};
function Vh(a){var b=1073741822-25*(((1073741822-Qf()+500)/25|0)+1);b>=Wg&&(b=Wg-1);this._expirationTime=Wg=b;this._root=a;this._callbacks=this._next=null;this._hasChildren=this._didComplete=!1;this._children=null;this._defer=!0;}Vh.prototype.render=function(a){this._defer?void 0:t$1("250");this._hasChildren=!0;this._children=a;var b=this._root._internalRoot,c=this._expirationTime,d=new Wh;Qh(a,b,null,c,d._onCommit);return d};
Vh.prototype.then=function(a){if(this._didComplete)a();else{var b=this._callbacks;null===b&&(b=this._callbacks=[]);b.push(a);}};
Vh.prototype.commit=function(){var a=this._root._internalRoot,b=a.firstBatch;this._defer&&null!==b?void 0:t$1("251");if(this._hasChildren){var c=this._expirationTime;if(b!==this){this._hasChildren&&(c=this._expirationTime=b._expirationTime,this.render(this._children));for(var d=null,e=b;e!==this;)d=e,e=e._next;null===d?t$1("251"):void 0;d._next=e._next;this._next=b;a.firstBatch=this;}this._defer=!1;Hh(a,c);b=this._next;this._next=null;b=a.firstBatch=b;null!==b&&b._hasChildren&&b.render(b._children);}else this._next=
null,this._defer=!1;};Vh.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var a=this._callbacks;if(null!==a)for(var b=0;b<a.length;b++)(0, a[b])();}};function Wh(){this._callbacks=null;this._didCommit=!1;this._onCommit=this._onCommit.bind(this);}Wh.prototype.then=function(a){if(this._didCommit)a();else{var b=this._callbacks;null===b&&(b=this._callbacks=[]);b.push(a);}};
Wh.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var a=this._callbacks;if(null!==a)for(var b=0;b<a.length;b++){var c=a[b];"function"!==typeof c?t$1("191",c):void 0;c();}}};
function Xh(a,b,c){b=M$1(3,null,null,b?3:0);a={current:b,containerInfo:a,pendingChildren:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,didError:!1,pendingCommitExpirationTime:0,finishedWork:null,timeoutHandle:-1,context:null,pendingContext:null,hydrate:c,nextExpirationTimeToWorkOn:0,expirationTime:0,firstBatch:null,nextScheduledRoot:null};this._internalRoot=b.stateNode=a;}
Xh.prototype.render=function(a,b){var c=this._internalRoot,d=new Wh;b=void 0===b?null:b;null!==b&&d.then(b);Rh(a,c,null,d._onCommit);return d};Xh.prototype.unmount=function(a){var b=this._internalRoot,c=new Wh;a=void 0===a?null:a;null!==a&&c.then(a);Rh(null,b,null,c._onCommit);return c};Xh.prototype.legacy_renderSubtreeIntoContainer=function(a,b,c){var d=this._internalRoot,e=new Wh;c=void 0===c?null:c;null!==c&&e.then(c);Rh(b,d,a,e._onCommit);return e};
Xh.prototype.createBatch=function(){var a=new Vh(this),b=a._expirationTime,c=this._internalRoot,d=c.firstBatch;if(null===d)c.firstBatch=a,a._next=null;else{for(c=null;null!==d&&d._expirationTime>=b;)c=d,d=d._next;a._next=d;null!==c&&(c._next=a);}return a};function Yh(a){return !(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||" react-mount-point-unstable "!==a.nodeValue))}Kb=Nh;Lb=Ph;Mb=function(){W$1||0===lh||(Kh(lh,!1),lh=0);};
function Zh(a,b){b||(b=a?9===a.nodeType?a.documentElement:a.firstChild:null,b=!(!b||1!==b.nodeType||!b.hasAttribute("data-reactroot")));if(!b)for(var c;c=a.lastChild;)a.removeChild(c);return new Xh(a,!1,b)}
function $h(a,b,c,d,e){Yh(c)?void 0:t$1("200");var f=c._reactRootContainer;if(f){if("function"===typeof e){var g=e;e=function(){var a=Sh(f._internalRoot);g.call(a);};}null!=a?f.legacy_renderSubtreeIntoContainer(a,b,e):f.render(b,e);}else{f=c._reactRootContainer=Zh(c,d);if("function"===typeof e){var h=e;e=function(){var a=Sh(f._internalRoot);h.call(a);};}Oh(function(){null!=a?f.legacy_renderSubtreeIntoContainer(a,b,e):f.render(b,e);});}return Sh(f._internalRoot)}
function ai(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;Yh(b)?void 0:t$1("200");return Uh(a,b,null,c)}
var bi={createPortal:ai,findDOMNode:function(a){if(null==a)return null;if(1===a.nodeType)return a;var b=a._reactInternalFiber;void 0===b&&("function"===typeof a.render?t$1("188"):t$1("268",Object.keys(a)));a=nd(b);a=null===a?null:a.stateNode;return a},hydrate:function(a,b,c){return $h(null,a,b,!0,c)},render:function(a,b,c){return $h(null,a,b,!1,c)},unstable_renderSubtreeIntoContainer:function(a,b,c,d){null==a||void 0===a._reactInternalFiber?t$1("38"):void 0;return $h(a,b,c,!1,d)},unmountComponentAtNode:function(a){Yh(a)?
void 0:t$1("40");return a._reactRootContainer?(Oh(function(){$h(null,null,a,!1,function(){a._reactRootContainer=null;});}),!0):!1},unstable_createPortal:function(){return ai.apply(void 0,arguments)},unstable_batchedUpdates:Nh,unstable_interactiveUpdates:Ph,flushSync:function(a,b){W$1?t$1("187"):void 0;var c=Z$1;Z$1=!0;try{return qh(a,b)}finally{Z$1=c,Kh(1073741823,!1);}},unstable_flushControlled:function(a){var b=Z$1;Z$1=!0;try{qh(a);}finally{(Z$1=b)||W$1||Kh(1073741823,!1);}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[Ja,
Ka,La,Ca.injectEventPluginsByName,qa,Ra,function(a){za(a,Qa);},Ib,Jb,Jd,Ea]},unstable_createRoot:function(a,b){Yh(a)?void 0:t$1("299","unstable_createRoot");return new Xh(a,!0,null!=b&&!0===b.hydrate)}};(function(a){var b=a.findFiberByHostInstance;return Ve(objectAssign({},a,{findHostInstanceByFiber:function(a){a=nd(a);return null===a?null:a.stateNode},findFiberByHostInstance:function(a){return b?b(a):null}}))})({findFiberByHostInstance:Ia,bundleType:0,version:"16.6.3",rendererPackageName:"react-dom"});
var ei={default:bi},fi=ei&&bi||ei;var reactDom_production_min=fi.default||fi;

var schedulerTracing_production_min = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports,"__esModule",{value:!0});var b=0;exports.__interactionsRef=null;exports.__subscriberRef=null;exports.unstable_clear=function(a){return a()};exports.unstable_getCurrent=function(){return null};exports.unstable_getThreadID=function(){return ++b};exports.unstable_trace=function(a,d,c){return c()};exports.unstable_wrap=function(a){return a};exports.unstable_subscribe=function(){};exports.unstable_unsubscribe=function(){};
});

unwrapExports(schedulerTracing_production_min);
var schedulerTracing_production_min_1 = schedulerTracing_production_min.__interactionsRef;
var schedulerTracing_production_min_2 = schedulerTracing_production_min.__subscriberRef;
var schedulerTracing_production_min_3 = schedulerTracing_production_min.unstable_clear;
var schedulerTracing_production_min_4 = schedulerTracing_production_min.unstable_getCurrent;
var schedulerTracing_production_min_5 = schedulerTracing_production_min.unstable_getThreadID;
var schedulerTracing_production_min_6 = schedulerTracing_production_min.unstable_trace;
var schedulerTracing_production_min_7 = schedulerTracing_production_min.unstable_wrap;
var schedulerTracing_production_min_8 = schedulerTracing_production_min.unstable_subscribe;
var schedulerTracing_production_min_9 = schedulerTracing_production_min.unstable_unsubscribe;

var schedulerTracing_development = createCommonjsModule(function (module, exports) {
});

unwrapExports(schedulerTracing_development);
var schedulerTracing_development_1 = schedulerTracing_development.__interactionsRef;
var schedulerTracing_development_2 = schedulerTracing_development.__subscriberRef;
var schedulerTracing_development_3 = schedulerTracing_development.unstable_clear;
var schedulerTracing_development_4 = schedulerTracing_development.unstable_getCurrent;
var schedulerTracing_development_5 = schedulerTracing_development.unstable_getThreadID;
var schedulerTracing_development_6 = schedulerTracing_development.unstable_trace;
var schedulerTracing_development_7 = schedulerTracing_development.unstable_wrap;
var schedulerTracing_development_8 = schedulerTracing_development.unstable_subscribe;
var schedulerTracing_development_9 = schedulerTracing_development.unstable_unsubscribe;

var tracing = createCommonjsModule(function (module) {

{
  module.exports = schedulerTracing_production_min;
}
});

var reactDom_development = createCommonjsModule(function (module) {
});

var reactDom = createCommonjsModule(function (module) {

function checkDCE() {
  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
  if (
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'
  ) {
    return;
  }
  try {
    // Verify that the code above has been dead code eliminated (DCE'd).
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    // DevTools shouldn't crash React, no matter what.
    // We should still report in case we break this code.
    console.error(err);
  }
}

{
  // DCE check should happen before ReactDOM bundle executes so that
  // DevTools can report bad minification during injection.
  checkDCE();
  module.exports = reactDom_production_min;
}
});
var reactDom_1 = reactDom.ReactDOM;

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var classCallCheck = _classCallCheck;

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var createClass = _createClass;

var _typeof_1 = createCommonjsModule(function (module) {
function _typeof2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}

module.exports = _typeof;
});

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

var assertThisInitialized = _assertThisInitialized;

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof_1(call) === "object" || typeof call === "function")) {
    return call;
  }

  return assertThisInitialized(self);
}

var possibleConstructorReturn = _possibleConstructorReturn;

var getPrototypeOf = createCommonjsModule(function (module) {
function _getPrototypeOf(o) {
  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

module.exports = _getPrototypeOf;
});

var setPrototypeOf = createCommonjsModule(function (module) {
function _setPrototypeOf(o, p) {
  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

module.exports = _setPrototypeOf;
});

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) setPrototypeOf(subClass, superClass);
}

var inherits = _inherits;

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var defineProperty = _defineProperty;

var common = {
  black: '#000',
  white: '#fff' };

var red = {
  50: '#ffebee',
  100: '#ffcdd2',
  200: '#ef9a9a',
  300: '#e57373',
  400: '#ef5350',
  500: '#f44336',
  600: '#e53935',
  700: '#d32f2f',
  800: '#c62828',
  900: '#b71c1c',
  A100: '#ff8a80',
  A200: '#ff5252',
  A400: '#ff1744',
  A700: '#d50000' };

var pink = {
  50: '#fce4ec',
  100: '#f8bbd0',
  200: '#f48fb1',
  300: '#f06292',
  400: '#ec407a',
  500: '#e91e63',
  600: '#d81b60',
  700: '#c2185b',
  800: '#ad1457',
  900: '#880e4f',
  A100: '#ff80ab',
  A200: '#ff4081',
  A400: '#f50057',
  A700: '#c51162' };

var indigo = {
  50: '#e8eaf6',
  100: '#c5cae9',
  200: '#9fa8da',
  300: '#7986cb',
  400: '#5c6bc0',
  500: '#3f51b5',
  600: '#3949ab',
  700: '#303f9f',
  800: '#283593',
  900: '#1a237e',
  A100: '#8c9eff',
  A200: '#536dfe',
  A400: '#3d5afe',
  A700: '#304ffe' };

var grey = {
  50: '#fafafa',
  100: '#f5f5f5',
  200: '#eeeeee',
  300: '#e0e0e0',
  400: '#bdbdbd',
  500: '#9e9e9e',
  600: '#757575',
  700: '#616161',
  800: '#424242',
  900: '#212121',
  A100: '#d5d5d5',
  A200: '#aaaaaa',
  A400: '#303030',
  A700: '#616161' };

var warning = function() {};

var warning_1 = warning;

var escapeRegex = /([[\].#*$><+~=|^:(),"'`\s])/g;

function safePrefix(classNamePrefix) {
  var prefix = String(classNamePrefix);
  warning_1(prefix.length < 256, "Material-UI: the class name prefix is too long: ".concat(prefix, "."));
  // Sanitize the string as will be used to prefix the generated class name.
  return prefix.replace(escapeRegex, '-');
}

// Returns a function which generates unique class names based on counters.
// When new generator function is created, rule counter is reset.
// We need to reset the rule counter for SSR for each request.
//
// It's inspired by
// https://github.com/cssinjs/jss/blob/4e6a05dd3f7b6572fdd3ab216861d9e446c20331/src/utils/createGenerateClassName.js
function createGenerateClassName() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};var _options$dangerouslyU =
  options.dangerouslyUseGlobalCSS,dangerouslyUseGlobalCSS = _options$dangerouslyU === void 0 ? false : _options$dangerouslyU,_options$productionPr = options.productionPrefix,productionPrefix = _options$productionPr === void 0 ? 'jss' : _options$productionPr,_options$seed = options.seed,seed = _options$seed === void 0 ? '' : _options$seed;
  var ruleCounter = 0;

  return function (rule, styleSheet) {
    ruleCounter += 1;
    warning_1(
    ruleCounter < 1e10,
    [
    'Material-UI: you might have a memory leak.',
    'The ruleCounter is not supposed to grow that much.'].
    join(''));


    if (dangerouslyUseGlobalCSS && styleSheet && styleSheet.options.name) {
      return "".concat(safePrefix(styleSheet.options.name), "-").concat(rule.key);
    }

    {
      return "".concat(productionPrefix).concat(seed).concat(ruleCounter);
    }

    // Help with debuggability.
    if (styleSheet && styleSheet.options.classNamePrefix) {
      return "".concat(safePrefix(styleSheet.options.classNamePrefix), "-").concat(rule.key, "-").concat(seed).concat(ruleCounter);
    }

    return "".concat(rule.key, "-").concat(seed).concat(ruleCounter);
  };
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      defineProperty(target, key, source[key]);
    });
  }

  return target;
}

var objectSpread = _objectSpread;

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var objectWithoutPropertiesLoose = _objectWithoutPropertiesLoose;

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = objectWithoutPropertiesLoose(source, excluded);
  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

var objectWithoutProperties = _objectWithoutProperties;

var isMergeableObject = function isMergeableObject(value) {
	return isNonNullObject(value)
		&& !isSpecial(value)
};

function isNonNullObject(value) {
	return !!value && typeof value === 'object'
}

function isSpecial(value) {
	var stringValue = Object.prototype.toString.call(value);

	return stringValue === '[object RegExp]'
		|| stringValue === '[object Date]'
		|| isReactElement(value)
}

// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;

function isReactElement(value) {
	return value.$$typeof === REACT_ELEMENT_TYPE
}

function emptyTarget(val) {
	return Array.isArray(val) ? [] : {}
}

function cloneUnlessOtherwiseSpecified(value, options) {
	return (options.clone !== false && options.isMergeableObject(value))
		? deepmerge(emptyTarget(value), value, options)
		: value
}

function defaultArrayMerge(target, source, options) {
	return target.concat(source).map(function(element) {
		return cloneUnlessOtherwiseSpecified(element, options)
	})
}

function mergeObject(target, source, options) {
	var destination = {};
	if (options.isMergeableObject(target)) {
		Object.keys(target).forEach(function(key) {
			destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
		});
	}
	Object.keys(source).forEach(function(key) {
		if (!options.isMergeableObject(source[key]) || !target[key]) {
			destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
		} else {
			destination[key] = deepmerge(target[key], source[key], options);
		}
	});
	return destination
}

function deepmerge(target, source, options) {
	options = options || {};
	options.arrayMerge = options.arrayMerge || defaultArrayMerge;
	options.isMergeableObject = options.isMergeableObject || isMergeableObject;

	var sourceIsArray = Array.isArray(source);
	var targetIsArray = Array.isArray(target);
	var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;

	if (!sourceAndTargetTypesMatch) {
		return cloneUnlessOtherwiseSpecified(source, options)
	} else if (sourceIsArray) {
		return options.arrayMerge(target, source, options)
	} else {
		return mergeObject(target, source, options)
	}
}

deepmerge.all = function deepmergeAll(array, options) {
	if (!Array.isArray(array)) {
		throw new Error('first argument should be an array')
	}

	return array.reduce(function(prev, next) {
		return deepmerge(prev, next, options)
	}, {})
};

var deepmerge_1 = deepmerge;

/*!
 * isobject <https://github.com/jonschlinkert/isobject>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */

var isobject = function isObject(val) {
  return val != null && typeof val === 'object' && Array.isArray(val) === false;
};

function isObjectObject(o) {
  return isobject(o) === true
    && Object.prototype.toString.call(o) === '[object Object]';
}

var isPlainObject = function isPlainObject(o) {
  var ctor,prot;

  if (isObjectObject(o) === false) return false;

  // If has modified constructor
  ctor = o.constructor;
  if (typeof ctor !== 'function') return false;

  // If has modified prototype
  prot = ctor.prototype;
  if (isObjectObject(prot) === false) return false;

  // If constructor does not have an Object-specific method
  if (prot.hasOwnProperty('isPrototypeOf') === false) {
    return false;
  }

  // Most likely a plain Object
  return true;
};

// It can't be configured as it's used statically for propTypes.
var keys = ['xs', 'sm', 'md', 'lg', 'xl'];

// Keep in mind that @media is inclusive by the CSS specification.
function createBreakpoints(breakpoints) {var _breakpoints$values =













  breakpoints.values,values = _breakpoints$values === void 0 ? { xs: 0, sm: 600, md: 960, lg: 1280, xl: 1920 } : _breakpoints$values,_breakpoints$unit = breakpoints.unit,unit = _breakpoints$unit === void 0 ? 'px' : _breakpoints$unit,_breakpoints$step = breakpoints.step,step = _breakpoints$step === void 0 ? 5 : _breakpoints$step,other = objectWithoutProperties(breakpoints, ["values", "unit", "step"]);

  function up(key) {
    var value = typeof values[key] === 'number' ? values[key] : key;
    return "@media (min-width:".concat(value).concat(unit, ")");
  }

  function down(key) {
    var endIndex = keys.indexOf(key) + 1;
    var upperbound = values[keys[endIndex]];

    if (endIndex === keys.length) {
      // xl down applies to all sizes
      return up('xs');
    }

    var value = typeof upperbound === 'number' && endIndex > 0 ? upperbound : key;
    return "@media (max-width:".concat(value - step / 100).concat(unit, ")");
  }

  function between(start, end) {
    var endIndex = keys.indexOf(end) + 1;

    if (endIndex === keys.length) {
      return up(start);
    }

    return (
      "@media (min-width:".concat(values[start]).concat(unit, ") and ") + "(max-width:".concat(
      values[keys[endIndex]] - step / 100).concat(unit, ")"));

  }

  function only(key) {
    return between(key, key);
  }

  function width(key) {
    return values[key];
  }

  return objectSpread({
    keys: keys,
    values: values,
    up: up,
    down: down,
    between: between,
    only: only,
    width: width },
  other);

}

function createMixins(breakpoints, spacing, mixins) {var _toolbar;
  return objectSpread({
    gutters: function gutters() {var styles = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return objectSpread({
        paddingLeft: spacing.unit * 2,
        paddingRight: spacing.unit * 2 },
      styles, defineProperty({},
      breakpoints.up('sm'), objectSpread({
        paddingLeft: spacing.unit * 3,
        paddingRight: spacing.unit * 3 },
      styles[breakpoints.up('sm')])));


    },
    toolbar: (_toolbar = {
      minHeight: 56 }, defineProperty(_toolbar, "".concat(
    breakpoints.up('xs'), " and (orientation: landscape)"), {
      minHeight: 48 }), defineProperty(_toolbar,

    breakpoints.up('sm'), {
      minHeight: 64 }), _toolbar) },


  mixins);

}

/**
                                * Returns a number whose value is limited to the given range.
                                *
                                * @param {number} value The value to be clamped
                                * @param {number} min The lower boundary of the output range
                                * @param {number} max The upper boundary of the output range
                                * @returns {number} A number in the range [min, max]
                                */
function clamp(value) {var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
  warning_1(
  value >= min && value <= max, "Material-UI: the value provided ".concat(
  value, " is out of range [").concat(min, ", ").concat(max, "]."));


  if (value < min) {
    return min;
  }
  if (value > max) {
    return max;
  }
  return value;
}

/**
   * Converts a color from CSS hex format to CSS rgb format.
   *
   * @param {string} color - Hex color, i.e. #nnn or #nnnnnn
   * @returns {string} A CSS rgb color string
   */
function convertHexToRGB(color) {
  color = color.substr(1);

  var re = new RegExp(".{1,".concat(color.length / 3, "}"), 'g');
  var colors = color.match(re);

  if (colors && colors[0].length === 1) {
    colors = colors.map(function (n) {return n + n;});
  }

  return colors ? "rgb(".concat(colors.map(function (n) {return parseInt(n, 16);}).join(', '), ")") : '';
}

/**
   * Returns an object with the type and values of a color.
   *
   * Note: Does not support rgb % values.
   *
   * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
   * @returns {object} - A MUI color object: {type: string, values: number[]}
   */
function decomposeColor(color) {
  if (color.charAt(0) === '#') {
    return decomposeColor(convertHexToRGB(color));
  }

  var marker = color.indexOf('(');
  var type = color.substring(0, marker);
  var values = color.substring(marker + 1, color.length - 1).split(',');
  values = values.map(function (value) {return parseFloat(value);});

  return { type: type, values: values };
}

/**
   * Converts a color object with type and values to a string.
   *
   * @param {object} color - Decomposed color
   * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'
   * @param {array} color.values - [n,n,n] or [n,n,n,n]
   * @returns {string} A CSS color string
   */
function recomposeColor(color) {var
  type = color.type;var
  values = color.values;

  if (type.indexOf('rgb') !== -1) {
    // Only convert the first 3 values to int (i.e. not alpha)
    values = values.map(function (n, i) {return i < 3 ? parseInt(n, 10) : n;});
  }

  if (type.indexOf('hsl') !== -1) {
    values[1] = "".concat(values[1], "%");
    values[2] = "".concat(values[2], "%");
  }

  return "".concat(color.type, "(").concat(values.join(', '), ")");
}

/**
   * Calculates the contrast ratio between two colors.
   *
   * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
   *
   * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
   * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
   * @returns {number} A contrast ratio value in the range 0 - 21.
   */
function getContrastRatio(foreground, background) {
  var lumA = getLuminance(foreground);
  var lumB = getLuminance(background);
  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
}

/**
   * The relative brightness of any point in a color space,
   * normalized to 0 for darkest black and 1 for lightest white.
   *
   * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
   *
   * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
   * @returns {number} The relative brightness of the color in the range 0 - 1
   */
function getLuminance(color) {
  var decomposedColor = decomposeColor(color);

  if (decomposedColor.type.indexOf('rgb') !== -1) {
    var rgb = decomposedColor.values.map(function (val) {
      val /= 255; // normalized
      return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);
    });
    // Truncate at 3 digits
    return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
  }

  // else if (decomposedColor.type.indexOf('hsl') !== -1)
  return decomposedColor.values[2] / 100;
}

/**
   * Darken or lighten a colour, depending on its luminance.
   * Light colors are darkened, dark colors are lightened.
   *
   * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
   * @param {number} coefficient=0.15 - multiplier in the range 0 - 1
   * @returns {string} A CSS color string. Hex input values are returned as rgb
   */
function emphasize(color) {var coefficient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.15;
  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);
}

/**
   * Set the absolute transparency of a color.
   * Any existing alpha values are overwritten.
   *
   * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
   * @param {number} value - value to set the alpha channel to in the range 0 -1
   * @returns {string} A CSS color string. Hex input values are returned as rgb
   */
function fade(color, value) {
  warning_1(color, "Material-UI: missing color argument in fade(".concat(color, ", ").concat(value, ")."));

  if (!color) return color;

  color = decomposeColor(color);
  value = clamp(value);

  if (color.type === 'rgb' || color.type === 'hsl') {
    color.type += 'a';
  }
  color.values[3] = value;

  return recomposeColor(color);
}

/**
   * Darkens a color.
   *
   * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
   * @param {number} coefficient - multiplier in the range 0 - 1
   * @returns {string} A CSS color string. Hex input values are returned as rgb
   */
function darken(color, coefficient) {
  warning_1(color, "Material-UI: missing color argument in darken(".concat(color, ", ").concat(coefficient, ")."));

  if (!color) return color;

  color = decomposeColor(color);
  coefficient = clamp(coefficient);

  if (color.type.indexOf('hsl') !== -1) {
    color.values[2] *= 1 - coefficient;
  } else if (color.type.indexOf('rgb') !== -1) {
    for (var i = 0; i < 3; i += 1) {
      color.values[i] *= 1 - coefficient;
    }
  }
  return recomposeColor(color);
}

/**
   * Lightens a color.
   *
   * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
   * @param {number} coefficient - multiplier in the range 0 - 1
   * @returns {string} A CSS color string. Hex input values are returned as rgb
   */
function lighten(color, coefficient) {
  warning_1(color, "Material-UI: missing color argument in lighten(".concat(color, ", ").concat(coefficient, ")."));

  if (!color) return color;

  color = decomposeColor(color);
  coefficient = clamp(coefficient);

  if (color.type.indexOf('hsl') !== -1) {
    color.values[2] += (100 - color.values[2]) * coefficient;
  } else if (color.type.indexOf('rgb') !== -1) {
    for (var i = 0; i < 3; i += 1) {
      color.values[i] += (255 - color.values[i]) * coefficient;
    }
  }

  return recomposeColor(color);
}

var light = {
  // The colors used to style the text.
  text: {
    // The most important text.
    primary: 'rgba(0, 0, 0, 0.87)',
    // Secondary text.
    secondary: 'rgba(0, 0, 0, 0.54)',
    // Disabled text have even lower visual prominence.
    disabled: 'rgba(0, 0, 0, 0.38)',
    // Text hints.
    hint: 'rgba(0, 0, 0, 0.38)' },

  // The color used to divide different elements.
  divider: 'rgba(0, 0, 0, 0.12)',
  // The background colors used to style the surfaces.
  // Consistency between these values is important.
  background: {
    paper: common.white,
    default: grey[50] },

  // The colors used to style the action elements.
  action: {
    // The color of an active action like an icon button.
    active: 'rgba(0, 0, 0, 0.54)',
    // The color of an hovered action.
    hover: 'rgba(0, 0, 0, 0.08)',
    hoverOpacity: 0.08,
    // The color of a selected action.
    selected: 'rgba(0, 0, 0, 0.14)',
    // The color of a disabled action.
    disabled: 'rgba(0, 0, 0, 0.26)',
    // The background color of a disabled action.
    disabledBackground: 'rgba(0, 0, 0, 0.12)' } };



var dark = {
  text: {
    primary: common.white,
    secondary: 'rgba(255, 255, 255, 0.7)',
    disabled: 'rgba(255, 255, 255, 0.5)',
    hint: 'rgba(255, 255, 255, 0.5)',
    icon: 'rgba(255, 255, 255, 0.5)' },

  divider: 'rgba(255, 255, 255, 0.12)',
  background: {
    paper: grey[800],
    default: '#303030' },

  action: {
    active: common.white,
    hover: 'rgba(255, 255, 255, 0.1)',
    hoverOpacity: 0.1,
    selected: 'rgba(255, 255, 255, 0.2)',
    disabled: 'rgba(255, 255, 255, 0.3)',
    disabledBackground: 'rgba(255, 255, 255, 0.12)' } };



function addLightOrDark(intent, direction, shade, tonalOffset) {
  if (!intent[direction]) {
    if (intent.hasOwnProperty(shade)) {
      intent[direction] = intent[shade];
    } else if (direction === 'light') {
      intent.light = lighten(intent.main, tonalOffset);
    } else if (direction === 'dark') {
      intent.dark = darken(intent.main, tonalOffset * 1.5);
    }
  }
}

function createPalette(palette) {var _palette$primary =




















  palette.primary,primary = _palette$primary === void 0 ? { light: indigo[300], main: indigo[500], dark: indigo[700] } : _palette$primary,_palette$secondary = palette.secondary,secondary = _palette$secondary === void 0 ? { light: pink.A200, main: pink.A400, dark: pink.A700 } : _palette$secondary,_palette$error = palette.error,error = _palette$error === void 0 ? { light: red[300], main: red[500], dark: red[700] } : _palette$error,_palette$type = palette.type,type = _palette$type === void 0 ? 'light' : _palette$type,_palette$contrastThre = palette.contrastThreshold,contrastThreshold = _palette$contrastThre === void 0 ? 3 : _palette$contrastThre,_palette$tonalOffset = palette.tonalOffset,tonalOffset = _palette$tonalOffset === void 0 ? 0.2 : _palette$tonalOffset,other = objectWithoutProperties(palette, ["primary", "secondary", "error", "type", "contrastThreshold", "tonalOffset"]);

  function getContrastText(background) {
    // Use the same logic as
    // Bootstrap: https://github.com/twbs/bootstrap/blob/1d6e3710dd447de1a200f29e8fa521f8a0908f70/scss/_functions.scss#L59
    // and material-components-web https://github.com/material-components/material-components-web/blob/ac46b8863c4dab9fc22c4c662dc6bd1b65dd652f/packages/mdc-theme/_functions.scss#L54
    var contrastText =
    getContrastRatio(background, dark.text.primary) >= contrastThreshold ?
    dark.text.primary :
    light.text.primary;

    return contrastText;
  }

  function augmentColor(color) {var mainShade = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;var lightShade = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 300;var darkShade = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 700;
    if (!color.main && color[mainShade]) {
      color.main = color[mainShade];
    }

    addLightOrDark(color, 'light', lightShade, tonalOffset);
    addLightOrDark(color, 'dark', darkShade, tonalOffset);
    if (!color.contrastText) {
      color.contrastText = getContrastText(color.main);
    }

    return color;
  }

  augmentColor(primary);
  augmentColor(secondary, 'A400', 'A200', 'A700');
  augmentColor(error);

  var types = { dark: dark, light: light };

  warning_1(types[type], "Material-UI: the palette type `".concat(type, "` is not supported."));

  var paletteOutput = deepmerge_1(objectSpread({

    // A collection of common colors.
    common: common,
    // The palette type, can be light or dark.
    type: type,
    // The colors used to represent primary interface elements for a user.
    primary: primary,
    // The colors used to represent secondary interface elements for a user.
    secondary: secondary,
    // The colors used to represent interface elements that the user should be made aware of.
    error: error,
    // The grey colors.
    grey: grey,
    // Used by `getContrastText()` to maximize the contrast between the background and
    // the text.
    contrastThreshold: contrastThreshold,
    // Take a background color and return the color of the text to maximize the contrast.
    getContrastText: getContrastText,
    // Generate a rich color object.
    augmentColor: augmentColor,
    // Used by the functions below to shift a color's luminance by approximately
    // two indexes within its tonal palette.
    // E.g., shift from Red 500 to Red 300 or Red 700.
    tonalOffset: tonalOffset },

  types[type]),

  other,
  {
    clone: false // No need to clone deep
  });


  return paletteOutput;
}

var interopRequireDefault = createCommonjsModule(function (module) {
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

module.exports = _interopRequireDefault;
});

unwrapExports(interopRequireDefault);

var _extends_1 = createCommonjsModule(function (module) {
function _extends() {
  module.exports = _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

module.exports = _extends;
});

var exactProp_1 = createCommonjsModule(function (module, exports) {



Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.specialProperty = void 0;

var _defineProperty2 = interopRequireDefault(defineProperty);

var _extends3 = interopRequireDefault(_extends_1);

// This module is based on https://github.com/airbnb/prop-types-exact repository.
// However, in order to reduce the number of dependencies and to remove some extra safe checks
// the module was forked.
// Only exported for test purposes.
var specialProperty = "exact-prop: \u200B";
exports.specialProperty = specialProperty;

function exactProp(propTypes) {
  /* istanbul ignore if */
  {
    return propTypes;
  }

  return (0, _extends3.default)({}, propTypes, (0, _defineProperty2.default)({}, specialProperty, function (props) {
    var unsupportedProps = Object.keys(props).filter(function (prop) {
      return !propTypes.hasOwnProperty(prop);
    });

    if (unsupportedProps.length > 0) {
      return new Error("The following properties are not supported: ".concat(unsupportedProps.map(function (prop) {
        return "`".concat(prop, "`");
      }).join(', '), ". Please remove them."));
    }

    return null;
  }));
}

var _default = exactProp;
exports.default = _default;
});

var exactProp = unwrapExports(exactProp_1);
var exactProp_2 = exactProp_1.specialProperty;

var getDisplayName_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFunctionName = getFunctionName;
exports.default = void 0;
// Fork of recompose/getDisplayName with added IE 11 support
// Simplified polyfill for IE 11 support
// https://github.com/JamesMGreene/Function.name/blob/58b314d4a983110c3682f1228f845d39ccca1817/Function.name.js#L3
var fnNameMatchRegex = /^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;

function getFunctionName(fn) {
  var match = "".concat(fn).match(fnNameMatchRegex);
  var name = match && match[1];
  return name || '';
}

function getDisplayName(Component) {
  if (typeof Component === 'string') {
    return Component;
  }

  if (!Component) {
    return undefined;
  }

  return Component.displayName || Component.name || getFunctionName(Component) || 'Component';
}

var _default = getDisplayName;
exports.default = _default;
});

var getDisplayName = unwrapExports(getDisplayName_1);
var getDisplayName_2 = getDisplayName_1.getFunctionName;

var ponyfillGlobal = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/* eslint-disable */
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var _default = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();

exports.default = _default;
});

var ponyfillGlobal$1 = unwrapExports(ponyfillGlobal);

/** @license Material-UI v3.0.0-alpha.0
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

function round(value) {
  return Math.round(value * 1e5) / 1e5;
}

var caseAllCaps = {
  textTransform: 'uppercase' };

var defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';

/**
                                                                       * @see @link{https://material.io/design/typography/the-type-system.html}
                                                                       * @see @link{https://material.io/design/typography/understanding-typography.html}
                                                                       */
function createTypography(palette, typography) {var _ref =

















  typeof typography === 'function' ? typography(palette) : typography,_ref$fontFamily = _ref.fontFamily,fontFamily = _ref$fontFamily === void 0 ? defaultFontFamily : _ref$fontFamily,_ref$fontSize = _ref.fontSize,fontSize = _ref$fontSize === void 0 ? 14 : _ref$fontSize,_ref$fontWeightLight = _ref.fontWeightLight,fontWeightLight = _ref$fontWeightLight === void 0 ? 300 : _ref$fontWeightLight,_ref$fontWeightRegula = _ref.fontWeightRegular,fontWeightRegular = _ref$fontWeightRegula === void 0 ? 400 : _ref$fontWeightRegula,_ref$fontWeightMedium = _ref.fontWeightMedium,fontWeightMedium = _ref$fontWeightMedium === void 0 ? 500 : _ref$fontWeightMedium,_ref$htmlFontSize = _ref.htmlFontSize,htmlFontSize = _ref$htmlFontSize === void 0 ? 16 : _ref$htmlFontSize,_ref$useNextVariants = _ref.useNextVariants,useNextVariants = _ref$useNextVariants === void 0 ? Boolean(ponyfillGlobal$1.__MUI_USE_NEXT_TYPOGRAPHY_VARIANTS__) : _ref$useNextVariants,_ref$suppressWarning = _ref.suppressWarning,suppressWarning = _ref$suppressWarning === void 0 ? false : _ref$suppressWarning,allVariants = _ref.allVariants,other = objectWithoutProperties(_ref, ["fontFamily", "fontSize", "fontWeightLight", "fontWeightRegular", "fontWeightMedium", "htmlFontSize", "useNextVariants", "suppressWarning", "allVariants"]);

  warning_1(
  useNextVariants || suppressWarning,
  'Material-UI: you are using the deprecated typography variants ' +
  'that will be removed in the next major release.' +
  '\nPlease read the migration guide under https://material-ui.com/style/typography#migration-to-typography-v2');


  var coef = fontSize / 14;
  var pxToRem = function pxToRem(size) {return "".concat(size / htmlFontSize * coef, "rem");};
  var buildVariant = function buildVariant(fontWeight, size, lineHeight, letterSpacing, casing) {return objectSpread({
      color: palette.text.primary,
      fontFamily: fontFamily,
      fontWeight: fontWeight,
      fontSize: pxToRem(size),
      // Unitless following http://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
      lineHeight: lineHeight },


    fontFamily === defaultFontFamily ?
    { letterSpacing: "".concat(round(letterSpacing / size), "em") } :
    {},
    casing,
    allVariants);};


  var nextVariants = {
    h1: buildVariant(fontWeightLight, 96, 1, -1.5),
    h2: buildVariant(fontWeightLight, 60, 1, -0.5),
    h3: buildVariant(fontWeightRegular, 48, 1.04, 0),
    h4: buildVariant(fontWeightRegular, 34, 1.17, 0.25),
    h5: buildVariant(fontWeightRegular, 24, 1.33, 0),
    h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
    subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
    subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
    body1Next: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
    body2Next: buildVariant(fontWeightRegular, 14, 1.5, 0.15),
    buttonNext: buildVariant(fontWeightMedium, 14, 1.5, 0.4, caseAllCaps),
    captionNext: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
    overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps) };


  // To remove in v4
  var oldVariants = {
    display4: objectSpread({
      fontSize: pxToRem(112),
      fontWeight: fontWeightLight,
      fontFamily: fontFamily,
      letterSpacing: '-.04em',
      lineHeight: "".concat(round(128 / 112), "em"),
      marginLeft: '-.04em',
      color: palette.text.secondary },
    allVariants),

    display3: objectSpread({
      fontSize: pxToRem(56),
      fontWeight: fontWeightRegular,
      fontFamily: fontFamily,
      letterSpacing: '-.02em',
      lineHeight: "".concat(round(73 / 56), "em"),
      marginLeft: '-.02em',
      color: palette.text.secondary },
    allVariants),

    display2: objectSpread({
      fontSize: pxToRem(45),
      fontWeight: fontWeightRegular,
      fontFamily: fontFamily,
      lineHeight: "".concat(round(51 / 45), "em"),
      marginLeft: '-.02em',
      color: palette.text.secondary },
    allVariants),

    display1: objectSpread({
      fontSize: pxToRem(34),
      fontWeight: fontWeightRegular,
      fontFamily: fontFamily,
      lineHeight: "".concat(round(41 / 34), "em"),
      color: palette.text.secondary },
    allVariants),

    headline: objectSpread({
      fontSize: pxToRem(24),
      fontWeight: fontWeightRegular,
      fontFamily: fontFamily,
      lineHeight: "".concat(round(32.5 / 24), "em"),
      color: palette.text.primary },
    allVariants),

    title: objectSpread({
      fontSize: pxToRem(21),
      fontWeight: fontWeightMedium,
      fontFamily: fontFamily,
      lineHeight: "".concat(round(24.5 / 21), "em"),
      color: palette.text.primary },
    allVariants),

    subheading: objectSpread({
      fontSize: pxToRem(16),
      fontWeight: fontWeightRegular,
      fontFamily: fontFamily,
      lineHeight: "".concat(round(24 / 16), "em"),
      color: palette.text.primary },
    allVariants),

    body2: objectSpread({
      fontSize: pxToRem(14),
      fontWeight: fontWeightMedium,
      fontFamily: fontFamily,
      lineHeight: "".concat(round(24 / 14), "em"),
      color: palette.text.primary },
    allVariants),

    body1: objectSpread({
      fontSize: pxToRem(14),
      fontWeight: fontWeightRegular,
      fontFamily: fontFamily,
      lineHeight: "".concat(round(20.5 / 14), "em"),
      color: palette.text.primary },
    allVariants),

    caption: objectSpread({
      fontSize: pxToRem(12),
      fontWeight: fontWeightRegular,
      fontFamily: fontFamily,
      lineHeight: "".concat(round(16.5 / 12), "em"),
      color: palette.text.secondary },
    allVariants),

    button: objectSpread({
      fontSize: pxToRem(14),
      textTransform: 'uppercase',
      fontWeight: fontWeightMedium,
      fontFamily: fontFamily,
      color: palette.text.primary },
    allVariants) };



  return deepmerge_1(objectSpread({

    pxToRem: pxToRem,
    round: round,
    fontFamily: fontFamily,
    fontSize: fontSize,
    fontWeightLight: fontWeightLight,
    fontWeightRegular: fontWeightRegular,
    fontWeightMedium: fontWeightMedium },
  oldVariants,
  nextVariants,
  useNextVariants ?
  {
    body1: nextVariants.body1Next,
    body2: nextVariants.body2Next,
    button: nextVariants.buttonNext,
    caption: nextVariants.captionNext } :

  {}, {
    useNextVariants: useNextVariants }),

  other,
  {
    clone: false // No need to clone deep
  });

}

var shadowKeyUmbraOpacity = 0.2;
var shadowKeyPenumbraOpacity = 0.14;
var shadowAmbientShadowOpacity = 0.12;

function createShadow() {
  return ["".concat(arguments.length <= 0 ? undefined : arguments[0], "px ").concat(arguments.length <= 1 ? undefined : arguments[1], "px ").concat(arguments.length <= 2 ? undefined : arguments[2], "px ").concat(arguments.length <= 3 ? undefined : arguments[3], "px rgba(0, 0, 0, ").concat(
  shadowKeyUmbraOpacity, ")"), "".concat(arguments.length <= 4 ? undefined : arguments[4], "px ").concat(arguments.length <= 5 ? undefined : arguments[5], "px ").concat(arguments.length <= 6 ? undefined : arguments[6], "px ").concat(arguments.length <= 7 ? undefined : arguments[7], "px rgba(0, 0, 0, ").concat(
  shadowKeyPenumbraOpacity, ")"), "".concat(arguments.length <= 8 ? undefined : arguments[8], "px ").concat(arguments.length <= 9 ? undefined : arguments[9], "px ").concat(arguments.length <= 10 ? undefined : arguments[10], "px ").concat(arguments.length <= 11 ? undefined : arguments[11], "px rgba(0, 0, 0, ").concat(
  shadowAmbientShadowOpacity, ")")].
  join(',');
}

var shadows = [
'none',
createShadow(0, 1, 3, 0, 0, 1, 1, 0, 0, 2, 1, -1),
createShadow(0, 1, 5, 0, 0, 2, 2, 0, 0, 3, 1, -2),
createShadow(0, 1, 8, 0, 0, 3, 4, 0, 0, 3, 3, -2),
createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0),
createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0),
createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0),
createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1),
createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2),
createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2),
createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3),
createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3),
createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4),
createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4),
createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4),
createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5),
createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5),
createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5),
createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6),
createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6),
createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7),
createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7),
createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7),
createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8),
createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];

var shape = {
  borderRadius: 4 };

var spacing = {
  // All components align to an 8dp square baseline grid for mobile, tablet, and desktop.
  // https://material.io/design/layout/understanding-layout.html#pixel-density
  unit: 8 };

// Follow https://material.google.com/motion/duration-easing.html#duration-easing-natural-easing-curves
// to learn the context in which each easing should be used.
var easing = {
  // This is the most common easing curve.
  easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',
  // Objects enter the screen at full velocity from off-screen and
  // slowly decelerate to a resting point.
  easeOut: 'cubic-bezier(0.0, 0, 0.2, 1)',
  // Objects leave the screen at full velocity. They do not decelerate when off-screen.
  easeIn: 'cubic-bezier(0.4, 0, 1, 1)',
  // The sharp curve is used by objects that may return to the screen at any time.
  sharp: 'cubic-bezier(0.4, 0, 0.6, 1)' };


// Follow https://material.io/guidelines/motion/duration-easing.html#duration-easing-common-durations
// to learn when use what timing
var duration = {
  shortest: 150,
  shorter: 200,
  short: 250,
  // most basic recommended timing
  standard: 300,
  // this is to be used in complex animations
  complex: 375,
  // recommended when something is entering screen
  enteringScreen: 225,
  // recommended when something is leaving screen
  leavingScreen: 195 };


var formatMs = function formatMs(milliseconds) {return "".concat(Math.round(milliseconds), "ms");};
var isString = function isString(value) {return typeof value === 'string';};
var isNumber = function isNumber(value) {return !isNaN(parseFloat(value));};

/**
                                                                                     * @param {string|Array} props
                                                                                     * @param {object} param
                                                                                     * @param {string} param.prop
                                                                                     * @param {number} param.duration
                                                                                     * @param {string} param.easing
                                                                                     * @param {number} param.delay
                                                                                     */
var transitions = {
  easing: easing,
  duration: duration,
  create: function create() {var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['all'];var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};var _options$duration =





    options.duration,durationOption = _options$duration === void 0 ? duration.standard : _options$duration,_options$easing = options.easing,easingOption = _options$easing === void 0 ? easing.easeInOut : _options$easing,_options$delay = options.delay,delay = _options$delay === void 0 ? 0 : _options$delay,other = objectWithoutProperties(options, ["duration", "easing", "delay"]);

    warning_1(
    isString(props) || Array.isArray(props),
    'Material-UI: argument "props" must be a string or Array.');

    warning_1(
    isNumber(durationOption) || isString(durationOption), "Material-UI: argument \"duration\" must be a number or a string but found ".concat(
    durationOption, "."));

    warning_1(isString(easingOption), 'Material-UI: argument "easing" must be a string.');
    warning_1(
    isNumber(delay) || isString(delay),
    'Material-UI: argument "delay" must be a number or a string.');

    warning_1(
    Object.keys(other).length === 0, "Material-UI: unrecognized argument(s) [".concat(
    Object.keys(other).join(','), "]"));


    return (Array.isArray(props) ? props : [props]).
    map(
    function (animatedProp) {return "".concat(
      animatedProp, " ").concat(
      typeof durationOption === 'string' ? durationOption : formatMs(durationOption), " ").concat(
      easingOption, " ").concat(typeof delay === 'string' ? delay : formatMs(delay));}).

    join(',');
  },
  getAutoHeightDuration: function getAutoHeightDuration(height) {
    if (!height) {
      return 0;
    }

    var constant = height / 36;

    // https://www.wolframalpha.com/input/?i=(4+%2B+15+*+(x+%2F+36+)+**+0.25+%2B+(x+%2F+36)+%2F+5)+*+10
    return Math.round((4 + 15 * Math.pow(constant, 0.25) + constant / 5) * 10);
  } };

// We need to centralize the zIndex definitions as they work
// like global values in the browser.
var zIndex = {
  mobileStepper: 1000,
  appBar: 1100,
  drawer: 1200,
  modal: 1300,
  snackbar: 1400,
  tooltip: 1500 };

function createMuiTheme() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};var _options$breakpoints =








  options.breakpoints,breakpointsInput = _options$breakpoints === void 0 ? {} : _options$breakpoints,_options$mixins = options.mixins,mixinsInput = _options$mixins === void 0 ? {} : _options$mixins,_options$palette = options.palette,paletteInput = _options$palette === void 0 ? {} : _options$palette,shadowsInput = options.shadows,_options$spacing = options.spacing,spacingInput = _options$spacing === void 0 ? {} : _options$spacing,_options$typography = options.typography,typographyInput = _options$typography === void 0 ? {} : _options$typography,other = objectWithoutProperties(options, ["breakpoints", "mixins", "palette", "shadows", "spacing", "typography"]);

  var palette = createPalette(paletteInput);
  var breakpoints = createBreakpoints(breakpointsInput);
  var spacing$$1 = objectSpread({}, spacing, spacingInput);

  var muiTheme = objectSpread({
    breakpoints: breakpoints,
    direction: 'ltr',
    mixins: createMixins(breakpoints, spacing$$1, mixinsInput),
    overrides: {}, // Inject custom styles
    palette: palette,
    props: {}, // Inject custom properties
    shadows: shadowsInput || shadows,
    typography: createTypography(palette, typographyInput) },
  deepmerge_1(
  {
    shape: shape,
    spacing: spacing$$1,
    transitions: transitions,
    zIndex: zIndex },

  other,
  {
    isMergeableObject: isPlainObject }));




  warning_1(
  muiTheme.shadows.length === 25,
  'Material-UI: the shadows array provided to createMuiTheme should support 25 elevations.');


  return muiTheme;
}

var getDynamicStyles_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports['default'] = getDynamicStyles;
/**
 * Extracts a styles object with only props that contain function values.
 */
function getDynamicStyles(styles) {
  var to = null;

  for (var key in styles) {
    var value = styles[key];
    var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);

    if (type === 'function') {
      if (!to) to = {};
      to[key] = value;
    } else if (type === 'object' && value !== null && !Array.isArray(value)) {
      var extracted = getDynamicStyles(value);
      if (extracted) {
        if (!to) to = {};
        to[key] = extracted;
      }
    }
  }

  return to;
}
});

unwrapExports(getDynamicStyles_1);

var toCssValue_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports['default'] = toCssValue;
var join = function join(value, by) {
  var result = '';
  for (var i = 0; i < value.length; i++) {
    // Remove !important from the value, it will be readded later.
    if (value[i] === '!important') break;
    if (result) result += by;
    result += value[i];
  }
  return result;
};

/**
 * Converts array values to string.
 *
 * `margin: [['5px', '10px']]` > `margin: 5px 10px;`
 * `border: ['1px', '2px']` > `border: 1px, 2px;`
 * `margin: [['5px', '10px'], '!important']` > `margin: 5px 10px !important;`
 * `color: ['red', !important]` > `color: red !important;`
 */
function toCssValue(value) {
  var ignoreImportant = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (!Array.isArray(value)) return value;

  var cssValue = '';

  // Support space separated values via `[['5px', '10px']]`.
  if (Array.isArray(value[0])) {
    for (var i = 0; i < value.length; i++) {
      if (value[i] === '!important') break;
      if (cssValue) cssValue += ', ';
      cssValue += join(value[i], ' ');
    }
  } else cssValue = join(value, ', ');

  // Add !important, because it was ignored.
  if (!ignoreImportant && value[value.length - 1] === '!important') {
    cssValue += ' !important';
  }

  return cssValue;
}
});

unwrapExports(toCssValue_1);

var SheetsRegistry_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Sheets registry to access them all at one place.
 */
var SheetsRegistry = function () {
  function SheetsRegistry() {
    _classCallCheck(this, SheetsRegistry);

    this.registry = [];
  }

  _createClass(SheetsRegistry, [{
    key: 'add',


    /**
     * Register a Style Sheet.
     */
    value: function add(sheet) {
      var registry = this.registry;
      var index = sheet.options.index;


      if (registry.indexOf(sheet) !== -1) return;

      if (registry.length === 0 || index >= this.index) {
        registry.push(sheet);
        return;
      }

      // Find a position.
      for (var i = 0; i < registry.length; i++) {
        if (registry[i].options.index > index) {
          registry.splice(i, 0, sheet);
          return;
        }
      }
    }

    /**
     * Reset the registry.
     */

  }, {
    key: 'reset',
    value: function reset() {
      this.registry = [];
    }

    /**
     * Remove a Style Sheet.
     */

  }, {
    key: 'remove',
    value: function remove(sheet) {
      var index = this.registry.indexOf(sheet);
      this.registry.splice(index, 1);
    }

    /**
     * Convert all attached sheets to a CSS string.
     */

  }, {
    key: 'toString',
    value: function toString(options) {
      return this.registry.filter(function (sheet) {
        return sheet.attached;
      }).map(function (sheet) {
        return sheet.toString(options);
      }).join('\n');
    }
  }, {
    key: 'index',


    /**
     * Current highest index number.
     */
    get: function get() {
      return this.registry.length === 0 ? 0 : this.registry[this.registry.length - 1].options.index;
    }
  }]);

  return SheetsRegistry;
}();

exports['default'] = SheetsRegistry;
});

unwrapExports(SheetsRegistry_1);

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning$1 = function() {};

var browser$2 = warning$1;

var SheetsManager_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



var _warning2 = _interopRequireDefault(browser$2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * SheetsManager is like a WeakMap which is designed to count StyleSheet
 * instances and attach/detach automatically.
 */
var SheetsManager = function () {
  function SheetsManager() {
    _classCallCheck(this, SheetsManager);

    this.sheets = [];
    this.refs = [];
    this.keys = [];
  }

  _createClass(SheetsManager, [{
    key: 'get',
    value: function get(key) {
      var index = this.keys.indexOf(key);
      return this.sheets[index];
    }
  }, {
    key: 'add',
    value: function add(key, sheet) {
      var sheets = this.sheets,
          refs = this.refs,
          keys = this.keys;

      var index = sheets.indexOf(sheet);

      if (index !== -1) return index;

      sheets.push(sheet);
      refs.push(0);
      keys.push(key);

      return sheets.length - 1;
    }
  }, {
    key: 'manage',
    value: function manage(key) {
      var index = this.keys.indexOf(key);
      var sheet = this.sheets[index];
      if (this.refs[index] === 0) sheet.attach();
      this.refs[index]++;
      if (!this.keys[index]) this.keys.splice(index, 0, key);
      return sheet;
    }
  }, {
    key: 'unmanage',
    value: function unmanage(key) {
      var index = this.keys.indexOf(key);
      if (index === -1) {
        // eslint-ignore-next-line no-console
        (0, _warning2['default'])(false, "SheetsManager: can't find sheet to unmanage");
        return;
      }
      if (this.refs[index] > 0) {
        this.refs[index]--;
        if (this.refs[index] === 0) this.sheets[index].detach();
      }
    }
  }, {
    key: 'size',
    get: function get() {
      return this.keys.length;
    }
  }]);

  return SheetsManager;
}();

exports['default'] = SheetsManager;
});

unwrapExports(SheetsManager_1);

var toCss_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports['default'] = toCss;



var _toCssValue2 = _interopRequireDefault(toCssValue_1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/**
 * Indent a string.
 * http://jsperf.com/array-join-vs-for
 */
function indentStr(str, indent) {
  var result = '';
  for (var index = 0; index < indent; index++) {
    result += '  ';
  }return result + str;
}

/**
 * Converts a Rule to CSS string.
 */

function toCss(selector, style) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  var result = '';

  if (!style) return result;

  var _options$indent = options.indent,
      indent = _options$indent === undefined ? 0 : _options$indent;
  var fallbacks = style.fallbacks;


  indent++;

  // Apply fallbacks first.
  if (fallbacks) {
    // Array syntax {fallbacks: [{prop: value}]}
    if (Array.isArray(fallbacks)) {
      for (var index = 0; index < fallbacks.length; index++) {
        var fallback = fallbacks[index];
        for (var prop in fallback) {
          var value = fallback[prop];
          if (value != null) {
            result += '\n' + indentStr(prop + ': ' + (0, _toCssValue2['default'])(value) + ';', indent);
          }
        }
      }
    } else {
      // Object syntax {fallbacks: {prop: value}}
      for (var _prop in fallbacks) {
        var _value = fallbacks[_prop];
        if (_value != null) {
          result += '\n' + indentStr(_prop + ': ' + (0, _toCssValue2['default'])(_value) + ';', indent);
        }
      }
    }
  }

  for (var _prop2 in style) {
    var _value2 = style[_prop2];
    if (_value2 != null && _prop2 !== 'fallbacks') {
      result += '\n' + indentStr(_prop2 + ': ' + (0, _toCssValue2['default'])(_value2) + ';', indent);
    }
  }

  // Allow empty style in this case, because properties will be added dynamically.
  if (!result && !options.allowEmpty) return result;

  indent--;
  result = indentStr(selector + ' {' + result + '\n', indent) + indentStr('}', indent);

  return result;
}
});

unwrapExports(toCss_1);

var StyleRule_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



var _warning2 = _interopRequireDefault(browser$2);



var _toCss2 = _interopRequireDefault(toCss_1);



var _toCssValue2 = _interopRequireDefault(toCssValue_1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var StyleRule = function () {
  function StyleRule(key, style, options) {
    _classCallCheck(this, StyleRule);

    this.type = 'style';
    this.isProcessed = false;
    var sheet = options.sheet,
        Renderer = options.Renderer,
        selector = options.selector;

    this.key = key;
    this.options = options;
    this.style = style;
    if (selector) this.selectorText = selector;
    this.renderer = sheet ? sheet.renderer : new Renderer();
  }

  /**
   * Set selector string.
   * Attention: use this with caution. Most browsers didn't implement
   * selectorText setter, so this may result in rerendering of entire Style Sheet.
   */


  _createClass(StyleRule, [{
    key: 'prop',


    /**
     * Get or set a style property.
     */
    value: function prop(name, value) {
      // It's a getter.
      if (value === undefined) return this.style[name];

      // Don't do anything if the value has not changed.
      if (this.style[name] === value) return this;

      value = this.options.jss.plugins.onChangeValue(value, name, this);

      var isEmpty = value == null || value === false;
      var isDefined = name in this.style;

      // Value is empty and wasn't defined before.
      if (isEmpty && !isDefined) return this;

      // We are going to remove this value.
      var remove = isEmpty && isDefined;

      if (remove) delete this.style[name];else this.style[name] = value;

      // Renderable is defined if StyleSheet option `link` is true.
      if (this.renderable) {
        if (remove) this.renderer.removeProperty(this.renderable, name);else this.renderer.setProperty(this.renderable, name, value);
        return this;
      }

      var sheet = this.options.sheet;

      if (sheet && sheet.attached) {
        (0, _warning2['default'])(false, 'Rule is not linked. Missing sheet option "link: true".');
      }
      return this;
    }

    /**
     * Apply rule to an element inline.
     */

  }, {
    key: 'applyTo',
    value: function applyTo(renderable) {
      var json = this.toJSON();
      for (var prop in json) {
        this.renderer.setProperty(renderable, prop, json[prop]);
      }return this;
    }

    /**
     * Returns JSON representation of the rule.
     * Fallbacks are not supported.
     * Useful for inline styles.
     */

  }, {
    key: 'toJSON',
    value: function toJSON() {
      var json = {};
      for (var prop in this.style) {
        var value = this.style[prop];
        if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object') json[prop] = value;else if (Array.isArray(value)) json[prop] = (0, _toCssValue2['default'])(value);
      }
      return json;
    }

    /**
     * Generates a CSS string.
     */

  }, {
    key: 'toString',
    value: function toString(options) {
      var sheet = this.options.sheet;

      var link = sheet ? sheet.options.link : false;
      var opts = link ? _extends({}, options, { allowEmpty: true }) : options;
      return (0, _toCss2['default'])(this.selector, this.style, opts);
    }
  }, {
    key: 'selector',
    set: function set(selector) {
      if (selector === this.selectorText) return;

      this.selectorText = selector;

      if (!this.renderable) return;

      var hasChanged = this.renderer.setSelector(this.renderable, selector);

      // If selector setter is not implemented, rerender the rule.
      if (!hasChanged && this.renderable) {
        var renderable = this.renderer.replaceRule(this.renderable, this);
        if (renderable) this.renderable = renderable;
      }
    }

    /**
     * Get selector string.
     */
    ,
    get: function get() {
      return this.selectorText;
    }
  }]);

  return StyleRule;
}();

exports['default'] = StyleRule;
});

unwrapExports(StyleRule_1);

function symbolObservablePonyfill(root) {
	var result;
	var Symbol = root.Symbol;

	if (typeof Symbol === 'function') {
		if (Symbol.observable) {
			result = Symbol.observable;
		} else {
			result = Symbol('observable');
			Symbol.observable = result;
		}
	} else {
		result = '@@observable';
	}

	return result;
}

var root;

if (typeof self !== 'undefined') {
  root = self;
} else if (typeof window !== 'undefined') {
  root = window;
} else if (typeof global$1 !== 'undefined') {
  root = global$1;
} else if (typeof module !== 'undefined') {
  root = module;
} else {
  root = Function('return this')();
}

var result = symbolObservablePonyfill(root);

var isObservable = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});



var _symbolObservable2 = _interopRequireDefault(result);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

exports['default'] = function (value) {
  return value && value[_symbolObservable2['default']] && value === value[_symbolObservable2['default']]();
};
});

unwrapExports(isObservable);

var cloneStyle_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports['default'] = cloneStyle;



var _isObservable2 = _interopRequireDefault(isObservable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var isArray = Array.isArray;
function cloneStyle(style) {
  // Support empty values in case user ends up with them by accident.
  if (style == null) return style;

  // Support string value for SimpleRule.
  var typeOfStyle = typeof style === 'undefined' ? 'undefined' : _typeof(style);

  if (typeOfStyle === 'string' || typeOfStyle === 'number' || typeOfStyle === 'function') {
    return style;
  }

  // Support array for FontFaceRule.
  if (isArray(style)) return style.map(cloneStyle);

  // Support Observable styles.  Observables are immutable, so we don't need to
  // copy them.
  if ((0, _isObservable2['default'])(style)) return style;

  var newStyle = {};
  for (var name in style) {
    var value = style[name];
    if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
      newStyle[name] = cloneStyle(value);
      continue;
    }
    newStyle[name] = value;
  }

  return newStyle;
}
});

unwrapExports(cloneStyle_1);

var createRule_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports['default'] = createRule;



var _warning2 = _interopRequireDefault(browser$2);



var _StyleRule2 = _interopRequireDefault(StyleRule_1);



var _cloneStyle2 = _interopRequireDefault(cloneStyle_1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/**
 * Create a rule instance.
 */
function createRule() {
  var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'unnamed';
  var decl = arguments[1];
  var options = arguments[2];
  var jss = options.jss;

  var declCopy = (0, _cloneStyle2['default'])(decl);

  var rule = jss.plugins.onCreateRule(name, declCopy, options);
  if (rule) return rule;

  // It is an at-rule and it has no instance.
  if (name[0] === '@') {
    (0, _warning2['default'])(false, '[JSS] Unknown at-rule %s', name);
  }

  return new _StyleRule2['default'](name, declCopy, options);
}
});

unwrapExports(createRule_1);

var linkRule_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = linkRule;
/**
 * Link rule with CSSStyleRule and nested rules with corresponding nested cssRules if both exists.
 */
function linkRule(rule, cssRule) {
  rule.renderable = cssRule;
  if (rule.rules && cssRule.cssRules) rule.rules.link(cssRule.cssRules);
}
});

unwrapExports(linkRule_1);

var _escape = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
var CSS = commonjsGlobal.CSS;

var escapeRegex = /([[\].#*$><+~=|^:(),"'`])/g;

exports['default'] = function (str) {
  // We don't need to escape it in production, because we are not using user's
  // input for selectors, we are generating a valid selector.
  return str;

  if (!CSS || !CSS.escape) {
    return str.replace(escapeRegex, '\\$1');
  }

  return CSS.escape(str);
};
});

unwrapExports(_escape);

var RuleList_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



var _createRule2 = _interopRequireDefault(createRule_1);



var _linkRule2 = _interopRequireDefault(linkRule_1);



var _StyleRule2 = _interopRequireDefault(StyleRule_1);



var _escape2 = _interopRequireDefault(_escape);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Contains rules objects and allows adding/removing etc.
 * Is used for e.g. by `StyleSheet` or `ConditionalRule`.
 */
var RuleList = function () {

  // Original styles object.
  function RuleList(options) {
    var _this = this;

    _classCallCheck(this, RuleList);

    this.map = {};
    this.raw = {};
    this.index = [];

    this.update = function (name, data) {
      var _options = _this.options,
          plugins = _options.jss.plugins,
          sheet = _options.sheet;

      if (typeof name === 'string') {
        plugins.onUpdate(data, _this.get(name), sheet);
      } else {
        for (var index = 0; index < _this.index.length; index++) {
          plugins.onUpdate(name, _this.index[index], sheet);
        }
      }
    };

    this.options = options;
    this.classes = options.classes;
  }

  /**
   * Create and register rule.
   *
   * Will not render after Style Sheet was rendered the first time.
   */


  // Used to ensure correct rules order.

  // Rules registry for access by .get() method.
  // It contains the same rule registered by name and by selector.


  _createClass(RuleList, [{
    key: 'add',
    value: function add(name, decl, options) {
      var _options2 = this.options,
          parent = _options2.parent,
          sheet = _options2.sheet,
          jss = _options2.jss,
          Renderer = _options2.Renderer,
          generateClassName = _options2.generateClassName;


      options = _extends({
        classes: this.classes,
        parent: parent,
        sheet: sheet,
        jss: jss,
        Renderer: Renderer,
        generateClassName: generateClassName
      }, options);

      if (!options.selector && this.classes[name]) {
        options.selector = '.' + (0, _escape2['default'])(this.classes[name]);
      }

      this.raw[name] = decl;

      var rule = (0, _createRule2['default'])(name, decl, options);

      var className = void 0;

      if (!options.selector && rule instanceof _StyleRule2['default']) {
        className = generateClassName(rule, sheet);
        rule.selector = '.' + (0, _escape2['default'])(className);
      }

      this.register(rule, className);

      var index = options.index === undefined ? this.index.length : options.index;
      this.index.splice(index, 0, rule);

      return rule;
    }

    /**
     * Get a rule.
     */

  }, {
    key: 'get',
    value: function get(name) {
      return this.map[name];
    }

    /**
     * Delete a rule.
     */

  }, {
    key: 'remove',
    value: function remove(rule) {
      this.unregister(rule);
      this.index.splice(this.indexOf(rule), 1);
    }

    /**
     * Get index of a rule.
     */

  }, {
    key: 'indexOf',
    value: function indexOf(rule) {
      return this.index.indexOf(rule);
    }

    /**
     * Run `onProcessRule()` plugins on every rule.
     */

  }, {
    key: 'process',
    value: function process() {
      var plugins = this.options.jss.plugins;
      // We need to clone array because if we modify the index somewhere else during a loop
      // we end up with very hard-to-track-down side effects.

      this.index.slice(0).forEach(plugins.onProcessRule, plugins);
    }

    /**
     * Register a rule in `.map` and `.classes` maps.
     */

  }, {
    key: 'register',
    value: function register(rule, className) {
      this.map[rule.key] = rule;
      if (rule instanceof _StyleRule2['default']) {
        this.map[rule.selector] = rule;
        if (className) this.classes[rule.key] = className;
      }
    }

    /**
     * Unregister a rule.
     */

  }, {
    key: 'unregister',
    value: function unregister(rule) {
      delete this.map[rule.key];
      if (rule instanceof _StyleRule2['default']) {
        delete this.map[rule.selector];
        delete this.classes[rule.key];
      }
    }

    /**
     * Update the function values with a new data.
     */

  }, {
    key: 'link',


    /**
     * Link renderable rules with CSSRuleList.
     */
    value: function link(cssRules) {
      var map = this.options.sheet.renderer.getUnescapedKeysMap(this.index);

      for (var i = 0; i < cssRules.length; i++) {
        var cssRule = cssRules[i];
        var _key = this.options.sheet.renderer.getKey(cssRule);
        if (map[_key]) _key = map[_key];
        var rule = this.map[_key];
        if (rule) (0, _linkRule2['default'])(rule, cssRule);
      }
    }

    /**
     * Convert rules to a CSS string.
     */

  }, {
    key: 'toString',
    value: function toString(options) {
      var str = '';
      var sheet = this.options.sheet;

      var link = sheet ? sheet.options.link : false;

      for (var index = 0; index < this.index.length; index++) {
        var rule = this.index[index];
        var css = rule.toString(options);

        // No need to render an empty rule.
        if (!css && !link) continue;

        if (str) str += '\n';
        str += css;
      }

      return str;
    }
  }]);

  return RuleList;
}();

exports['default'] = RuleList;
});

unwrapExports(RuleList_1);

var sheets = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});



var _SheetsRegistry2 = _interopRequireDefault(SheetsRegistry_1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/**
 * This is a global sheets registry. Only DomRenderer will add sheets to it.
 * On the server one should use an own SheetsRegistry instance and add the
 * sheets to it, because you need to make sure to create a new registry for
 * each request in order to not leak sheets across requests.
 */
exports['default'] = new _SheetsRegistry2['default']();
});

unwrapExports(sheets);

var StyleSheet_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



var _linkRule2 = _interopRequireDefault(linkRule_1);



var _RuleList2 = _interopRequireDefault(RuleList_1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* eslint-disable-next-line no-use-before-define */
var StyleSheet = function () {
  function StyleSheet(styles, options) {
    var _this = this;

    _classCallCheck(this, StyleSheet);

    this.update = function (name, data) {
      if (typeof name === 'string') {
        _this.rules.update(name, data);
      } else {
        _this.rules.update(name);
      }
      return _this;
    };

    this.attached = false;
    this.deployed = false;
    this.linked = false;
    this.classes = {};
    this.options = _extends({}, options, {
      sheet: this,
      parent: this,
      classes: this.classes
    });
    this.renderer = new options.Renderer(this);
    this.rules = new _RuleList2['default'](this.options);

    for (var _name in styles) {
      this.rules.add(_name, styles[_name]);
    }

    this.rules.process();
  }

  /**
   * Attach renderable to the render tree.
   */


  _createClass(StyleSheet, [{
    key: 'attach',
    value: function attach() {
      if (this.attached) return this;
      if (!this.deployed) this.deploy();
      this.renderer.attach();
      if (!this.linked && this.options.link) this.link();
      this.attached = true;
      return this;
    }

    /**
     * Remove renderable from render tree.
     */

  }, {
    key: 'detach',
    value: function detach() {
      if (!this.attached) return this;
      this.renderer.detach();
      this.attached = false;
      return this;
    }

    /**
     * Add a rule to the current stylesheet.
     * Will insert a rule also after the stylesheet has been rendered first time.
     */

  }, {
    key: 'addRule',
    value: function addRule(name, decl, options) {
      var queue = this.queue;

      // Plugins can create rules.
      // In order to preserve the right order, we need to queue all `.addRule` calls,
      // which happen after the first `rules.add()` call.

      if (this.attached && !queue) this.queue = [];

      var rule = this.rules.add(name, decl, options);
      this.options.jss.plugins.onProcessRule(rule);

      if (this.attached) {
        if (!this.deployed) return rule;
        // Don't insert rule directly if there is no stringified version yet.
        // It will be inserted all together when .attach is called.
        if (queue) queue.push(rule);else {
          this.insertRule(rule);
          if (this.queue) {
            this.queue.forEach(this.insertRule, this);
            this.queue = undefined;
          }
        }
        return rule;
      }

      // We can't add rules to a detached style node.
      // We will redeploy the sheet once user will attach it.
      this.deployed = false;

      return rule;
    }

    /**
     * Insert rule into the StyleSheet
     */

  }, {
    key: 'insertRule',
    value: function insertRule(rule) {
      var renderable = this.renderer.insertRule(rule);
      if (renderable && this.options.link) (0, _linkRule2['default'])(rule, renderable);
    }

    /**
     * Create and add rules.
     * Will render also after Style Sheet was rendered the first time.
     */

  }, {
    key: 'addRules',
    value: function addRules(styles, options) {
      var added = [];
      for (var _name2 in styles) {
        added.push(this.addRule(_name2, styles[_name2], options));
      }
      return added;
    }

    /**
     * Get a rule by name.
     */

  }, {
    key: 'getRule',
    value: function getRule(name) {
      return this.rules.get(name);
    }

    /**
     * Delete a rule by name.
     * Returns `true`: if rule has been deleted from the DOM.
     */

  }, {
    key: 'deleteRule',
    value: function deleteRule(name) {
      var rule = this.rules.get(name);

      if (!rule) return false;

      this.rules.remove(rule);

      if (this.attached && rule.renderable) {
        return this.renderer.deleteRule(rule.renderable);
      }

      return true;
    }

    /**
     * Get index of a rule.
     */

  }, {
    key: 'indexOf',
    value: function indexOf(rule) {
      return this.rules.indexOf(rule);
    }

    /**
     * Deploy pure CSS string to a renderable.
     */

  }, {
    key: 'deploy',
    value: function deploy() {
      this.renderer.deploy();
      this.deployed = true;
      return this;
    }

    /**
     * Link renderable CSS rules from sheet with their corresponding models.
     */

  }, {
    key: 'link',
    value: function link() {
      var cssRules = this.renderer.getRules();

      // Is undefined when VirtualRenderer is used.
      if (cssRules) this.rules.link(cssRules);
      this.linked = true;
      return this;
    }

    /**
     * Update the function values with a new data.
     */

  }, {
    key: 'toString',


    /**
     * Convert rules to a CSS string.
     */
    value: function toString(options) {
      return this.rules.toString(options);
    }
  }]);

  return StyleSheet;
}();

exports['default'] = StyleSheet;
});

unwrapExports(StyleSheet_1);

var moduleId = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
var ns = '2f1acc6c3a606b082e5eef5e54414ffb';
if (commonjsGlobal[ns] == null) commonjsGlobal[ns] = 0;

// Bundle may contain multiple JSS versions at the same time. In order to identify
// the current version with just one short number and use it for classes generation
// we use a counter. Also it is more accurate, because user can manually reevaluate
// the module.
exports['default'] = commonjsGlobal[ns]++;
});

unwrapExports(moduleId);

var createGenerateClassName$1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});



var _warning2 = _interopRequireDefault(browser$2);



var _StyleSheet2 = _interopRequireDefault(StyleSheet_1);



var _moduleId2 = _interopRequireDefault(moduleId);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var maxRules = 1e10;

/**
 * Returns a function which generates unique class names based on counters.
 * When new generator function is created, rule counter is reseted.
 * We need to reset the rule counter for SSR for each request.
 */

exports['default'] = function () {
  var ruleCounter = 0;
  var defaultPrefix = 'c';

  return function (rule, sheet) {
    ruleCounter += 1;

    if (ruleCounter > maxRules) {
      (0, _warning2['default'])(false, '[JSS] You might have a memory leak. Rule counter is at %s.', ruleCounter);
    }

    var prefix = defaultPrefix;
    var jssId = '';

    if (sheet) {
      prefix = sheet.options.classNamePrefix || defaultPrefix;
      if (sheet.options.jss.id != null) jssId += sheet.options.jss.id;
    }

    {
      return '' + prefix + _moduleId2['default'] + jssId + ruleCounter;
    }

    return prefix + rule.key + '-' + _moduleId2['default'] + (jssId && '-' + jssId) + '-' + ruleCounter;
  };
};
});

unwrapExports(createGenerateClassName$1);

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var isBrowser = (typeof window === "undefined" ? "undefined" : _typeof(window)) === "object" && (typeof document === "undefined" ? "undefined" : _typeof(document)) === 'object' && document.nodeType === 9;

var PluginsRegistry_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



var _warning2 = _interopRequireDefault(browser$2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PluginsRegistry = function () {
  function PluginsRegistry() {
    _classCallCheck(this, PluginsRegistry);

    this.hooks = {
      onCreateRule: [],
      onProcessRule: [],
      onProcessStyle: [],
      onProcessSheet: [],
      onChangeValue: [],
      onUpdate: []

      /**
       * Call `onCreateRule` hooks and return an object if returned by a hook.
       */
    };
  }

  _createClass(PluginsRegistry, [{
    key: 'onCreateRule',
    value: function onCreateRule(name, decl, options) {
      for (var i = 0; i < this.hooks.onCreateRule.length; i++) {
        var rule = this.hooks.onCreateRule[i](name, decl, options);
        if (rule) return rule;
      }
      return null;
    }

    /**
     * Call `onProcessRule` hooks.
     */

  }, {
    key: 'onProcessRule',
    value: function onProcessRule(rule) {
      if (rule.isProcessed) return;
      var sheet = rule.options.sheet;

      for (var i = 0; i < this.hooks.onProcessRule.length; i++) {
        this.hooks.onProcessRule[i](rule, sheet);
      }

      // $FlowFixMe
      if (rule.style) this.onProcessStyle(rule.style, rule, sheet);

      rule.isProcessed = true;
    }

    /**
     * Call `onProcessStyle` hooks.
     */

  }, {
    key: 'onProcessStyle',
    value: function onProcessStyle(style, rule, sheet) {
      var nextStyle = style;

      for (var i = 0; i < this.hooks.onProcessStyle.length; i++) {
        nextStyle = this.hooks.onProcessStyle[i](nextStyle, rule, sheet);
        // $FlowFixMe
        rule.style = nextStyle;
      }
    }

    /**
     * Call `onProcessSheet` hooks.
     */

  }, {
    key: 'onProcessSheet',
    value: function onProcessSheet(sheet) {
      for (var i = 0; i < this.hooks.onProcessSheet.length; i++) {
        this.hooks.onProcessSheet[i](sheet);
      }
    }

    /**
     * Call `onUpdate` hooks.
     */

  }, {
    key: 'onUpdate',
    value: function onUpdate(data, rule, sheet) {
      for (var i = 0; i < this.hooks.onUpdate.length; i++) {
        this.hooks.onUpdate[i](data, rule, sheet);
      }
    }

    /**
     * Call `onChangeValue` hooks.
     */

  }, {
    key: 'onChangeValue',
    value: function onChangeValue(value, prop, rule) {
      var processedValue = value;
      for (var i = 0; i < this.hooks.onChangeValue.length; i++) {
        processedValue = this.hooks.onChangeValue[i](processedValue, prop, rule);
      }
      return processedValue;
    }

    /**
     * Register a plugin.
     * If function is passed, it is a shortcut for `{onProcessRule}`.
     */

  }, {
    key: 'use',
    value: function use(plugin) {
      for (var name in plugin) {
        if (this.hooks[name]) this.hooks[name].push(plugin[name]);else (0, _warning2['default'])(false, '[JSS] Unknown hook "%s".', name);
      }
    }
  }]);

  return PluginsRegistry;
}();

exports['default'] = PluginsRegistry;
});

unwrapExports(PluginsRegistry_1);

var SimpleRule_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SimpleRule = function () {
  function SimpleRule(key, value, options) {
    _classCallCheck(this, SimpleRule);

    this.type = 'simple';
    this.isProcessed = false;

    this.key = key;
    this.value = value;
    this.options = options;
  }

  /**
   * Generates a CSS string.
   */
  // eslint-disable-next-line no-unused-vars


  _createClass(SimpleRule, [{
    key: 'toString',
    value: function toString(options) {
      if (Array.isArray(this.value)) {
        var str = '';
        for (var index = 0; index < this.value.length; index++) {
          str += this.key + ' ' + this.value[index] + ';';
          if (this.value[index + 1]) str += '\n';
        }
        return str;
      }

      return this.key + ' ' + this.value + ';';
    }
  }]);

  return SimpleRule;
}();

exports['default'] = SimpleRule;
});

unwrapExports(SimpleRule_1);

var KeyframesRule_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



var _RuleList2 = _interopRequireDefault(RuleList_1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Rule for @keyframes
 */
var KeyframesRule = function () {
  function KeyframesRule(key, frames, options) {
    _classCallCheck(this, KeyframesRule);

    this.type = 'keyframes';
    this.isProcessed = false;

    this.key = key;
    this.options = options;
    this.rules = new _RuleList2['default'](_extends({}, options, { parent: this }));

    for (var name in frames) {
      this.rules.add(name, frames[name], _extends({}, this.options, {
        parent: this,
        selector: name
      }));
    }

    this.rules.process();
  }

  /**
   * Generates a CSS string.
   */


  _createClass(KeyframesRule, [{
    key: 'toString',
    value: function toString() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { indent: 1 };

      var inner = this.rules.toString(options);
      if (inner) inner += '\n';
      return this.key + ' {\n' + inner + '}';
    }
  }]);

  return KeyframesRule;
}();

exports['default'] = KeyframesRule;
});

unwrapExports(KeyframesRule_1);

var ConditionalRule_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



var _RuleList2 = _interopRequireDefault(RuleList_1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Conditional rule for @media, @supports
 */
var ConditionalRule = function () {
  function ConditionalRule(key, styles, options) {
    _classCallCheck(this, ConditionalRule);

    this.type = 'conditional';
    this.isProcessed = false;

    this.key = key;
    this.options = options;
    this.rules = new _RuleList2['default'](_extends({}, options, { parent: this }));

    for (var name in styles) {
      this.rules.add(name, styles[name]);
    }

    this.rules.process();
  }

  /**
   * Get a rule.
   */


  _createClass(ConditionalRule, [{
    key: 'getRule',
    value: function getRule(name) {
      return this.rules.get(name);
    }

    /**
     * Get index of a rule.
     */

  }, {
    key: 'indexOf',
    value: function indexOf(rule) {
      return this.rules.indexOf(rule);
    }

    /**
     * Create and register rule, run plugins.
     */

  }, {
    key: 'addRule',
    value: function addRule(name, style, options) {
      var rule = this.rules.add(name, style, options);
      this.options.jss.plugins.onProcessRule(rule);
      return rule;
    }

    /**
     * Generates a CSS string.
     */

  }, {
    key: 'toString',
    value: function toString() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { indent: 1 };

      var inner = this.rules.toString(options);
      return inner ? this.key + ' {\n' + inner + '\n}' : '';
    }
  }]);

  return ConditionalRule;
}();

exports['default'] = ConditionalRule;
});

unwrapExports(ConditionalRule_1);

var FontFaceRule_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



var _toCss2 = _interopRequireDefault(toCss_1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FontFaceRule = function () {
  function FontFaceRule(key, style, options) {
    _classCallCheck(this, FontFaceRule);

    this.type = 'font-face';
    this.isProcessed = false;

    this.key = key;
    this.style = style;
    this.options = options;
  }

  /**
   * Generates a CSS string.
   */


  _createClass(FontFaceRule, [{
    key: 'toString',
    value: function toString(options) {
      if (Array.isArray(this.style)) {
        var str = '';
        for (var index = 0; index < this.style.length; index++) {
          str += (0, _toCss2['default'])(this.key, this.style[index]);
          if (this.style[index + 1]) str += '\n';
        }
        return str;
      }

      return (0, _toCss2['default'])(this.key, this.style, options);
    }
  }]);

  return FontFaceRule;
}();

exports['default'] = FontFaceRule;
});

unwrapExports(FontFaceRule_1);

var ViewportRule_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



var _toCss2 = _interopRequireDefault(toCss_1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ViewportRule = function () {
  function ViewportRule(key, style, options) {
    _classCallCheck(this, ViewportRule);

    this.type = 'viewport';
    this.isProcessed = false;

    this.key = key;
    this.style = style;
    this.options = options;
  }

  /**
   * Generates a CSS string.
   */


  _createClass(ViewportRule, [{
    key: 'toString',
    value: function toString(options) {
      return (0, _toCss2['default'])(this.key, this.style, options);
    }
  }]);

  return ViewportRule;
}();

exports['default'] = ViewportRule;
});

unwrapExports(ViewportRule_1);

var rules = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});



var _SimpleRule2 = _interopRequireDefault(SimpleRule_1);



var _KeyframesRule2 = _interopRequireDefault(KeyframesRule_1);



var _ConditionalRule2 = _interopRequireDefault(ConditionalRule_1);



var _FontFaceRule2 = _interopRequireDefault(FontFaceRule_1);



var _ViewportRule2 = _interopRequireDefault(ViewportRule_1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var classes = {
  '@charset': _SimpleRule2['default'],
  '@import': _SimpleRule2['default'],
  '@namespace': _SimpleRule2['default'],
  '@keyframes': _KeyframesRule2['default'],
  '@media': _ConditionalRule2['default'],
  '@supports': _ConditionalRule2['default'],
  '@font-face': _FontFaceRule2['default'],
  '@viewport': _ViewportRule2['default'],
  '@-ms-viewport': _ViewportRule2['default']

  /**
   * Generate plugins which will register all rules.
   */
};
var plugins = Object.keys(classes).map(function (key) {
  // https://jsperf.com/indexof-vs-substr-vs-regex-at-the-beginning-3
  var re = new RegExp('^' + key);
  var RuleClass = classes[key];
  var onCreateRule = function onCreateRule(name, decl, options) {
    return re.test(name) ? new RuleClass(name, decl, options) : null;
  };
  return { onCreateRule: onCreateRule };
});

exports['default'] = plugins;
});

unwrapExports(rules);

var observables = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});



var _StyleRule2 = _interopRequireDefault(StyleRule_1);



var _createRule2 = _interopRequireDefault(createRule_1);



var _isObservable2 = _interopRequireDefault(isObservable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

exports['default'] = {
  onCreateRule: function onCreateRule(name, decl, options) {
    if (!(0, _isObservable2['default'])(decl)) return null;

    // Cast `decl` to `Observable`, since it passed the type guard.
    var style$ = decl;

    var rule = (0, _createRule2['default'])(name, {}, options);

    // TODO
    // Call `stream.subscribe()` returns a subscription, which should be explicitly
    // unsubscribed from when we know this sheet is no longer needed.
    style$.subscribe(function (style) {
      for (var prop in style) {
        rule.prop(prop, style[prop]);
      }
    });

    return rule;
  },
  onProcessRule: function onProcessRule(rule) {
    if (!(rule instanceof _StyleRule2['default'])) return;
    var styleRule = rule;
    var style = styleRule.style;

    var _loop = function _loop(prop) {
      var value = style[prop];
      if (!(0, _isObservable2['default'])(value)) return 'continue';
      delete style[prop];
      value.subscribe({
        next: function next(nextValue) {
          styleRule.prop(prop, nextValue);
        }
      });
    };

    for (var prop in style) {
      var _ret = _loop(prop);

      if (_ret === 'continue') continue;
    }
  }
};
});

unwrapExports(observables);

var functions = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});



var _RuleList2 = _interopRequireDefault(RuleList_1);



var _StyleRule2 = _interopRequireDefault(StyleRule_1);



var _createRule2 = _interopRequireDefault(createRule_1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

// A symbol replacement.
var now = Date.now();

var fnValuesNs = 'fnValues' + now;
var fnStyleNs = 'fnStyle' + ++now;

exports['default'] = {
  onCreateRule: function onCreateRule(name, decl, options) {
    if (typeof decl !== 'function') return null;
    var rule = (0, _createRule2['default'])(name, {}, options);
    rule[fnStyleNs] = decl;
    return rule;
  },
  onProcessStyle: function onProcessStyle(style, rule) {
    var fn = {};
    for (var prop in style) {
      var value = style[prop];
      if (typeof value !== 'function') continue;
      delete style[prop];
      fn[prop] = value;
    }
    rule = rule;
    rule[fnValuesNs] = fn;
    return style;
  },
  onUpdate: function onUpdate(data, rule) {
    // It is a rules container like for e.g. ConditionalRule.
    if (rule.rules instanceof _RuleList2['default']) {
      rule.rules.update(data);
      return;
    }
    if (!(rule instanceof _StyleRule2['default'])) return;

    rule = rule;

    // If we have a fn values map, it is a rule with function values.
    if (rule[fnValuesNs]) {
      for (var prop in rule[fnValuesNs]) {
        rule.prop(prop, rule[fnValuesNs][prop](data));
      }
    }

    rule = rule;

    var fnStyle = rule[fnStyleNs];

    // If we have a style function, the entire rule is dynamic and style object
    // will be returned from that function.
    if (fnStyle) {
      var style = fnStyle(data);
      for (var _prop in style) {
        rule.prop(_prop, style[_prop]);
      }
    }
  }
};
});

unwrapExports(functions);

var DomRenderer_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



var _warning2 = _interopRequireDefault(browser$2);



var _sheets2 = _interopRequireDefault(sheets);



var _StyleRule2 = _interopRequireDefault(StyleRule_1);



var _toCssValue2 = _interopRequireDefault(toCssValue_1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Cache the value from the first time a function is called.
 */
var memoize = function memoize(fn) {
  var value = void 0;
  return function () {
    if (!value) value = fn();
    return value;
  };
};

/**
 * Get a style property value.
 */
function getPropertyValue(cssRule, prop) {
  try {
    return cssRule.style.getPropertyValue(prop);
  } catch (err) {
    // IE may throw if property is unknown.
    return '';
  }
}

/**
 * Set a style property.
 */
function setProperty(cssRule, prop, value) {
  try {
    var cssValue = value;

    if (Array.isArray(value)) {
      cssValue = (0, _toCssValue2['default'])(value, true);

      if (value[value.length - 1] === '!important') {
        cssRule.style.setProperty(prop, cssValue, 'important');
        return true;
      }
    }

    cssRule.style.setProperty(prop, cssValue);
  } catch (err) {
    // IE may throw if property is unknown.
    return false;
  }
  return true;
}

/**
 * Remove a style property.
 */
function removeProperty(cssRule, prop) {
  try {
    cssRule.style.removeProperty(prop);
  } catch (err) {
    (0, _warning2['default'])(false, '[JSS] DOMException "%s" was thrown. Tried to remove property "%s".', err.message, prop);
  }
}

var CSSRuleTypes = {
  STYLE_RULE: 1,
  KEYFRAMES_RULE: 7

  /**
   * Get the CSS Rule key.
   */

};var getKey = function () {
  var extractKey = function extractKey(cssText) {
    var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    return cssText.substr(from, cssText.indexOf('{') - 1);
  };

  return function (cssRule) {
    if (cssRule.type === CSSRuleTypes.STYLE_RULE) return cssRule.selectorText;
    if (cssRule.type === CSSRuleTypes.KEYFRAMES_RULE) {
      var name = cssRule.name;

      if (name) return '@keyframes ' + name;

      // There is no rule.name in the following browsers:
      // - IE 9
      // - Safari 7.1.8
      // - Mobile Safari 9.0.0
      var cssText = cssRule.cssText;

      return '@' + extractKey(cssText, cssText.indexOf('keyframes'));
    }

    // Conditionals.
    return extractKey(cssRule.cssText);
  };
}();

/**
 * Set the selector.
 */
function setSelector(cssRule, selectorText) {
  cssRule.selectorText = selectorText;

  // Return false if setter was not successful.
  // Currently works in chrome only.
  return cssRule.selectorText === selectorText;
}

/**
 * Gets the `head` element upon the first call and caches it.
 */
var getHead = memoize(function () {
  return document.head || document.getElementsByTagName('head')[0];
});

/**
 * Gets a map of rule keys, where the property is an unescaped key and value
 * is a potentially escaped one.
 * It is used to identify CSS rules and the corresponding JSS rules. As an identifier
 * for CSSStyleRule we normally use `selectorText`. Though if original selector text
 * contains escaped code points e.g. `:not(#\\20)`, CSSOM will compile it to `:not(# )`
 * and so CSS rule's `selectorText` won't match JSS rule selector.
 *
 * https://www.w3.org/International/questions/qa-escapes#cssescapes
 */
var getUnescapedKeysMap = function () {
  var style = void 0;
  var isAttached = false;

  return function (rules) {
    var map = {};
    // https://github.com/facebook/flow/issues/2696
    if (!style) style = document.createElement('style');
    for (var i = 0; i < rules.length; i++) {
      var rule = rules[i];
      if (!(rule instanceof _StyleRule2['default'])) continue;
      var selector = rule.selector;
      // Only unescape selector over CSSOM if it contains a back slash.

      if (selector && selector.indexOf('\\') !== -1) {
        // Lazilly attach when needed.
        if (!isAttached) {
          getHead().appendChild(style);
          isAttached = true;
        }
        style.textContent = selector + ' {}';
        var _style = style,
            sheet = _style.sheet;

        if (sheet) {
          var cssRules = sheet.cssRules;

          if (cssRules) map[cssRules[0].selectorText] = rule.key;
        }
      }
    }
    if (isAttached) {
      getHead().removeChild(style);
      isAttached = false;
    }
    return map;
  };
}();

/**
 * Find attached sheet with an index higher than the passed one.
 */
function findHigherSheet(registry, options) {
  for (var i = 0; i < registry.length; i++) {
    var sheet = registry[i];
    if (sheet.attached && sheet.options.index > options.index && sheet.options.insertionPoint === options.insertionPoint) {
      return sheet;
    }
  }
  return null;
}

/**
 * Find attached sheet with the highest index.
 */
function findHighestSheet(registry, options) {
  for (var i = registry.length - 1; i >= 0; i--) {
    var sheet = registry[i];
    if (sheet.attached && sheet.options.insertionPoint === options.insertionPoint) {
      return sheet;
    }
  }
  return null;
}

/**
 * Find a comment with "jss" inside.
 */
function findCommentNode(text) {
  var head = getHead();
  for (var i = 0; i < head.childNodes.length; i++) {
    var node = head.childNodes[i];
    if (node.nodeType === 8 && node.nodeValue.trim() === text) {
      return node;
    }
  }
  return null;
}

/**
 * Find a node before which we can insert the sheet.
 */
function findPrevNode(options) {
  var registry = _sheets2['default'].registry;


  if (registry.length > 0) {
    // Try to insert before the next higher sheet.
    var sheet = findHigherSheet(registry, options);
    if (sheet) return sheet.renderer.element;

    // Otherwise insert after the last attached.
    sheet = findHighestSheet(registry, options);
    if (sheet) return sheet.renderer.element.nextElementSibling;
  }

  // Try to find a comment placeholder if registry is empty.
  var insertionPoint = options.insertionPoint;

  if (insertionPoint && typeof insertionPoint === 'string') {
    var comment = findCommentNode(insertionPoint);
    if (comment) return comment.nextSibling;
    // If user specifies an insertion point and it can't be found in the document -
    // bad specificity issues may appear.
    (0, _warning2['default'])(insertionPoint === 'jss', '[JSS] Insertion point "%s" not found.', insertionPoint);
  }

  return null;
}

/**
 * Insert style element into the DOM.
 */
function insertStyle(style, options) {
  var insertionPoint = options.insertionPoint;

  var prevNode = findPrevNode(options);

  if (prevNode) {
    var parentNode = prevNode.parentNode;

    if (parentNode) parentNode.insertBefore(style, prevNode);
    return;
  }

  // Works with iframes and any node types.
  if (insertionPoint && typeof insertionPoint.nodeType === 'number') {
    // https://stackoverflow.com/questions/41328728/force-casting-in-flow
    var insertionPointElement = insertionPoint;
    var _parentNode = insertionPointElement.parentNode;

    if (_parentNode) _parentNode.insertBefore(style, insertionPointElement.nextSibling);else (0, _warning2['default'])(false, '[JSS] Insertion point is not in the DOM.');
    return;
  }

  getHead().insertBefore(style, prevNode);
}

/**
 * Read jss nonce setting from the page if the user has set it.
 */
var getNonce = memoize(function () {
  var node = document.querySelector('meta[property="csp-nonce"]');
  return node ? node.getAttribute('content') : null;
});

var DomRenderer = function () {
  function DomRenderer(sheet) {
    _classCallCheck(this, DomRenderer);

    this.getPropertyValue = getPropertyValue;
    this.setProperty = setProperty;
    this.removeProperty = removeProperty;
    this.setSelector = setSelector;
    this.getKey = getKey;
    this.getUnescapedKeysMap = getUnescapedKeysMap;
    this.hasInsertedRules = false;

    // There is no sheet when the renderer is used from a standalone StyleRule.
    if (sheet) _sheets2['default'].add(sheet);

    this.sheet = sheet;

    var _ref = this.sheet ? this.sheet.options : {},
        media = _ref.media,
        meta = _ref.meta,
        element = _ref.element;

    this.element = element || document.createElement('style');
    this.element.setAttribute('data-jss', '');
    if (media) this.element.setAttribute('media', media);
    if (meta) this.element.setAttribute('data-meta', meta);
    var nonce = getNonce();
    if (nonce) this.element.setAttribute('nonce', nonce);
  }

  /**
   * Insert style element into render tree.
   */


  // HTMLStyleElement needs fixing https://github.com/facebook/flow/issues/2696


  _createClass(DomRenderer, [{
    key: 'attach',
    value: function attach() {
      // In the case the element node is external and it is already in the DOM.
      if (this.element.parentNode || !this.sheet) return;

      // When rules are inserted using `insertRule` API, after `sheet.detach().attach()`
      // browsers remove those rules.
      // TODO figure out if its a bug and if it is known.
      // Workaround is to redeploy the sheet before attaching as a string.
      if (this.hasInsertedRules) {
        this.deploy();
        this.hasInsertedRules = false;
      }

      insertStyle(this.element, this.sheet.options);
    }

    /**
     * Remove style element from render tree.
     */

  }, {
    key: 'detach',
    value: function detach() {
      this.element.parentNode.removeChild(this.element);
    }

    /**
     * Inject CSS string into element.
     */

  }, {
    key: 'deploy',
    value: function deploy() {
      if (!this.sheet) return;
      this.element.textContent = '\n' + this.sheet.toString() + '\n';
    }

    /**
     * Insert a rule into element.
     */

  }, {
    key: 'insertRule',
    value: function insertRule(rule, index) {
      var sheet = this.element.sheet;
      var cssRules = sheet.cssRules;

      var str = rule.toString();
      if (!index) index = cssRules.length;

      if (!str) return false;

      try {
        sheet.insertRule(str, index);
      } catch (err) {
        (0, _warning2['default'])(false, '[JSS] Can not insert an unsupported rule \n\r%s', rule);
        return false;
      }
      this.hasInsertedRules = true;

      return cssRules[index];
    }

    /**
     * Delete a rule.
     */

  }, {
    key: 'deleteRule',
    value: function deleteRule(cssRule) {
      var sheet = this.element.sheet;

      var index = this.indexOf(cssRule);
      if (index === -1) return false;
      sheet.deleteRule(index);
      return true;
    }

    /**
     * Get index of a CSS Rule.
     */

  }, {
    key: 'indexOf',
    value: function indexOf(cssRule) {
      var cssRules = this.element.sheet.cssRules;

      for (var _index = 0; _index < cssRules.length; _index++) {
        if (cssRule === cssRules[_index]) return _index;
      }
      return -1;
    }

    /**
     * Generate a new CSS rule and replace the existing one.
     */

  }, {
    key: 'replaceRule',
    value: function replaceRule(cssRule, rule) {
      var index = this.indexOf(cssRule);
      var newCssRule = this.insertRule(rule, index);
      this.element.sheet.deleteRule(index);
      return newCssRule;
    }

    /**
     * Get all rules elements.
     */

  }, {
    key: 'getRules',
    value: function getRules() {
      return this.element.sheet.cssRules;
    }
  }]);

  return DomRenderer;
}();

exports['default'] = DomRenderer;
});

unwrapExports(DomRenderer_1);

var VirtualRenderer_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* eslint-disable class-methods-use-this */

/**
 * Rendering backend to do nothing in nodejs.
 */
var VirtualRenderer = function () {
  function VirtualRenderer() {
    _classCallCheck(this, VirtualRenderer);
  }

  _createClass(VirtualRenderer, [{
    key: 'setProperty',
    value: function setProperty() {
      return true;
    }
  }, {
    key: 'getPropertyValue',
    value: function getPropertyValue() {
      return '';
    }
  }, {
    key: 'removeProperty',
    value: function removeProperty() {}
  }, {
    key: 'setSelector',
    value: function setSelector() {
      return true;
    }
  }, {
    key: 'getKey',
    value: function getKey() {
      return '';
    }
  }, {
    key: 'attach',
    value: function attach() {}
  }, {
    key: 'detach',
    value: function detach() {}
  }, {
    key: 'deploy',
    value: function deploy() {}
  }, {
    key: 'insertRule',
    value: function insertRule() {
      return false;
    }
  }, {
    key: 'deleteRule',
    value: function deleteRule() {
      return true;
    }
  }, {
    key: 'replaceRule',
    value: function replaceRule() {
      return false;
    }
  }, {
    key: 'getRules',
    value: function getRules() {}
  }, {
    key: 'indexOf',
    value: function indexOf() {
      return -1;
    }
  }]);

  return VirtualRenderer;
}();

exports['default'] = VirtualRenderer;
});

unwrapExports(VirtualRenderer_1);

var Jss_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();



var _isInBrowser2 = _interopRequireDefault(isBrowser);



var _StyleSheet2 = _interopRequireDefault(StyleSheet_1);



var _PluginsRegistry2 = _interopRequireDefault(PluginsRegistry_1);



var _rules2 = _interopRequireDefault(rules);



var _observables2 = _interopRequireDefault(observables);



var _functions2 = _interopRequireDefault(functions);



var _sheets2 = _interopRequireDefault(sheets);



var _StyleRule2 = _interopRequireDefault(StyleRule_1);



var _createGenerateClassName2 = _interopRequireDefault(createGenerateClassName$1);



var _createRule3 = _interopRequireDefault(createRule_1);



var _DomRenderer2 = _interopRequireDefault(DomRenderer_1);



var _VirtualRenderer2 = _interopRequireDefault(VirtualRenderer_1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var defaultPlugins = _rules2['default'].concat([_observables2['default'], _functions2['default']]);

var instanceCounter = 0;

var Jss = function () {
  function Jss(options) {
    _classCallCheck(this, Jss);

    this.id = instanceCounter++;
    this.version = "9.8.7";
    this.plugins = new _PluginsRegistry2['default']();
    this.options = {
      createGenerateClassName: _createGenerateClassName2['default'],
      Renderer: _isInBrowser2['default'] ? _DomRenderer2['default'] : _VirtualRenderer2['default'],
      plugins: []
    };
    this.generateClassName = (0, _createGenerateClassName2['default'])();

    // eslint-disable-next-line prefer-spread
    this.use.apply(this, defaultPlugins);
    this.setup(options);
  }

  _createClass(Jss, [{
    key: 'setup',
    value: function setup() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (options.createGenerateClassName) {
        this.options.createGenerateClassName = options.createGenerateClassName;
        // $FlowFixMe
        this.generateClassName = options.createGenerateClassName();
      }

      if (options.insertionPoint != null) this.options.insertionPoint = options.insertionPoint;
      if (options.virtual || options.Renderer) {
        this.options.Renderer = options.Renderer || (options.virtual ? _VirtualRenderer2['default'] : _DomRenderer2['default']);
      }

      // eslint-disable-next-line prefer-spread
      if (options.plugins) this.use.apply(this, options.plugins);

      return this;
    }

    /**
     * Create a Style Sheet.
     */

  }, {
    key: 'createStyleSheet',
    value: function createStyleSheet(styles) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var index = options.index;
      if (typeof index !== 'number') {
        index = _sheets2['default'].index === 0 ? 0 : _sheets2['default'].index + 1;
      }
      var sheet = new _StyleSheet2['default'](styles, _extends({}, options, {
        jss: this,
        generateClassName: options.generateClassName || this.generateClassName,
        insertionPoint: this.options.insertionPoint,
        Renderer: this.options.Renderer,
        index: index
      }));
      this.plugins.onProcessSheet(sheet);

      return sheet;
    }

    /**
     * Detach the Style Sheet and remove it from the registry.
     */

  }, {
    key: 'removeStyleSheet',
    value: function removeStyleSheet(sheet) {
      sheet.detach();
      _sheets2['default'].remove(sheet);
      return this;
    }

    /**
     * Create a rule without a Style Sheet.
     */

  }, {
    key: 'createRule',
    value: function createRule(name) {
      var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      // Enable rule without name for inline styles.
      if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') {
        options = style;
        style = name;
        name = undefined;
      }

      // Cast from RuleFactoryOptions to RuleOptions
      // https://stackoverflow.com/questions/41328728/force-casting-in-flow
      var ruleOptions = options;

      ruleOptions.jss = this;
      ruleOptions.Renderer = this.options.Renderer;
      if (!ruleOptions.generateClassName) ruleOptions.generateClassName = this.generateClassName;
      if (!ruleOptions.classes) ruleOptions.classes = {};
      var rule = (0, _createRule3['default'])(name, style, ruleOptions);

      if (!ruleOptions.selector && rule instanceof _StyleRule2['default']) {
        rule.selector = '.' + ruleOptions.generateClassName(rule);
      }

      this.plugins.onProcessRule(rule);

      return rule;
    }

    /**
     * Register plugin. Passed function will be invoked with a rule instance.
     */

  }, {
    key: 'use',
    value: function use() {
      var _this = this;

      for (var _len = arguments.length, plugins = Array(_len), _key = 0; _key < _len; _key++) {
        plugins[_key] = arguments[_key];
      }

      plugins.forEach(function (plugin) {
        // Avoids applying same plugin twice, at least based on ref.
        if (_this.options.plugins.indexOf(plugin) === -1) {
          _this.options.plugins.push(plugin);
          _this.plugins.use(plugin);
        }
      });

      return this;
    }
  }]);

  return Jss;
}();

exports['default'] = Jss;
});

unwrapExports(Jss_1);

var lib = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.create = exports.createGenerateClassName = exports.sheets = exports.RuleList = exports.SheetsManager = exports.SheetsRegistry = exports.toCssValue = exports.getDynamicStyles = undefined;



Object.defineProperty(exports, 'getDynamicStyles', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(getDynamicStyles_1)['default'];
  }
});



Object.defineProperty(exports, 'toCssValue', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(toCssValue_1)['default'];
  }
});



Object.defineProperty(exports, 'SheetsRegistry', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(SheetsRegistry_1)['default'];
  }
});



Object.defineProperty(exports, 'SheetsManager', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(SheetsManager_1)['default'];
  }
});



Object.defineProperty(exports, 'RuleList', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(RuleList_1)['default'];
  }
});



Object.defineProperty(exports, 'sheets', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(sheets)['default'];
  }
});



Object.defineProperty(exports, 'createGenerateClassName', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(createGenerateClassName$1)['default'];
  }
});



var _Jss2 = _interopRequireDefault(Jss_1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/**
 * Creates a new instance of Jss.
 */
var create = exports.create = function create(options) {
  return new _Jss2['default'](options);
};

/**
 * A global Jss instance.
 */
exports['default'] = create();
});

unwrapExports(lib);
var lib_1 = lib.create;
var lib_2 = lib.createGenerateClassName;
var lib_3 = lib.sheets;
var lib_4 = lib.RuleList;
var lib_5 = lib.SheetsManager;
var lib_6 = lib.SheetsRegistry;
var lib_7 = lib.toCssValue;
var lib_8 = lib.getDynamicStyles;

var lib$1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports['default'] = jssGlobal;



function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var propKey = '@global';
var prefixKey = '@global ';

var GlobalContainerRule = function () {
  function GlobalContainerRule(key, styles, options) {
    _classCallCheck(this, GlobalContainerRule);

    this.type = 'global';

    this.key = key;
    this.options = options;
    this.rules = new lib.RuleList(_extends({}, options, {
      parent: this
    }));

    for (var selector in styles) {
      this.rules.add(selector, styles[selector], { selector: selector });
    }

    this.rules.process();
  }

  /**
   * Get a rule.
   */


  _createClass(GlobalContainerRule, [{
    key: 'getRule',
    value: function getRule(name) {
      return this.rules.get(name);
    }

    /**
     * Create and register rule, run plugins.
     */

  }, {
    key: 'addRule',
    value: function addRule(name, style, options) {
      var rule = this.rules.add(name, style, options);
      this.options.jss.plugins.onProcessRule(rule);
      return rule;
    }

    /**
     * Get index of a rule.
     */

  }, {
    key: 'indexOf',
    value: function indexOf(rule) {
      return this.rules.indexOf(rule);
    }

    /**
     * Generates a CSS string.
     */

  }, {
    key: 'toString',
    value: function toString() {
      return this.rules.toString();
    }
  }]);

  return GlobalContainerRule;
}();

var GlobalPrefixedRule = function () {
  function GlobalPrefixedRule(name, style, options) {
    _classCallCheck(this, GlobalPrefixedRule);

    this.name = name;
    this.options = options;
    var selector = name.substr(prefixKey.length);
    this.rule = options.jss.createRule(selector, style, _extends({}, options, {
      parent: this,
      selector: selector
    }));
  }

  _createClass(GlobalPrefixedRule, [{
    key: 'toString',
    value: function toString(options) {
      return this.rule.toString(options);
    }
  }]);

  return GlobalPrefixedRule;
}();

var separatorRegExp = /\s*,\s*/g;

function addScope(selector, scope) {
  var parts = selector.split(separatorRegExp);
  var scoped = '';
  for (var i = 0; i < parts.length; i++) {
    scoped += scope + ' ' + parts[i].trim();
    if (parts[i + 1]) scoped += ', ';
  }
  return scoped;
}

function handleNestedGlobalContainerRule(rule) {
  var options = rule.options,
      style = rule.style;

  var rules = style[propKey];

  if (!rules) return;

  for (var name in rules) {
    options.sheet.addRule(name, rules[name], _extends({}, options, {
      selector: addScope(name, rule.selector)
    }));
  }

  delete style[propKey];
}

function handlePrefixedGlobalRule(rule) {
  var options = rule.options,
      style = rule.style;

  for (var prop in style) {
    if (prop.substr(0, propKey.length) !== propKey) continue;

    var selector = addScope(prop.substr(propKey.length), rule.selector);
    options.sheet.addRule(selector, style[prop], _extends({}, options, {
      selector: selector
    }));
    delete style[prop];
  }
}

/**
 * Convert nested rules to separate, remove them from original styles.
 *
 * @param {Rule} rule
 * @api public
 */
function jssGlobal() {
  function onCreateRule(name, styles, options) {
    if (name === propKey) {
      return new GlobalContainerRule(name, styles, options);
    }

    if (name[0] === '@' && name.substr(0, prefixKey.length) === prefixKey) {
      return new GlobalPrefixedRule(name, styles, options);
    }

    var parent = options.parent;


    if (parent) {
      if (parent.type === 'global' || parent.options.parent.type === 'global') {
        options.global = true;
      }
    }

    if (options.global) options.selector = name;

    return null;
  }

  function onProcessRule(rule) {
    if (rule.type !== 'style') return;

    handleNestedGlobalContainerRule(rule);
    handlePrefixedGlobalRule(rule);
  }

  return { onCreateRule: onCreateRule, onProcessRule: onProcessRule };
}
});

var jssGlobal = unwrapExports(lib$1);

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning$2 = function() {};

var browser$3 = warning$2;

var lib$2 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = jssNested;



var _warning2 = _interopRequireDefault(browser$3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var separatorRegExp = /\s*,\s*/g;
var parentRegExp = /&/g;
var refRegExp = /\$([\w-]+)/g;

/**
 * Convert nested rules to separate, remove them from original styles.
 *
 * @param {Rule} rule
 * @api public
 */
function jssNested() {
  // Get a function to be used for $ref replacement.
  function getReplaceRef(container) {
    return function (match, key) {
      var rule = container.getRule(key);
      if (rule) return rule.selector;
      (0, _warning2.default)(false, '[JSS] Could not find the referenced rule %s in %s.', key, container.options.meta || container);
      return key;
    };
  }

  var hasAnd = function hasAnd(str) {
    return str.indexOf('&') !== -1;
  };

  function replaceParentRefs(nestedProp, parentProp) {
    var parentSelectors = parentProp.split(separatorRegExp);
    var nestedSelectors = nestedProp.split(separatorRegExp);

    var result = '';

    for (var i = 0; i < parentSelectors.length; i++) {
      var parent = parentSelectors[i];

      for (var j = 0; j < nestedSelectors.length; j++) {
        var nested = nestedSelectors[j];
        if (result) result += ', ';
        // Replace all & by the parent or prefix & with the parent.
        result += hasAnd(nested) ? nested.replace(parentRegExp, parent) : parent + ' ' + nested;
      }
    }

    return result;
  }

  function getOptions(rule, container, options) {
    // Options has been already created, now we only increase index.
    if (options) return _extends({}, options, { index: options.index + 1 });

    var nestingLevel = rule.options.nestingLevel;

    nestingLevel = nestingLevel === undefined ? 1 : nestingLevel + 1;

    return _extends({}, rule.options, {
      nestingLevel: nestingLevel,
      index: container.indexOf(rule) + 1
    });
  }

  function onProcessStyle(style, rule) {
    if (rule.type !== 'style') return style;
    var container = rule.options.parent;
    var options = void 0;
    var replaceRef = void 0;
    for (var prop in style) {
      var isNested = hasAnd(prop);
      var isNestedConditional = prop[0] === '@';

      if (!isNested && !isNestedConditional) continue;

      options = getOptions(rule, container, options);

      if (isNested) {
        var selector = replaceParentRefs(prop, rule.selector
        // Lazily create the ref replacer function just once for
        // all nested rules within the sheet.
        );if (!replaceRef) replaceRef = getReplaceRef(container
        // Replace all $refs.
        );selector = selector.replace(refRegExp, replaceRef);

        container.addRule(selector, style[prop], _extends({}, options, { selector: selector }));
      } else if (isNestedConditional) {
        container
        // Place conditional right after the parent rule to ensure right ordering.
        .addRule(prop, null, options).addRule(rule.key, style[prop], { selector: rule.selector });
      }

      delete style[prop];
    }

    return style;
  }

  return { onProcessStyle: onProcessStyle };
}
});

var jssNested = unwrapExports(lib$2);

var uppercasePattern = /[A-Z]/g;
var msPattern = /^ms-/;
var cache = {};

function hyphenateStyleName(string) {
    return string in cache
    ? cache[string]
    : cache[string] = string
      .replace(uppercasePattern, '-$&')
      .toLowerCase()
      .replace(msPattern, '-ms-');
}

var hyphenateStyleName_1 = hyphenateStyleName;

var lib$3 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports['default'] = camelCase;



var _hyphenateStyleName2 = _interopRequireDefault(hyphenateStyleName_1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/**
 * Convert camel cased property names to dash separated.
 *
 * @param {Object} style
 * @return {Object}
 */
function convertCase(style) {
  var converted = {};

  for (var prop in style) {
    converted[(0, _hyphenateStyleName2['default'])(prop)] = style[prop];
  }

  if (style.fallbacks) {
    if (Array.isArray(style.fallbacks)) converted.fallbacks = style.fallbacks.map(convertCase);else converted.fallbacks = convertCase(style.fallbacks);
  }

  return converted;
}

/**
 * Allow camel cased property names by converting them back to dasherized.
 *
 * @param {Rule} rule
 */
function camelCase() {
  function onProcessStyle(style) {
    if (Array.isArray(style)) {
      // Handle rules like @font-face, which can have multiple styles in an array
      for (var index = 0; index < style.length; index++) {
        style[index] = convertCase(style[index]);
      }
      return style;
    }

    return convertCase(style);
  }

  function onChangeValue(value, prop, rule) {
    var hyphenatedProp = (0, _hyphenateStyleName2['default'])(prop);

    // There was no camel case in place
    if (prop === hyphenatedProp) return value;

    rule.prop(hyphenatedProp, value);

    // Core will ignore that property value we set the proper one above.
    return null;
  }

  return { onProcessStyle: onProcessStyle, onChangeValue: onChangeValue };
}
});

var jssCamelCase = unwrapExports(lib$3);

var defaultUnits = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * Generated jss-default-unit CSS property units
 *
 * @type object
 */
exports['default'] = {
  'animation-delay': 'ms',
  'animation-duration': 'ms',
  'background-position': 'px',
  'background-position-x': 'px',
  'background-position-y': 'px',
  'background-size': 'px',
  border: 'px',
  'border-bottom': 'px',
  'border-bottom-left-radius': 'px',
  'border-bottom-right-radius': 'px',
  'border-bottom-width': 'px',
  'border-left': 'px',
  'border-left-width': 'px',
  'border-radius': 'px',
  'border-right': 'px',
  'border-right-width': 'px',
  'border-spacing': 'px',
  'border-top': 'px',
  'border-top-left-radius': 'px',
  'border-top-right-radius': 'px',
  'border-top-width': 'px',
  'border-width': 'px',
  'border-after-width': 'px',
  'border-before-width': 'px',
  'border-end-width': 'px',
  'border-horizontal-spacing': 'px',
  'border-start-width': 'px',
  'border-vertical-spacing': 'px',
  bottom: 'px',
  'box-shadow': 'px',
  'column-gap': 'px',
  'column-rule': 'px',
  'column-rule-width': 'px',
  'column-width': 'px',
  'flex-basis': 'px',
  'font-size': 'px',
  'font-size-delta': 'px',
  height: 'px',
  left: 'px',
  'letter-spacing': 'px',
  'logical-height': 'px',
  'logical-width': 'px',
  margin: 'px',
  'margin-after': 'px',
  'margin-before': 'px',
  'margin-bottom': 'px',
  'margin-left': 'px',
  'margin-right': 'px',
  'margin-top': 'px',
  'max-height': 'px',
  'max-width': 'px',
  'margin-end': 'px',
  'margin-start': 'px',
  'mask-position-x': 'px',
  'mask-position-y': 'px',
  'mask-size': 'px',
  'max-logical-height': 'px',
  'max-logical-width': 'px',
  'min-height': 'px',
  'min-width': 'px',
  'min-logical-height': 'px',
  'min-logical-width': 'px',
  motion: 'px',
  'motion-offset': 'px',
  outline: 'px',
  'outline-offset': 'px',
  'outline-width': 'px',
  padding: 'px',
  'padding-bottom': 'px',
  'padding-left': 'px',
  'padding-right': 'px',
  'padding-top': 'px',
  'padding-after': 'px',
  'padding-before': 'px',
  'padding-end': 'px',
  'padding-start': 'px',
  'perspective-origin-x': '%',
  'perspective-origin-y': '%',
  perspective: 'px',
  right: 'px',
  'shape-margin': 'px',
  size: 'px',
  'text-indent': 'px',
  'text-stroke': 'px',
  'text-stroke-width': 'px',
  top: 'px',
  'transform-origin': '%',
  'transform-origin-x': '%',
  'transform-origin-y': '%',
  'transform-origin-z': '%',
  'transition-delay': 'ms',
  'transition-duration': 'ms',
  'vertical-align': 'px',
  width: 'px',
  'word-spacing': 'px',
  // Not existing properties.
  // Used to avoid issues with jss-expand intergration.
  'box-shadow-x': 'px',
  'box-shadow-y': 'px',
  'box-shadow-blur': 'px',
  'box-shadow-spread': 'px',
  'font-line-height': 'px',
  'text-shadow-x': 'px',
  'text-shadow-y': 'px',
  'text-shadow-blur': 'px'
};
});

unwrapExports(defaultUnits);

var lib$4 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports['default'] = defaultUnit;



var _defaultUnits2 = _interopRequireDefault(defaultUnits);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/**
 * Clones the object and adds a camel cased property version.
 */
function addCamelCasedVersion(obj) {
  var regExp = /(-[a-z])/g;
  var replace = function replace(str) {
    return str[1].toUpperCase();
  };
  var newObj = {};
  for (var key in obj) {
    newObj[key] = obj[key];
    newObj[key.replace(regExp, replace)] = obj[key];
  }
  return newObj;
}

var units = addCamelCasedVersion(_defaultUnits2['default']);

/**
 * Recursive deep style passing function
 *
 * @param {String} current property
 * @param {(Object|Array|Number|String)} property value
 * @param {Object} options
 * @return {(Object|Array|Number|String)} resulting value
 */
function iterate(prop, value, options) {
  if (!value) return value;

  var convertedValue = value;

  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
  if (type === 'object' && Array.isArray(value)) type = 'array';

  switch (type) {
    case 'object':
      if (prop === 'fallbacks') {
        for (var innerProp in value) {
          value[innerProp] = iterate(innerProp, value[innerProp], options);
        }
        break;
      }
      for (var _innerProp in value) {
        value[_innerProp] = iterate(prop + '-' + _innerProp, value[_innerProp], options);
      }
      break;
    case 'array':
      for (var i = 0; i < value.length; i++) {
        value[i] = iterate(prop, value[i], options);
      }
      break;
    case 'number':
      if (value !== 0) {
        convertedValue = value + (options[prop] || units[prop] || '');
      }
      break;
    default:
      break;
  }

  return convertedValue;
}

/**
 * Add unit to numeric values.
 */
function defaultUnit() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var camelCasedOptions = addCamelCasedVersion(options);

  function onProcessStyle(style, rule) {
    if (rule.type !== 'style') return style;

    for (var prop in style) {
      style[prop] = iterate(prop, style[prop], camelCasedOptions);
    }

    return style;
  }

  function onChangeValue(value, prop) {
    return iterate(prop, value, camelCasedOptions);
  }

  return { onProcessStyle: onProcessStyle, onChangeValue: onChangeValue };
}
});

var jssDefaultUnit = unwrapExports(lib$4);

var prefix = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});



var _isInBrowser2 = _interopRequireDefault(isBrowser);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var js = ''; /**
              * Export javascript style and css style vendor prefixes.
              * Based on "transform" support test.
              */

var css = '';

// We should not do anything if required serverside.
if (_isInBrowser2['default']) {
  // Order matters. We need to check Webkit the last one because
  // other vendors use to add Webkit prefixes to some properties
  var jsCssMap = {
    Moz: '-moz-',
    // IE did it wrong again ...
    ms: '-ms-',
    O: '-o-',
    Webkit: '-webkit-'
  };
  var style = document.createElement('p').style;
  var testProp = 'Transform';

  for (var key in jsCssMap) {
    if (key + testProp in style) {
      js = key;
      css = jsCssMap[key];
      break;
    }
  }
}

/**
 * Vendor prefix string for the current browser.
 *
 * @type {{js: String, css: String}}
 * @api public
 */
exports['default'] = { js: js, css: css };
});

unwrapExports(prefix);

var camelize_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports['default'] = camelize;
var regExp = /[-\s]+(.)?/g;

/**
 * Convert dash separated strings to camel cased.
 *
 * @param {String} str
 * @return {String}
 */
function camelize(str) {
  return str.replace(regExp, toUpper);
}

function toUpper(match, c) {
  return c ? c.toUpperCase() : '';
}
});

unwrapExports(camelize_1);

var supportedProperty_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports['default'] = supportedProperty;



var _isInBrowser2 = _interopRequireDefault(isBrowser);



var _prefix2 = _interopRequireDefault(prefix);



var _camelize2 = _interopRequireDefault(camelize_1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var el = void 0;
var cache = {};

if (_isInBrowser2['default']) {
  el = document.createElement('p');

  /**
   * We test every property on vendor prefix requirement.
   * Once tested, result is cached. It gives us up to 70% perf boost.
   * http://jsperf.com/element-style-object-access-vs-plain-object
   *
   * Prefill cache with known css properties to reduce amount of
   * properties we need to feature test at runtime.
   * http://davidwalsh.name/vendor-prefix
   */
  var computed = window.getComputedStyle(document.documentElement, '');
  for (var key in computed) {
    if (!isNaN(key)) cache[computed[key]] = computed[key];
  }
}

/**
 * Test if a property is supported, returns supported property with vendor
 * prefix if required. Returns `false` if not supported.
 *
 * @param {String} prop dash separated
 * @return {String|Boolean}
 * @api public
 */
function supportedProperty(prop) {
  // For server-side rendering.
  if (!el) return prop;

  // We have not tested this prop yet, lets do the test.
  if (cache[prop] != null) return cache[prop];

  // Camelization is required because we can't test using
  // css syntax for e.g. in FF.
  // Test if property is supported as it is.
  if ((0, _camelize2['default'])(prop) in el.style) {
    cache[prop] = prop;
  }
  // Test if property is supported with vendor prefix.
  else if (_prefix2['default'].js + (0, _camelize2['default'])('-' + prop) in el.style) {
      cache[prop] = _prefix2['default'].css + prop;
    } else {
      cache[prop] = false;
    }

  return cache[prop];
}
});

unwrapExports(supportedProperty_1);

var supportedValue_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports['default'] = supportedValue;



var _isInBrowser2 = _interopRequireDefault(isBrowser);



var _prefix2 = _interopRequireDefault(prefix);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var cache = {};
var el = void 0;

if (_isInBrowser2['default']) el = document.createElement('p');

/**
 * Returns prefixed value if needed. Returns `false` if value is not supported.
 *
 * @param {String} property
 * @param {String} value
 * @return {String|Boolean}
 * @api public
 */
function supportedValue(property, value) {
  // For server-side rendering.
  if (!el) return value;

  // It is a string or a number as a string like '1'.
  // We want only prefixable values here.
  if (typeof value !== 'string' || !isNaN(parseInt(value, 10))) return value;

  var cacheKey = property + value;

  if (cache[cacheKey] != null) return cache[cacheKey];

  // IE can even throw an error in some cases, for e.g. style.content = 'bar'
  try {
    // Test value as it is.
    el.style[property] = value;
  } catch (err) {
    cache[cacheKey] = false;
    return false;
  }

  // Value is supported as it is.
  if (el.style[property] !== '') {
    cache[cacheKey] = value;
  } else {
    // Test value with vendor prefix.
    value = _prefix2['default'].css + value;

    // Hardcode test to convert "flex" to "-ms-flexbox" for IE10.
    if (value === '-ms-flex') value = '-ms-flexbox';

    el.style[property] = value;

    // Value is supported with vendor prefix.
    if (el.style[property] !== '') cache[cacheKey] = value;
  }

  if (!cache[cacheKey]) cache[cacheKey] = false;

  // Reset style value.
  el.style[property] = '';

  return cache[cacheKey];
}
});

unwrapExports(supportedValue_1);

var lib$5 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.supportedValue = exports.supportedProperty = exports.prefix = undefined;



var _prefix2 = _interopRequireDefault(prefix);



var _supportedProperty2 = _interopRequireDefault(supportedProperty_1);



var _supportedValue2 = _interopRequireDefault(supportedValue_1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

exports['default'] = {
  prefix: _prefix2['default'],
  supportedProperty: _supportedProperty2['default'],
  supportedValue: _supportedValue2['default']
}; /**
    * CSS Vendor prefix detection and property feature testing.
    *
    * @copyright Oleg Slobodskoi 2015
    * @website https://github.com/jsstyles/css-vendor
    * @license MIT
    */

exports.prefix = _prefix2['default'];
exports.supportedProperty = _supportedProperty2['default'];
exports.supportedValue = _supportedValue2['default'];
});

unwrapExports(lib$5);
var lib_1$1 = lib$5.supportedValue;
var lib_2$1 = lib$5.supportedProperty;
var lib_3$1 = lib$5.prefix;

var lib$6 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports['default'] = jssVendorPrefixer;



var vendor = _interopRequireWildcard(lib$5);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

/**
 * Add vendor prefix to a property name when needed.
 *
 * @param {Rule} rule
 * @api public
 */
function jssVendorPrefixer() {
  function onProcessRule(rule) {
    if (rule.type === 'keyframes') {
      rule.key = '@' + vendor.prefix.css + rule.key.substr(1);
    }
  }

  function onProcessStyle(style, rule) {
    if (rule.type !== 'style') return style;

    for (var prop in style) {
      var value = style[prop];

      var changeProp = false;
      var supportedProp = vendor.supportedProperty(prop);
      if (supportedProp && supportedProp !== prop) changeProp = true;

      var changeValue = false;
      var supportedValue = vendor.supportedValue(supportedProp, value);
      if (supportedValue && supportedValue !== value) changeValue = true;

      if (changeProp || changeValue) {
        if (changeProp) delete style[prop];
        style[supportedProp || prop] = supportedValue || value;
      }
    }

    return style;
  }

  function onChangeValue(value, prop) {
    return vendor.supportedValue(prop, value);
  }

  return { onProcessRule: onProcessRule, onProcessStyle: onProcessStyle, onChangeValue: onChangeValue };
}
});

var jssVendorPrefixer = unwrapExports(lib$6);

var lib$7 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports['default'] = jssPropsSort;
/**
 * Sort props by length.
 */
function jssPropsSort() {
  function sort(prop0, prop1) {
    return prop0.length - prop1.length;
  }

  function onProcessStyle(style, rule) {
    if (rule.type !== 'style') return style;

    var newStyle = {};
    var props = Object.keys(style).sort(sort);
    for (var prop in props) {
      newStyle[props[prop]] = style[props[prop]];
    }
    return newStyle;
  }

  return { onProcessStyle: onProcessStyle };
}
});

var jssPropsSort = unwrapExports(lib$7);

// Subset of jss-preset-default with only the plugins the Material-UI components are using.
function jssPreset() {
  return {
    plugins: [
    jssGlobal(),
    jssNested(),
    jssCamelCase(),
    jssDefaultUnit(),
    // Disable the vendor prefixer server-side, it does nothing.
    // This way, we can get a performance boost.
    // In the documentation, we are using `autoprefixer` to solve this problem.
    typeof window === 'undefined' ? null : jssVendorPrefixer(),
    jssPropsSort()] };


}

function emptyFunction() {}

var factoryWithThrowingShims = function() {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret_1) {
      // It is still safe when called from React.
      return;
    }
    var err = new Error(
      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
      'Use PropTypes.checkPropTypes() to call them. ' +
      'Read more at http://fb.me/use-check-prop-types'
    );
    err.name = 'Invariant Violation';
    throw err;
  }  shim.isRequired = shim;
  function getShim() {
    return shim;
  }  // Important!
  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
  var ReactPropTypes = {
    array: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,

    any: shim,
    arrayOf: getShim,
    element: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim
  };

  ReactPropTypes.checkPropTypes = emptyFunction;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

var propTypes = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

{
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  module.exports = factoryWithThrowingShims();
}
});

function createBroadcast (initialState) {
  var listeners = {};
  var id = 1;
  var _state = initialState;

  function getState () {
    return _state
  }

  function setState (state) {
    _state = state;
    var keys = Object.keys(listeners);
    var i = 0;
    var len = keys.length;
    for (; i < len; i++) {
      // if a listener gets unsubscribed during setState we just skip it
      if (listeners[keys[i]]) { listeners[keys[i]](state); }
    }
  }

  // subscribe to changes and return the subscriptionId
  function subscribe (listener) {
    if (typeof listener !== 'function') {
      throw new Error('listener must be a function.')
    }
    var currentId = id;
    listeners[currentId] = listener;
    id += 1;
    return currentId
  }

  // remove subscription by removing the listener function
  function unsubscribe (id) {
    listeners[id] = undefined;
  }

  return { getState: getState, setState: setState, subscribe: subscribe, unsubscribe: unsubscribe }
}

var CHANNEL = '__THEMING__';

var themeListener = {
  contextTypes: defineProperty({},
  CHANNEL, function () {}),

  initial: function initial(context) {
    if (!context[CHANNEL]) {
      return null;
    }

    return context[CHANNEL].getState();
  },
  subscribe: function subscribe(context, cb) {
    if (!context[CHANNEL]) {
      return null;
    }

    return context[CHANNEL].subscribe(cb);
  },
  unsubscribe: function unsubscribe(context, subscriptionId) {
    if (context[CHANNEL]) {
      context[CHANNEL].unsubscribe(subscriptionId);
    }
  } };

/**
                                                           * This component takes a `theme` property.
                                                           * It makes the `theme` available down the React tree thanks to React context.
                                                           * This component should preferably be used at **the root of your component tree**.
                                                           */
var MuiThemeProviderOld = /*#__PURE__*/function (_React$Component) {inherits(MuiThemeProviderOld, _React$Component);


  // We are not using the React state in order to avoid unnecessary rerender.
  function MuiThemeProviderOld(props, context) {var _this;classCallCheck(this, MuiThemeProviderOld);
    _this = possibleConstructorReturn(this, getPrototypeOf(MuiThemeProviderOld).call(this));
    // Get the outer theme from the context, can be null
    defineProperty(assertThisInitialized(assertThisInitialized(_this)), "broadcast", createBroadcast());_this.outerTheme = themeListener.initial(context);
    // Propagate the theme so it can be accessed by the children
    _this.broadcast.setState(_this.mergeOuterLocalTheme(props.theme));return _this;
  }createClass(MuiThemeProviderOld, [{ key: "getChildContext", value: function getChildContext()

    {var _ref;var _this$props =
      this.props,disableStylesGeneration = _this$props.disableStylesGeneration,sheetsCache = _this$props.sheetsCache,sheetsManager = _this$props.sheetsManager;
      var muiThemeProviderOptions = this.context.muiThemeProviderOptions || {};

      if (disableStylesGeneration !== undefined) {
        muiThemeProviderOptions.disableStylesGeneration = disableStylesGeneration;
      }

      if (sheetsCache !== undefined) {
        muiThemeProviderOptions.sheetsCache = sheetsCache;
      }

      if (sheetsManager !== undefined) {
        muiThemeProviderOptions.sheetsManager = sheetsManager;
      }

      return _ref = {}, defineProperty(_ref,
      CHANNEL, this.broadcast), defineProperty(_ref, "muiThemeProviderOptions",
      muiThemeProviderOptions), _ref;

    } }, { key: "componentDidMount", value: function componentDidMount()

    {var _this2 = this;
      // Subscribe on the outer theme, if present
      this.unsubscribeId = themeListener.subscribe(this.context, function (outerTheme) {
        _this2.outerTheme = outerTheme;
        // Forward the parent theme update to the children
        _this2.broadcast.setState(_this2.mergeOuterLocalTheme(_this2.props.theme));
      });
    } }, { key: "componentDidUpdate", value: function componentDidUpdate(

    prevProps) {
      // Propagate a local theme update
      if (this.props.theme !== prevProps.theme) {
        this.broadcast.setState(this.mergeOuterLocalTheme(this.props.theme));
      }
    } }, { key: "componentWillUnmount", value: function componentWillUnmount()

    {
      if (this.unsubscribeId !== null) {
        themeListener.unsubscribe(this.context, this.unsubscribeId);
      }
    }

    // Simple merge between the outer theme and the local theme
  }, { key: "mergeOuterLocalTheme", value: function mergeOuterLocalTheme(localTheme) {
      // To support composition of theme.
      if (typeof localTheme === 'function') {
        warning_1(
        this.outerTheme,
        [
        'Material-UI: you are providing a theme function property ' +
        'to the MuiThemeProvider component:',
        '<MuiThemeProvider theme={outerTheme => outerTheme} />',
        'However, no outer theme is present.',
        'Make sure a theme is already injected higher in the React tree ' +
        'or provide a theme object.'].
        join('\n'));

        return localTheme(this.outerTheme);
      }

      if (!this.outerTheme) {
        return localTheme;
      }

      return objectSpread({}, this.outerTheme, localTheme);
    } }, { key: "render", value: function render()

    {
      // TODO move the sheetsManager property to a different component.
      // warning(
      //   typeof window !== 'undefined' || this.props.sheetsManager,
      //   [
      //     'Material-UI: you need to provide a sheetsManager to the MuiThemeProvider ' +
      //       'when rendering on the server.',
      //     'If you do not, you might experience a memory leak',
      //   ].join('\n'),
      // );
      return this.props.children;
    } }]);return MuiThemeProviderOld;}(react.Component);


MuiThemeProviderOld.propTypes = {
  /**
                                   * You can wrap a node.
                                   */
  children: propTypes.node.isRequired,
  /**
                                        * You can disable the generation of the styles with this option.
                                        * It can be useful when traversing the React tree outside of the HTML
                                        * rendering step on the server.
                                        * Let's say you are using react-apollo to extract all
                                        * the queries made by the interface server side.
                                        * You can significantly speed up the traversal with this property.
                                        */
  disableStylesGeneration: propTypes.bool,
  /**
                                            * @ignore
                                            *
                                            * In beta.
                                            */
  sheetsCache: propTypes.object,
  /**
                                  * The sheetsManager is used to deduplicate style sheet injection in the page.
                                  * It's deduplicating using the (theme, styles) couple.
                                  * On the server, you should provide a new instance for each request.
                                  */
  sheetsManager: propTypes.object,
  /**
                                    * A theme object.
                                    */
  theme: propTypes.oneOfType([propTypes.object, propTypes.func]).isRequired };


MuiThemeProviderOld.propTypes = exactProp(MuiThemeProviderOld.propTypes);

MuiThemeProviderOld.childContextTypes = objectSpread({},
themeListener.contextTypes, {
  muiThemeProviderOptions: propTypes.object });


MuiThemeProviderOld.contextTypes = objectSpread({},
themeListener.contextTypes, {
  muiThemeProviderOptions: propTypes.object });


/* istanbul ignore if */
if (!ponyfillGlobal$1.__MUI_STYLES__) {
  ponyfillGlobal$1.__MUI_STYLES__ = {};
}

if (!ponyfillGlobal$1.__MUI_STYLES__.MuiThemeProvider) {
  ponyfillGlobal$1.__MUI_STYLES__.MuiThemeProvider = MuiThemeProviderOld;
}

ponyfillGlobal$1.__MUI_STYLES__.MuiThemeProvider;

var reactIs_production_min = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports,"__esModule",{value:!0});
var b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,r=b?Symbol.for("react.memo"):
60115,t=b?Symbol.for("react.lazy"):60116;function u(a){if("object"===typeof a&&null!==a){var q=a.$$typeof;switch(q){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case h:return a;default:return q}}case d:return q}}}function v(a){return u(a)===m}exports.typeOf=u;exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;exports.Fragment=e;
exports.Profiler=g;exports.Portal=d;exports.StrictMode=f;exports.isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n)};exports.isAsyncMode=function(a){return v(a)||u(a)===l};exports.isConcurrentMode=v;exports.isContextConsumer=function(a){return u(a)===k};exports.isContextProvider=function(a){return u(a)===h};
exports.isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return u(a)===n};exports.isFragment=function(a){return u(a)===e};exports.isProfiler=function(a){return u(a)===g};exports.isPortal=function(a){return u(a)===d};exports.isStrictMode=function(a){return u(a)===f};
});

unwrapExports(reactIs_production_min);
var reactIs_production_min_1 = reactIs_production_min.typeOf;
var reactIs_production_min_2 = reactIs_production_min.AsyncMode;
var reactIs_production_min_3 = reactIs_production_min.ConcurrentMode;
var reactIs_production_min_4 = reactIs_production_min.ContextConsumer;
var reactIs_production_min_5 = reactIs_production_min.ContextProvider;
var reactIs_production_min_6 = reactIs_production_min.Element;
var reactIs_production_min_7 = reactIs_production_min.ForwardRef;
var reactIs_production_min_8 = reactIs_production_min.Fragment;
var reactIs_production_min_9 = reactIs_production_min.Profiler;
var reactIs_production_min_10 = reactIs_production_min.Portal;
var reactIs_production_min_11 = reactIs_production_min.StrictMode;
var reactIs_production_min_12 = reactIs_production_min.isValidElementType;
var reactIs_production_min_13 = reactIs_production_min.isAsyncMode;
var reactIs_production_min_14 = reactIs_production_min.isConcurrentMode;
var reactIs_production_min_15 = reactIs_production_min.isContextConsumer;
var reactIs_production_min_16 = reactIs_production_min.isContextProvider;
var reactIs_production_min_17 = reactIs_production_min.isElement;
var reactIs_production_min_18 = reactIs_production_min.isForwardRef;
var reactIs_production_min_19 = reactIs_production_min.isFragment;
var reactIs_production_min_20 = reactIs_production_min.isProfiler;
var reactIs_production_min_21 = reactIs_production_min.isPortal;
var reactIs_production_min_22 = reactIs_production_min.isStrictMode;

var reactIs_development = createCommonjsModule(function (module, exports) {
});

unwrapExports(reactIs_development);
var reactIs_development_1 = reactIs_development.typeOf;
var reactIs_development_2 = reactIs_development.AsyncMode;
var reactIs_development_3 = reactIs_development.ConcurrentMode;
var reactIs_development_4 = reactIs_development.ContextConsumer;
var reactIs_development_5 = reactIs_development.ContextProvider;
var reactIs_development_6 = reactIs_development.Element;
var reactIs_development_7 = reactIs_development.ForwardRef;
var reactIs_development_8 = reactIs_development.Fragment;
var reactIs_development_9 = reactIs_development.Profiler;
var reactIs_development_10 = reactIs_development.Portal;
var reactIs_development_11 = reactIs_development.StrictMode;
var reactIs_development_12 = reactIs_development.isValidElementType;
var reactIs_development_13 = reactIs_development.isAsyncMode;
var reactIs_development_14 = reactIs_development.isConcurrentMode;
var reactIs_development_15 = reactIs_development.isContextConsumer;
var reactIs_development_16 = reactIs_development.isContextProvider;
var reactIs_development_17 = reactIs_development.isElement;
var reactIs_development_18 = reactIs_development.isForwardRef;
var reactIs_development_19 = reactIs_development.isFragment;
var reactIs_development_20 = reactIs_development.isProfiler;
var reactIs_development_21 = reactIs_development.isPortal;
var reactIs_development_22 = reactIs_development.isStrictMode;

var reactIs = createCommonjsModule(function (module) {

{
  module.exports = reactIs_production_min;
}
});
var reactIs_1 = reactIs.isElement;
var reactIs_2 = reactIs.isValidElementType;
var reactIs_3 = reactIs.ForwardRef;

/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */

var REACT_STATICS = {
    childContextTypes: true,
    contextType: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    getDerivedStateFromError: true,
    getDerivedStateFromProps: true,
    mixins: true,
    propTypes: true,
    type: true
};

var KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    callee: true,
    arguments: true,
    arity: true
};

var FORWARD_REF_STATICS = {
    '$$typeof': true,
    render: true
};

var TYPE_STATICS = {};
TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;

var defineProperty$1 = Object.defineProperty;
var getOwnPropertyNames = Object.getOwnPropertyNames;
var getOwnPropertySymbols$1 = Object.getOwnPropertySymbols;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var getPrototypeOf$1 = Object.getPrototypeOf;
var objectPrototype = Object.prototype;

function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
    if (typeof sourceComponent !== 'string') {
        // don't hoist over string (html) components

        if (objectPrototype) {
            var inheritedComponent = getPrototypeOf$1(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) {
                hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
            }
        }

        var keys = getOwnPropertyNames(sourceComponent);

        if (getOwnPropertySymbols$1) {
            keys = keys.concat(getOwnPropertySymbols$1(sourceComponent));
        }

        var targetStatics = TYPE_STATICS[targetComponent['$$typeof']] || REACT_STATICS;
        var sourceStatics = TYPE_STATICS[sourceComponent['$$typeof']] || REACT_STATICS;

        for (var i = 0; i < keys.length; ++i) {
            var key = keys[i];
            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
                var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
                try {
                    // Avoid failures from read-only properties
                    defineProperty$1(targetComponent, key, descriptor);
                } catch (e) {}
            }
        }

        return targetComponent;
    }

    return targetComponent;
}

var hoistNonReactStatics_cjs = hoistNonReactStatics;

// Share the same values than in
// https://github.com/cssinjs/jss/blob/master/packages/react-jss/src/ns.js
var ns = {
  jss: '64a55d578f856d258dc345b094a2a2b3',
  sheetsRegistry: 'd4bd0baacbc52bbd48bbb9eb24344ecd',
  sheetOptions: '6fc570d6bd61383819d0f9e7407c452d' };

function mergeClasses() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};var
  baseClasses = options.baseClasses,newClasses = options.newClasses,Component = options.Component;

  if (!newClasses) {
    return baseClasses;
  }

  var nextClasses = objectSpread({}, baseClasses);

  Object.keys(newClasses).forEach(function (key) {
    if (Component) {
      warning_1(
      baseClasses[key] || !newClasses[key],
      [
      "Material-UI: the key `".concat(key, "` ") + "provided to the classes property is not implemented in ".concat(
      getDisplayName(Component), "."), "You can only override one of the following: ".concat(
      Object.keys(baseClasses).join(','), ".")].
      join('\n'));


      warning_1(
      !newClasses[key] || typeof newClasses[key] === 'string',
      [
      "Material-UI: the key `".concat(key, "` ") + "provided to the classes property is not valid for ".concat(
      getDisplayName(Component), "."), "You need to provide a non empty string instead of: ".concat(
      newClasses[key], ".")].
      join('\n'));

    }

    if (newClasses[key]) {
      nextClasses[key] = "".concat(baseClasses[key], " ").concat(newClasses[key]);
    }
  });

  return nextClasses;
}

// Used https://github.com/thinkloop/multi-key-cache as inspiration

var multiKeyStore = {
  set: function set(cache, key1, key2, value) {
    var subCache = cache.get(key1);

    if (!subCache) {
      subCache = new Map();
      cache.set(key1, subCache);
    }

    subCache.set(key2, value);
  },
  get: function get(cache, key1, key2) {
    var subCache = cache.get(key1);
    return subCache ? subCache.get(key2) : undefined;
  },
  delete: function _delete(cache, key1, key2) {
    var subCache = cache.get(key1);
    subCache.delete(key2);
  } };

// Support for the jss-expand plugin.
function arrayMerge(destination, source) {
  return source;
}

function getStylesCreator(stylesOrCreator) {
  var themingEnabled = typeof stylesOrCreator === 'function';

  warning_1(
  _typeof_1(stylesOrCreator) === 'object' || themingEnabled,
  [
  'Material-UI: the first argument provided to withStyles() is invalid.',
  'You need to provide a function generating the styles or a styles object.'].
  join('\n'));


  function create(theme, name) {
    var styles = themingEnabled ? stylesOrCreator(theme) : stylesOrCreator;

    if (!name || !theme.overrides || !theme.overrides[name]) {
      return styles;
    }

    var overrides = theme.overrides[name];
    var stylesWithOverrides = objectSpread({}, styles);

    Object.keys(overrides).forEach(function (key) {
      warning_1(
      stylesWithOverrides[key],
      [
      'Material-UI: you are trying to override a style that does not exist.', "Fix the `".concat(
      key, "` key of `theme.overrides.").concat(name, "`.")].
      join('\n'));

      stylesWithOverrides[key] = deepmerge_1(stylesWithOverrides[key], overrides[key], {
        arrayMerge: arrayMerge });

    });

    return stylesWithOverrides;
  }

  return {
    create: create,
    options: {},
    themingEnabled: themingEnabled };

}

/* eslint-disable no-restricted-syntax */

function getThemeProps(params) {var
  theme = params.theme,name = params.name,props = params.props;

  if (!theme.props || !name || !theme.props[name]) {
    return props;
  }

  // Resolve default props, code borrow from React source.
  // https://github.com/facebook/react/blob/15a8f031838a553e41c0b66eb1bcf1da8448104d/packages/react/src/ReactElement.js#L221
  var defaultProps = theme.props[name];
  var propName;

  for (propName in defaultProps) {
    if (props[propName] === undefined) {
      props[propName] = defaultProps[propName];
    }
  }

  return props;
}

// Default JSS instance.
var jss = lib_1(jssPreset());

// Use a singleton or the provided one by the context.
//
// The counter-based approach doesn't tolerate any mistake.
// It's much safer to use the same counter everywhere.
var generateClassName = createGenerateClassName();

// Global index counter to preserve source order.
// We create the style sheet during at the creation of the component,
// children are handled after the parents, so the order of style elements would be parent->child.
// It is a problem though when a parent passes a className
// which needs to override any childs styles.
// StyleSheet of the child has a higher specificity, because of the source order.
// So our solution is to render sheets them in the reverse order child->sheet, so
// that parent has a higher specificity.
var indexCounter = -10e10;

// Exported for test purposes
var sheetsManager = new Map();

// We use the same empty object to ref count the styles that don't need a theme object.
var noopTheme = {};

// In order to have self-supporting components, we rely on default theme when not provided.
var defaultTheme;

function getDefaultTheme() {
  if (defaultTheme) {
    return defaultTheme;
  }

  defaultTheme = createMuiTheme({
    typography: {
      suppressWarning: true } });


  return defaultTheme;
}

ponyfillGlobal$1.__MUI_DEFAULT_THEME__ = getDefaultTheme();

// Link a style sheet with a component.
// It does not modify the component passed to it;
// instead, it returns a new component, with a `classes` property.
var withStylesOld = function withStylesOld(stylesOrCreator) {var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};return function (Component) {var _objectSpread2;var _options$withTheme =
    options.withTheme,withTheme = _options$withTheme === void 0 ? false : _options$withTheme,_options$flip = options.flip,flip = _options$flip === void 0 ? null : _options$flip,name = options.name,styleSheetOptions = objectWithoutProperties(options, ["withTheme", "flip", "name"]);
    var stylesCreator = getStylesCreator(stylesOrCreator);
    var listenToTheme = stylesCreator.themingEnabled || typeof name === 'string' || withTheme;

    indexCounter += 1;
    stylesCreator.options.index = indexCounter;

    warning_1(
    indexCounter < 0,
    [
    'Material-UI: you might have a memory leak.',
    'The indexCounter is not supposed to grow that much.'].
    join('\n'));var


    WithStyles = /*#__PURE__*/function (_React$Component) {inherits(WithStyles, _React$Component);
      function WithStyles(props, context) {var _this;classCallCheck(this, WithStyles);
        _this = possibleConstructorReturn(this, getPrototypeOf(WithStyles).call(this, props, context));
        _this.jss = context[ns.jss] || jss;
        _this.sheetsManager = sheetsManager;
        _this.unsubscribeId = null;var

        muiThemeProviderOptions = context.muiThemeProviderOptions;
        if (muiThemeProviderOptions) {
          if (muiThemeProviderOptions.sheetsManager) {
            _this.sheetsManager = muiThemeProviderOptions.sheetsManager;
          }
          _this.sheetsCache = muiThemeProviderOptions.sheetsCache;
          _this.disableStylesGeneration = muiThemeProviderOptions.disableStylesGeneration;
        }

        // Attach the stylesCreator to the instance of the component as in the context
        // of react-hot-loader the hooks can be executed in a different closure context:
        // https://github.com/gaearon/react-hot-loader/blob/master/src/patch.dev.js#L107
        _this.stylesCreatorSaved = stylesCreator;
        _this.sheetOptions = objectSpread({
          generateClassName: generateClassName },
        context[ns.sheetOptions]);

        // We use || as the function call is lazy evaluated.
        _this.theme = listenToTheme ? themeListener.initial(context) || getDefaultTheme() : noopTheme;

        _this.attach(_this.theme);

        _this.cacheClasses = {
          // Cache for the finalized classes value.
          value: null,
          // Cache for the last used classes prop pointer.
          lastProp: null,
          // Cache for the last used rendered classes pointer.
          lastJSS: {} };return _this;

      }createClass(WithStyles, [{ key: "componentDidMount", value: function componentDidMount()

        {var _this2 = this;
          if (!listenToTheme) {
            return;
          }

          this.unsubscribeId = themeListener.subscribe(this.context, function (theme) {
            var oldTheme = _this2.theme;
            _this2.theme = theme;
            _this2.attach(_this2.theme);

            // Rerender the component so the underlying component gets the theme update.
            // By theme update we mean receiving and applying the new class names.
            _this2.setState({}, function () {
              _this2.detach(oldTheme);
            });
          });
        } }, { key: "componentDidUpdate", value: function componentDidUpdate()

        {
          // react-hot-loader specific logic
          if (this.stylesCreatorSaved === stylesCreator || "production" === 'production') {
            return;
          }

          this.detach(this.theme);
          this.stylesCreatorSaved = stylesCreator;
          this.attach(this.theme);
          this.forceUpdate();
        } }, { key: "componentWillUnmount", value: function componentWillUnmount()

        {
          this.detach(this.theme);

          if (this.unsubscribeId !== null) {
            themeListener.unsubscribe(this.context, this.unsubscribeId);
          }
        } }, { key: "getClasses", value: function getClasses()

        {
          if (this.disableStylesGeneration) {
            return this.props.classes || {};
          }

          // Tracks if either the rendered classes or classes prop has changed,
          // requiring the generation of a new finalized classes object.
          var generate = false;

          var sheetManager = multiKeyStore.get(
          this.sheetsManager,
          this.stylesCreatorSaved,
          this.theme);

          if (sheetManager.sheet.classes !== this.cacheClasses.lastJSS) {
            this.cacheClasses.lastJSS = sheetManager.sheet.classes;
            generate = true;
          }
          if (this.props.classes !== this.cacheClasses.lastProp) {
            this.cacheClasses.lastProp = this.props.classes;
            generate = true;
          }

          if (generate) {
            this.cacheClasses.value = mergeClasses({
              baseClasses: this.cacheClasses.lastJSS,
              newClasses: this.props.classes,
              Component: Component });

          }

          return this.cacheClasses.value;
        } }, { key: "attach", value: function attach(

        theme) {
          if (this.disableStylesGeneration) {
            return;
          }

          var stylesCreatorSaved = this.stylesCreatorSaved;
          var sheetManager = multiKeyStore.get(this.sheetsManager, stylesCreatorSaved, theme);

          if (!sheetManager) {
            sheetManager = {
              refs: 0,
              sheet: null };

            multiKeyStore.set(this.sheetsManager, stylesCreatorSaved, theme, sheetManager);
          }

          if (sheetManager.refs === 0) {
            var sheet;

            if (this.sheetsCache) {
              sheet = multiKeyStore.get(this.sheetsCache, stylesCreatorSaved, theme);
            }

            if (!sheet) {
              sheet = this.createSheet(theme);
              sheet.attach();

              if (this.sheetsCache) {
                multiKeyStore.set(this.sheetsCache, stylesCreatorSaved, theme, sheet);
              }
            }

            sheetManager.sheet = sheet;

            var sheetsRegistry = this.context[ns.sheetsRegistry];
            if (sheetsRegistry) {
              sheetsRegistry.add(sheet);
            }
          }

          sheetManager.refs += 1;
        } }, { key: "createSheet", value: function createSheet(

        theme) {
          var styles = this.stylesCreatorSaved.create(theme, name);
          var meta = name;

          var sheet = this.jss.createStyleSheet(styles, objectSpread({
            meta: meta,
            classNamePrefix: meta,
            flip: typeof flip === 'boolean' ? flip : theme.direction === 'rtl',
            link: false },
          this.sheetOptions,
          this.stylesCreatorSaved.options, {
            name: name || Component.displayName },
          styleSheetOptions));


          return sheet;
        } }, { key: "detach", value: function detach(

        theme) {
          if (this.disableStylesGeneration) {
            return;
          }

          var sheetManager = multiKeyStore.get(this.sheetsManager, this.stylesCreatorSaved, theme);
          sheetManager.refs -= 1;

          if (sheetManager.refs === 0) {
            multiKeyStore.delete(this.sheetsManager, this.stylesCreatorSaved, theme);

            this.jss.removeStyleSheet(sheetManager.sheet);
            var sheetsRegistry = this.context[ns.sheetsRegistry];
            if (sheetsRegistry) {
              sheetsRegistry.remove(sheetManager.sheet);
            }
          }
        } }, { key: "render", value: function render()

        {var _this$props =
          this.props,classes = _this$props.classes,innerRef = _this$props.innerRef,other = objectWithoutProperties(_this$props, ["classes", "innerRef"]);

          var more = getThemeProps({ theme: this.theme, name: name, props: other });

          // Provide the theme to the wrapped component.
          // So we don't have to use the `withTheme()` Higher-order Component.
          if (withTheme && !more.theme) {
            more.theme = this.theme;
          }

          return react.createElement(Component, _extends_1({}, more, { classes: this.getClasses(), ref: innerRef }));
        } }]);return WithStyles;}(react.Component);


    WithStyles.propTypes = {
      /**
                              * Override or extend the styles applied to the component.
                              */
      classes: propTypes.object,
      /**
                                  * Use that property to pass a ref callback to the decorated component.
                                  */
      innerRef: propTypes.oneOfType([propTypes.func, propTypes.object]) };


    WithStyles.contextTypes = objectSpread((_objectSpread2 = {
      muiThemeProviderOptions: propTypes.object }, defineProperty(_objectSpread2,
    ns.jss, propTypes.object), defineProperty(_objectSpread2,
    ns.sheetOptions, propTypes.object), defineProperty(_objectSpread2,
    ns.sheetsRegistry, propTypes.object), _objectSpread2),
    listenToTheme ? themeListener.contextTypes : {});

    hoistNonReactStatics_cjs(WithStyles, Component);

    return WithStyles;
  };};

/* istanbul ignore if */
if (!ponyfillGlobal$1.__MUI_STYLES__) {
  ponyfillGlobal$1.__MUI_STYLES__ = {};
}

if (!ponyfillGlobal$1.__MUI_STYLES__.withStyles) {
  ponyfillGlobal$1.__MUI_STYLES__.withStyles = withStylesOld;
}

var withStyles = ponyfillGlobal$1.__MUI_STYLES__.withStyles;

var defaultTheme$1;

function getDefaultTheme$1() {
  if (defaultTheme$1) {
    return defaultTheme$1;
  }

  defaultTheme$1 = createMuiTheme({
    typography: {
      suppressWarning: true } });


  return defaultTheme$1;
}

// Provide the theme object as a property to the input component.
var withThemeOld = function withThemeOld() {return function (Component) {var
    WithTheme = /*#__PURE__*/function (_React$Component) {inherits(WithTheme, _React$Component);
      function WithTheme(props, context) {var _this;classCallCheck(this, WithTheme);
        _this = possibleConstructorReturn(this, getPrototypeOf(WithTheme).call(this));
        _this.state = {
          // We use || as the function call is lazy evaluated.
          theme: themeListener.initial(context) || getDefaultTheme$1() };return _this;

      }createClass(WithTheme, [{ key: "componentDidMount", value: function componentDidMount()

        {var _this2 = this;
          this.unsubscribeId = themeListener.subscribe(this.context, function (theme) {
            _this2.setState({ theme: theme });
          });
        } }, { key: "componentWillUnmount", value: function componentWillUnmount()

        {
          if (this.unsubscribeId !== null) {
            themeListener.unsubscribe(this.context, this.unsubscribeId);
          }
        } }, { key: "render", value: function render()

        {var _this$props =
          this.props,innerRef = _this$props.innerRef,other = objectWithoutProperties(_this$props, ["innerRef"]);
          return react.createElement(Component, _extends_1({ theme: this.state.theme, ref: innerRef }, other));
        } }]);return WithTheme;}(react.Component);


    WithTheme.propTypes = {
      /**
                             * Use that property to pass a ref callback to the decorated component.
                             */
      innerRef: propTypes.oneOfType([propTypes.func, propTypes.object]) };


    WithTheme.contextTypes = themeListener.contextTypes;

    hoistNonReactStatics_cjs(WithTheme, Component);

    return WithTheme;
  };};

/* istanbul ignore if */
if (!ponyfillGlobal$1.__MUI_STYLES__) {
  ponyfillGlobal$1.__MUI_STYLES__ = {};
}

if (!ponyfillGlobal$1.__MUI_STYLES__.withTheme) {
  ponyfillGlobal$1.__MUI_STYLES__.withTheme = withThemeOld;
}

var withTheme = ponyfillGlobal$1.__MUI_STYLES__.withTheme;

var classnames = createCommonjsModule(function (module) {
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {

	var hasOwn = {}.hasOwnProperty;

	function classNames () {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg) && arg.length) {
				var inner = classNames.apply(null, arg);
				if (inner) {
					classes.push(inner);
				}
			} else if (argType === 'object') {
				for (var key in arg) {
					if (hasOwn.call(arg, key) && arg[key]) {
						classes.push(key);
					}
				}
			}
		}

		return classes.join(' ');
	}

	if (module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else {
		window.classNames = classNames;
	}
}());
});

// It should to be noted that this function isn't equivalent to `text-transform: capitalize`.
//
// A strict capitalization should uppercase the first letter of each word a the sentence.
// We only handle the first word.
function capitalize(string) {

  return string.charAt(0).toUpperCase() + string.slice(1);
}

function contains(obj, pred) {
  return Object.keys(pred).every(function (key) {
    return obj.hasOwnProperty(key) && obj[key] === pred[key];
  });
}

function findIndex(arr, pred) {
  var predType = _typeof_1(pred);
  for (var i = 0; i < arr.length; i += 1) {
    if (predType === 'function' && !!pred(arr[i], i, arr) === true) {
      return i;
    }
    if (predType === 'object' && contains(arr[i], pred)) {
      return i;
    }
    if (['string', 'number', 'boolean'].indexOf(predType) !== -1) {
      return arr.indexOf(pred);
    }
  }
  return -1;
}

function find(arr, pred) {
  var index = findIndex(arr, pred);
  return index > -1 ? arr[index] : undefined;
}

/**
   * Safe chained function
   *
   * Will only create a new function if needed,
   * otherwise will pass back existing functions or null.
   *
   * @param {function} functions to chain
   * @returns {function|null}
   */
function createChainedFunction() {for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {funcs[_key] = arguments[_key];}
  return funcs.reduce(
  function (acc, func) {
    if (func == null) {
      return acc;
    }

    warning_1(
    typeof func === 'function',
    'Material-UI: invalid Argument Type, must only provide functions, undefined, or null.');


    return function chainedFunction() {for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {args[_key2] = arguments[_key2];}
      acc.apply(this, args);
      func.apply(this, args);
    };
  },
  function () {});

}

var styles = function styles(theme) {
  var elevations = {};
  theme.shadows.forEach(function (shadow, index) {
    elevations["elevation".concat(index)] = {
      boxShadow: shadow };

  });

  return objectSpread({
    /* Styles applied to the root element. */
    root: {
      backgroundColor: theme.palette.background.paper },

    /* Styles applied to the root element if `square={false}`. */
    rounded: {
      borderRadius: theme.shape.borderRadius } },

  elevations);

};

function Paper(props) {var

  classes =





  props.classes,classNameProp = props.className,Component = props.component,square = props.square,elevation = props.elevation,other = objectWithoutProperties(props, ["classes", "className", "component", "square", "elevation"]);

  warning_1(
  elevation >= 0 && elevation < 25, "Material-UI: this elevation `".concat(
  elevation, "` is not implemented."));


  var className = classnames(
  classes.root,
  classes["elevation".concat(elevation)], defineProperty({},

  classes.rounded, !square),

  classNameProp);


  return react.createElement(Component, _extends_1({ className: className }, other));
}

Paper.propTypes = {
  /**
                     * The content of the component.
                     */
  children: propTypes.node,
  /**
                             * Override or extend the styles applied to the component.
                             * See [CSS API](#css-api) below for more details.
                             */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * The component used for the root node.
                                * Either a string to use a DOM element or a component.
                                */
  component: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                         * Shadow depth, corresponds to `dp` in the spec.
                                                                                         * It's accepting values between 0 and 24 inclusive.
                                                                                         */
  elevation: propTypes.number,
  /**
                                * If `true`, rounded corners are disabled.
                                */
  square: propTypes.bool };


Paper.defaultProps = {
  component: 'div',
  elevation: 2,
  square: false };


var Paper$1 = withStyles(styles, { name: 'MuiPaper' })(Paper);

var styles$1 = function styles(theme) {
  var backgroundColorDefault =
  theme.palette.type === 'light' ? theme.palette.grey[100] : theme.palette.grey[900];

  return {
    /* Styles applied to the root element. */
    root: {
      display: 'flex',
      flexDirection: 'column',
      width: '100%',
      boxSizing: 'border-box', // Prevent padding issue with the Modal and fixed positioned AppBar.
      zIndex: theme.zIndex.appBar,
      flexShrink: 0 },

    /* Styles applied to the root element if `position="fixed"`. */
    positionFixed: {
      position: 'fixed',
      top: 0,
      left: 'auto',
      right: 0 },

    /* Styles applied to the root element if `position="absolute"`. */
    positionAbsolute: {
      position: 'absolute',
      top: 0,
      left: 'auto',
      right: 0 },

    /* Styles applied to the root element if `position="sticky"`. */
    positionSticky: {
      position: 'sticky',
      top: 0,
      left: 'auto',
      right: 0 },

    /* Styles applied to the root element if `position="static"`. */
    positionStatic: {
      position: 'static' },

    /* Styles applied to the root element if `position="relative"`. */
    positionRelative: {
      position: 'relative' },

    /* Styles applied to the root element if `color="default"`. */
    colorDefault: {
      backgroundColor: backgroundColorDefault,
      color: theme.palette.getContrastText(backgroundColorDefault) },

    /* Styles applied to the root element if `color="primary"`. */
    colorPrimary: {
      backgroundColor: theme.palette.primary.main,
      color: theme.palette.primary.contrastText },

    /* Styles applied to the root element if `color="secondary"`. */
    colorSecondary: {
      backgroundColor: theme.palette.secondary.main,
      color: theme.palette.secondary.contrastText } };


};

function AppBar(props) {var _classNames;var
  children = props.children,classes = props.classes,classNameProp = props.className,color = props.color,position = props.position,other = objectWithoutProperties(props, ["children", "classes", "className", "color", "position"]);

  var className = classnames(
  classes.root,
  classes["position".concat(capitalize(position))], (_classNames = {}, defineProperty(_classNames,

  classes["color".concat(capitalize(color))], color !== 'inherit'), defineProperty(_classNames,
  'mui-fixed', position === 'fixed'), _classNames),

  classNameProp);


  return (
    react.createElement(Paper$1, _extends_1({ square: true, component: "header", elevation: 4, className: className }, other),
    children));


}

AppBar.propTypes = {
  /**
                      * The content of the component.
                      */
  children: propTypes.node.isRequired,
  /**
                                        * Override or extend the styles applied to the component.
                                        * See [CSS API](#css-api) below for more details.
                                        */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * The color of the component. It supports those theme colors that make sense for this component.
                                */
  color: propTypes.oneOf(['inherit', 'primary', 'secondary', 'default']),
  /**
                                                                           * The positioning type. The behavior of the different options is described
                                                                           * [here](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning).
                                                                           * Note: `sticky` is not universally supported and will fall back to `static` when unavailable.
                                                                           */
  position: propTypes.oneOf(['fixed', 'absolute', 'sticky', 'static', 'relative']) };


AppBar.defaultProps = {
  color: 'primary',
  position: 'fixed' };


withStyles(styles$1, { name: 'MuiAppBar' })(AppBar);

var styles$2 = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: {
      position: 'relative',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      flexShrink: 0,
      width: 40,
      height: 40,
      fontFamily: theme.typography.fontFamily,
      fontSize: theme.typography.pxToRem(20),
      borderRadius: '50%',
      overflow: 'hidden',
      userSelect: 'none' },

    /* Styles applied to the root element if there are children and not `src` or `srcSet` */
    /* Styles applied to the root element if `color="default"`. */
    colorDefault: {
      color: theme.palette.background.default,
      backgroundColor:
      theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[600] },

    /* Styles applied to the img element if either `src` or `srcSet` is defined. */
    img: {
      width: '100%',
      height: '100%',
      textAlign: 'center',
      // Handle non-square image. The property isn't supported by IE 11.
      objectFit: 'cover' } };};



function Avatar(props) {var

  alt =










  props.alt,childrenProp = props.children,childrenClassNameProp = props.childrenClassName,classes = props.classes,classNameProp = props.className,Component = props.component,imgProps = props.imgProps,sizes = props.sizes,src = props.src,srcSet = props.srcSet,other = objectWithoutProperties(props, ["alt", "children", "childrenClassName", "classes", "className", "component", "imgProps", "sizes", "src", "srcSet"]);

  var className = classnames(
  classes.root, defineProperty({},

  classes.colorDefault, childrenProp && !src && !srcSet),

  classNameProp);

  var children = null;

  if (src || srcSet) {
    children =
    react.createElement("img", _extends_1({
      alt: alt,
      src: src,
      srcSet: srcSet,
      sizes: sizes,
      className: classes.img },
    imgProps));


  } else if (childrenClassNameProp && react.isValidElement(childrenProp)) {
    children = react.cloneElement(childrenProp, {
      className: classnames(childrenClassNameProp, childrenProp.props.className) });

  } else {
    children = childrenProp;
  }

  return (
    react.createElement(Component, _extends_1({ className: className }, other),
    children));


}

Avatar.propTypes = {
  /**
                      * Used in combination with `src` or `srcSet` to
                      * provide an alt attribute for the rendered `img` element.
                      */
  alt: propTypes.string,
  /**
                          * Used to render icon or text elements inside the Avatar.
                          * `src` and `alt` props will not be used and no `img` will
                          * be rendered by default.
                          *
                          * This can be an element, or just a string.
                          */
  children: propTypes.node,
  /**
                             * @ignore
                             * The className of the child element.
                             * Used by Chip and ListItemIcon to style the Avatar icon.
                             */
  childrenClassName: propTypes.string,
  /**
                                        * Override or extend the styles applied to the component.
                                        * See [CSS API](#css-api) below for more details.
                                        */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * The component used for the root node.
                                * Either a string to use a DOM element or a component.
                                */
  component: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                         * Attributes applied to the `img` element if the component
                                                                                         * is used to display an image.
                                                                                         */
  imgProps: propTypes.object,
  /**
                               * The `sizes` attribute for the `img` element.
                               */
  sizes: propTypes.string,
  /**
                            * The `src` attribute for the `img` element.
                            */
  src: propTypes.string,
  /**
                          * The `srcSet` attribute for the `img` element.
                          */
  srcSet: propTypes.string };


Avatar.defaultProps = {
  component: 'div' };


withStyles(styles$2, { name: 'MuiAvatar' })(Avatar);

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

function componentWillMount() {
  // Call this.constructor.gDSFP to support sub-classes.
  var state = this.constructor.getDerivedStateFromProps(this.props, this.state);
  if (state !== null && state !== undefined) {
    this.setState(state);
  }
}

function componentWillReceiveProps(nextProps) {
  // Call this.constructor.gDSFP to support sub-classes.
  // Use the setState() updater to ensure state isn't stale in certain edge cases.
  function updater(prevState) {
    var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);
    return state !== null && state !== undefined ? state : null;
  }
  // Binding "this" is important for shallow renderer support.
  this.setState(updater.bind(this));
}

function componentWillUpdate(nextProps, nextState) {
  try {
    var prevProps = this.props;
    var prevState = this.state;
    this.props = nextProps;
    this.state = nextState;
    this.__reactInternalSnapshotFlag = true;
    this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(
      prevProps,
      prevState
    );
  } finally {
    this.props = prevProps;
    this.state = prevState;
  }
}

// React may warn about cWM/cWRP/cWU methods being deprecated.
// Add a flag to suppress these warnings for this special case.
componentWillMount.__suppressDeprecationWarning = true;
componentWillReceiveProps.__suppressDeprecationWarning = true;
componentWillUpdate.__suppressDeprecationWarning = true;

function polyfill(Component) {
  var prototype = Component.prototype;

  if (!prototype || !prototype.isReactComponent) {
    throw new Error('Can only polyfill class components');
  }

  if (
    typeof Component.getDerivedStateFromProps !== 'function' &&
    typeof prototype.getSnapshotBeforeUpdate !== 'function'
  ) {
    return Component;
  }

  // If new component APIs are defined, "unsafe" lifecycles won't be called.
  // Error if any of these lifecycles are present,
  // Because they would work differently between older and newer (16.3+) versions of React.
  var foundWillMountName = null;
  var foundWillReceivePropsName = null;
  var foundWillUpdateName = null;
  if (typeof prototype.componentWillMount === 'function') {
    foundWillMountName = 'componentWillMount';
  } else if (typeof prototype.UNSAFE_componentWillMount === 'function') {
    foundWillMountName = 'UNSAFE_componentWillMount';
  }
  if (typeof prototype.componentWillReceiveProps === 'function') {
    foundWillReceivePropsName = 'componentWillReceiveProps';
  } else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') {
    foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
  }
  if (typeof prototype.componentWillUpdate === 'function') {
    foundWillUpdateName = 'componentWillUpdate';
  } else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') {
    foundWillUpdateName = 'UNSAFE_componentWillUpdate';
  }
  if (
    foundWillMountName !== null ||
    foundWillReceivePropsName !== null ||
    foundWillUpdateName !== null
  ) {
    var componentName = Component.displayName || Component.name;
    var newApiName =
      typeof Component.getDerivedStateFromProps === 'function'
        ? 'getDerivedStateFromProps()'
        : 'getSnapshotBeforeUpdate()';

    throw Error(
      'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' +
        componentName +
        ' uses ' +
        newApiName +
        ' but also contains the following legacy lifecycles:' +
        (foundWillMountName !== null ? '\n  ' + foundWillMountName : '') +
        (foundWillReceivePropsName !== null
          ? '\n  ' + foundWillReceivePropsName
          : '') +
        (foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '') +
        '\n\nThe above lifecycles should be removed. Learn more about this warning here:\n' +
        'https://fb.me/react-async-component-lifecycle-hooks'
    );
  }

  // React <= 16.2 does not support static getDerivedStateFromProps.
  // As a workaround, use cWM and cWRP to invoke the new static lifecycle.
  // Newer versions of React will ignore these lifecycles if gDSFP exists.
  if (typeof Component.getDerivedStateFromProps === 'function') {
    prototype.componentWillMount = componentWillMount;
    prototype.componentWillReceiveProps = componentWillReceiveProps;
  }

  // React <= 16.2 does not support getSnapshotBeforeUpdate.
  // As a workaround, use cWU to invoke the new lifecycle.
  // Newer versions of React will ignore that lifecycle if gSBU exists.
  if (typeof prototype.getSnapshotBeforeUpdate === 'function') {
    if (typeof prototype.componentDidUpdate !== 'function') {
      throw new Error(
        'Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype'
      );
    }

    prototype.componentWillUpdate = componentWillUpdate;

    var componentDidUpdate = prototype.componentDidUpdate;

    prototype.componentDidUpdate = function componentDidUpdatePolyfill(
      prevProps,
      prevState,
      maybeSnapshot
    ) {
      // 16.3+ will not execute our will-update method;
      // It will pass a snapshot value to did-update though.
      // Older versions will require our polyfilled will-update value.
      // We need to handle both cases, but can't just check for the presence of "maybeSnapshot",
      // Because for <= 15.x versions this might be a "prevContext" object.
      // We also can't just check "__reactInternalSnapshot",
      // Because get-snapshot might return a falsy value.
      // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.
      var snapshot = this.__reactInternalSnapshotFlag
        ? this.__reactInternalSnapshot
        : maybeSnapshot;

      componentDidUpdate.call(this, prevProps, prevState, snapshot);
    };
  }

  return Component;
}

var reactLifecyclesCompat_es = /*#__PURE__*/Object.freeze({
            polyfill: polyfill
});

var PropTypes = createCommonjsModule(function (module, exports) {

exports.__esModule = true;
exports.transitionTimeout = transitionTimeout;
exports.classNamesShape = exports.timeoutsShape = void 0;

var _propTypes = _interopRequireDefault(propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function transitionTimeout(transitionType) {
  var timeoutPropName = 'transition' + transitionType + 'Timeout';
  var enabledPropName = 'transition' + transitionType;
  return function (props) {
    // If the transition is enabled
    if (props[enabledPropName]) {
      // If no timeout duration is provided
      if (props[timeoutPropName] == null) {
        return new Error(timeoutPropName + ' wasn\'t supplied to CSSTransitionGroup: ' + 'this can cause unreliable animations and won\'t be supported in ' + 'a future version of React. See ' + 'https://fb.me/react-animation-transition-group-timeout for more ' + 'information.'); // If the duration isn't a number
      } else if (typeof props[timeoutPropName] !== 'number') {
        return new Error(timeoutPropName + ' must be a number (in milliseconds)');
      }
    }

    return null;
  };
}

var timeoutsShape = _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({
  enter: _propTypes.default.number,
  exit: _propTypes.default.number
}).isRequired]);

exports.timeoutsShape = timeoutsShape;

var classNamesShape = _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.shape({
  enter: _propTypes.default.string,
  exit: _propTypes.default.string,
  active: _propTypes.default.string
}), _propTypes.default.shape({
  enter: _propTypes.default.string,
  enterDone: _propTypes.default.string,
  enterActive: _propTypes.default.string,
  exit: _propTypes.default.string,
  exitDone: _propTypes.default.string,
  exitActive: _propTypes.default.string
})]);

exports.classNamesShape = classNamesShape;
});

unwrapExports(PropTypes);
var PropTypes_1 = PropTypes.transitionTimeout;
var PropTypes_2 = PropTypes.classNamesShape;
var PropTypes_3 = PropTypes.timeoutsShape;

var Transition_1 = createCommonjsModule(function (module, exports) {

exports.__esModule = true;
exports.default = exports.EXITING = exports.ENTERED = exports.ENTERING = exports.EXITED = exports.UNMOUNTED = void 0;

var PropTypes$$1 = _interopRequireWildcard(propTypes);

var _react = _interopRequireDefault(react);

var _reactDom = _interopRequireDefault(reactDom);





function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var UNMOUNTED = 'unmounted';
exports.UNMOUNTED = UNMOUNTED;
var EXITED = 'exited';
exports.EXITED = EXITED;
var ENTERING = 'entering';
exports.ENTERING = ENTERING;
var ENTERED = 'entered';
exports.ENTERED = ENTERED;
var EXITING = 'exiting';
/**
 * The Transition component lets you describe a transition from one component
 * state to another _over time_ with a simple declarative API. Most commonly
 * it's used to animate the mounting and unmounting of a component, but can also
 * be used to describe in-place transition states as well.
 *
 * By default the `Transition` component does not alter the behavior of the
 * component it renders, it only tracks "enter" and "exit" states for the components.
 * It's up to you to give meaning and effect to those states. For example we can
 * add styles to a component when it enters or exits:
 *
 * ```jsx
 * import Transition from 'react-transition-group/Transition';
 *
 * const duration = 300;
 *
 * const defaultStyle = {
 *   transition: `opacity ${duration}ms ease-in-out`,
 *   opacity: 0,
 * }
 *
 * const transitionStyles = {
 *   entering: { opacity: 0 },
 *   entered:  { opacity: 1 },
 * };
 *
 * const Fade = ({ in: inProp }) => (
 *   <Transition in={inProp} timeout={duration}>
 *     {(state) => (
 *       <div style={{
 *         ...defaultStyle,
 *         ...transitionStyles[state]
 *       }}>
 *         I'm a fade Transition!
 *       </div>
 *     )}
 *   </Transition>
 * );
 * ```
 *
 * As noted the `Transition` component doesn't _do_ anything by itself to its child component.
 * What it does do is track transition states over time so you can update the
 * component (such as by adding styles or classes) when it changes states.
 *
 * There are 4 main states a Transition can be in:
 *  - `'entering'`
 *  - `'entered'`
 *  - `'exiting'`
 *  - `'exited'`
 *
 * Transition state is toggled via the `in` prop. When `true` the component begins the
 * "Enter" stage. During this stage, the component will shift from its current transition state,
 * to `'entering'` for the duration of the transition and then to the `'entered'` stage once
 * it's complete. Let's take the following example:
 *
 * ```jsx
 * state = { in: false };
 *
 * toggleEnterState = () => {
 *   this.setState({ in: true });
 * }
 *
 * render() {
 *   return (
 *     <div>
 *       <Transition in={this.state.in} timeout={500} />
 *       <button onClick={this.toggleEnterState}>Click to Enter</button>
 *     </div>
 *   );
 * }
 * ```
 *
 * When the button is clicked the component will shift to the `'entering'` state and
 * stay there for 500ms (the value of `timeout`) before it finally switches to `'entered'`.
 *
 * When `in` is `false` the same thing happens except the state moves from `'exiting'` to `'exited'`.
 *
 * ## Timing
 *
 * Timing is often the trickiest part of animation, mistakes can result in slight delays
 * that are hard to pin down. A common example is when you want to add an exit transition,
 * you should set the desired final styles when the state is `'exiting'`. That's when the
 * transition to those styles will start and, if you matched the `timeout` prop with the
 * CSS Transition duration, it will end exactly when the state changes to `'exited'`.
 *
 * > **Note**: For simpler transitions the `Transition` component might be enough, but
 * > take into account that it's platform-agnostic, while the `CSSTransition` component
 * > [forces reflows](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)
 * > in order to make more complex transitions more predictable. For example, even though
 * > classes `example-enter` and `example-enter-active` are applied immediately one after
 * > another, you can still transition from one to the other because of the forced reflow
 * > (read [this issue](https://github.com/reactjs/react-transition-group/issues/159#issuecomment-322761171)
 * > for more info). Take this into account when choosing between `Transition` and
 * > `CSSTransition`.
 */

exports.EXITING = EXITING;

var Transition =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(Transition, _React$Component);

  function Transition(props, context) {
    var _this;

    _this = _React$Component.call(this, props, context) || this;
    var parentGroup = context.transitionGroup; // In the context of a TransitionGroup all enters are really appears

    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
    var initialStatus;
    _this.appearStatus = null;

    if (props.in) {
      if (appear) {
        initialStatus = EXITED;
        _this.appearStatus = ENTERING;
      } else {
        initialStatus = ENTERED;
      }
    } else {
      if (props.unmountOnExit || props.mountOnEnter) {
        initialStatus = UNMOUNTED;
      } else {
        initialStatus = EXITED;
      }
    }

    _this.state = {
      status: initialStatus
    };
    _this.nextCallback = null;
    return _this;
  }

  var _proto = Transition.prototype;

  _proto.getChildContext = function getChildContext() {
    return {
      transitionGroup: null // allows for nested Transitions

    };
  };

  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
    var nextIn = _ref.in;

    if (nextIn && prevState.status === UNMOUNTED) {
      return {
        status: EXITED
      };
    }

    return null;
  }; // getSnapshotBeforeUpdate(prevProps) {
  //   let nextStatus = null
  //   if (prevProps !== this.props) {
  //     const { status } = this.state
  //     if (this.props.in) {
  //       if (status !== ENTERING && status !== ENTERED) {
  //         nextStatus = ENTERING
  //       }
  //     } else {
  //       if (status === ENTERING || status === ENTERED) {
  //         nextStatus = EXITING
  //       }
  //     }
  //   }
  //   return { nextStatus }
  // }


  _proto.componentDidMount = function componentDidMount() {
    this.updateStatus(true, this.appearStatus);
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var nextStatus = null;

    if (prevProps !== this.props) {
      var status = this.state.status;

      if (this.props.in) {
        if (status !== ENTERING && status !== ENTERED) {
          nextStatus = ENTERING;
        }
      } else {
        if (status === ENTERING || status === ENTERED) {
          nextStatus = EXITING;
        }
      }
    }

    this.updateStatus(false, nextStatus);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.cancelNextCallback();
  };

  _proto.getTimeouts = function getTimeouts() {
    var timeout = this.props.timeout;
    var exit, enter, appear;
    exit = enter = appear = timeout;

    if (timeout != null && typeof timeout !== 'number') {
      exit = timeout.exit;
      enter = timeout.enter;
      appear = timeout.appear;
    }

    return {
      exit: exit,
      enter: enter,
      appear: appear
    };
  };

  _proto.updateStatus = function updateStatus(mounting, nextStatus) {
    if (mounting === void 0) {
      mounting = false;
    }

    if (nextStatus !== null) {
      // nextStatus will always be ENTERING or EXITING.
      this.cancelNextCallback();

      var node = _reactDom.default.findDOMNode(this);

      if (nextStatus === ENTERING) {
        this.performEnter(node, mounting);
      } else {
        this.performExit(node);
      }
    } else if (this.props.unmountOnExit && this.state.status === EXITED) {
      this.setState({
        status: UNMOUNTED
      });
    }
  };

  _proto.performEnter = function performEnter(node, mounting) {
    var _this2 = this;

    var enter = this.props.enter;
    var appearing = this.context.transitionGroup ? this.context.transitionGroup.isMounting : mounting;
    var timeouts = this.getTimeouts(); // no enter animation skip right to ENTERED
    // if we are mounting and running this it means appear _must_ be set

    if (!mounting && !enter) {
      this.safeSetState({
        status: ENTERED
      }, function () {
        _this2.props.onEntered(node);
      });
      return;
    }

    this.props.onEnter(node, appearing);
    this.safeSetState({
      status: ENTERING
    }, function () {
      _this2.props.onEntering(node, appearing); // FIXME: appear timeout?


      _this2.onTransitionEnd(node, timeouts.enter, function () {
        _this2.safeSetState({
          status: ENTERED
        }, function () {
          _this2.props.onEntered(node, appearing);
        });
      });
    });
  };

  _proto.performExit = function performExit(node) {
    var _this3 = this;

    var exit = this.props.exit;
    var timeouts = this.getTimeouts(); // no exit animation skip right to EXITED

    if (!exit) {
      this.safeSetState({
        status: EXITED
      }, function () {
        _this3.props.onExited(node);
      });
      return;
    }

    this.props.onExit(node);
    this.safeSetState({
      status: EXITING
    }, function () {
      _this3.props.onExiting(node);

      _this3.onTransitionEnd(node, timeouts.exit, function () {
        _this3.safeSetState({
          status: EXITED
        }, function () {
          _this3.props.onExited(node);
        });
      });
    });
  };

  _proto.cancelNextCallback = function cancelNextCallback() {
    if (this.nextCallback !== null) {
      this.nextCallback.cancel();
      this.nextCallback = null;
    }
  };

  _proto.safeSetState = function safeSetState(nextState, callback) {
    // This shouldn't be necessary, but there are weird race conditions with
    // setState callbacks and unmounting in testing, so always make sure that
    // we can cancel any pending setState callbacks after we unmount.
    callback = this.setNextCallback(callback);
    this.setState(nextState, callback);
  };

  _proto.setNextCallback = function setNextCallback(callback) {
    var _this4 = this;

    var active = true;

    this.nextCallback = function (event) {
      if (active) {
        active = false;
        _this4.nextCallback = null;
        callback(event);
      }
    };

    this.nextCallback.cancel = function () {
      active = false;
    };

    return this.nextCallback;
  };

  _proto.onTransitionEnd = function onTransitionEnd(node, timeout, handler) {
    this.setNextCallback(handler);

    if (node) {
      if (this.props.addEndListener) {
        this.props.addEndListener(node, this.nextCallback);
      }

      if (timeout != null) {
        setTimeout(this.nextCallback, timeout);
      }
    } else {
      setTimeout(this.nextCallback, 0);
    }
  };

  _proto.render = function render() {
    var status = this.state.status;

    if (status === UNMOUNTED) {
      return null;
    }

    var _this$props = this.props,
        children = _this$props.children,
        childProps = _objectWithoutPropertiesLoose(_this$props, ["children"]); // filter props for Transtition


    delete childProps.in;
    delete childProps.mountOnEnter;
    delete childProps.unmountOnExit;
    delete childProps.appear;
    delete childProps.enter;
    delete childProps.exit;
    delete childProps.timeout;
    delete childProps.addEndListener;
    delete childProps.onEnter;
    delete childProps.onEntering;
    delete childProps.onEntered;
    delete childProps.onExit;
    delete childProps.onExiting;
    delete childProps.onExited;

    if (typeof children === 'function') {
      return children(status, childProps);
    }

    var child = _react.default.Children.only(children);

    return _react.default.cloneElement(child, childProps);
  };

  return Transition;
}(_react.default.Component);

Transition.contextTypes = {
  transitionGroup: PropTypes$$1.object
};
Transition.childContextTypes = {
  transitionGroup: function transitionGroup() {}
};
Transition.propTypes = {};

function noop() {}

Transition.defaultProps = {
  in: false,
  mountOnEnter: false,
  unmountOnExit: false,
  appear: false,
  enter: true,
  exit: true,
  onEnter: noop,
  onEntering: noop,
  onEntered: noop,
  onExit: noop,
  onExiting: noop,
  onExited: noop
};
Transition.UNMOUNTED = 0;
Transition.EXITED = 1;
Transition.ENTERING = 2;
Transition.ENTERED = 3;
Transition.EXITING = 4;

var _default = (0, reactLifecyclesCompat_es.polyfill)(Transition);

exports.default = _default;
});

var Transition = unwrapExports(Transition_1);
var Transition_2 = Transition_1.EXITING;
var Transition_3 = Transition_1.ENTERED;
var Transition_4 = Transition_1.ENTERING;
var Transition_5 = Transition_1.EXITED;
var Transition_6 = Transition_1.UNMOUNTED;

var reflow = function reflow(node) {return node.scrollTop;};

function getTransitionProps(props, options) {var
  timeout = props.timeout,_props$style = props.style,style = _props$style === void 0 ? {} : _props$style;

  return {
    duration:
    style.transitionDuration || typeof timeout === 'number' ? timeout : timeout[options.mode],
    delay: style.transitionDelay };

}

var styles$3 = {
  entering: {
    opacity: 1 },

  entered: {
    opacity: 1 } };



/**
                     * The Fade transition is used by the [Modal](/utils/modal/) component.
                     * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
                     */var
Fade = /*#__PURE__*/function (_React$Component) {inherits(Fade, _React$Component);function Fade() {var _getPrototypeOf2;var _this;classCallCheck(this, Fade);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Fade)).call.apply(_getPrototypeOf2, [this].concat(args)));defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleEnter",
    function (node) {var
      theme = _this.props.theme;
      reflow(node); // So the animation always start from the start.

      var transitionProps = getTransitionProps(_this.props, {
        mode: 'enter' });

      node.style.webkitTransition = theme.transitions.create('opacity', transitionProps);
      node.style.transition = theme.transitions.create('opacity', transitionProps);

      if (_this.props.onEnter) {
        _this.props.onEnter(node);
      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleExit",

    function (node) {var
      theme = _this.props.theme;
      var transitionProps = getTransitionProps(_this.props, {
        mode: 'exit' });

      node.style.webkitTransition = theme.transitions.create('opacity', transitionProps);
      node.style.transition = theme.transitions.create('opacity', transitionProps);

      if (_this.props.onExit) {
        _this.props.onExit(node);
      }
    });return _this;}createClass(Fade, [{ key: "render", value: function render()

    {var _this$props =
      this.props,children = _this$props.children,onEnter = _this$props.onEnter,onExit = _this$props.onExit,styleProp = _this$props.style,theme = _this$props.theme,other = objectWithoutProperties(_this$props, ["children", "onEnter", "onExit", "style", "theme"]);

      var style = objectSpread({},
      styleProp,
      react.isValidElement(children) ? children.props.style : {});


      return (
        react.createElement(Transition, _extends_1({ appear: true, onEnter: this.handleEnter, onExit: this.handleExit }, other),
        function (state, childProps) {
          return react.cloneElement(children, objectSpread({
            style: objectSpread({
              opacity: 0,
              willChange: 'opacity' },
            styles$3[state],
            style) },

          childProps));

        }));


    } }]);return Fade;}(react.Component);


Fade.propTypes = {
  /**
                    * A single child content element.
                    */
  children: propTypes.oneOfType([propTypes.element, propTypes.func]),
  /**
                                                                       * If `true`, the component will transition in.
                                                                       */
  in: propTypes.bool,
  /**
                       * @ignore
                       */
  onEnter: propTypes.func,
  /**
                            * @ignore
                            */
  onExit: propTypes.func,
  /**
                           * @ignore
                           */
  style: propTypes.object,
  /**
                            * @ignore
                            */
  theme: propTypes.object.isRequired,
  /**
                                       * The duration for the transition, in milliseconds.
                                       * You may specify a single timeout for all transitions, or individually with an object.
                                       */
  timeout: propTypes.oneOfType([
  propTypes.number,
  propTypes.shape({ enter: propTypes.number, exit: propTypes.number })]) };



Fade.defaultProps = {
  timeout: {
    enter: duration.enteringScreen,
    exit: duration.leavingScreen } };



var Fade$1 = withTheme()(Fade);

var styles$4 = {
  /* Styles applied to the root element. */
  root: {
    zIndex: -1,
    position: 'fixed',
    right: 0,
    bottom: 0,
    top: 0,
    left: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    // Remove grey highlight
    WebkitTapHighlightColor: 'transparent',
    // Disable scroll capabilities.
    touchAction: 'none' },

  /* Styles applied to the root element if `invisible={true}`. */
  invisible: {
    backgroundColor: 'transparent' } };



function Backdrop(props) {var
  classes = props.classes,className = props.className,invisible = props.invisible,open = props.open,transitionDuration = props.transitionDuration,other = objectWithoutProperties(props, ["classes", "className", "invisible", "open", "transitionDuration"]);

  return (
    react.createElement(Fade$1, _extends_1({ in: open, timeout: transitionDuration }, other),
    react.createElement("div", {
      "data-mui-test": "Backdrop",
      className: classnames(
      classes.root, defineProperty({},

      classes.invisible, invisible),

      className),

      "aria-hidden": "true" })));



}

Backdrop.propTypes = {
  /**
                        * Override or extend the styles applied to the component.
                        * See [CSS API](#css-api) below for more details.
                        */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * If `true`, the backdrop is invisible.
                                * It can be used when rendering a popover or a custom select component.
                                */
  invisible: propTypes.bool,
  /**
                              * If `true`, the backdrop is open.
                              */
  open: propTypes.bool.isRequired,
  /**
                                    * The duration for the transition, in milliseconds.
                                    * You may specify a single timeout for all transitions, or individually with an object.
                                    */
  transitionDuration: propTypes.oneOfType([
  propTypes.number,
  propTypes.shape({ enter: propTypes.number, exit: propTypes.number })]) };



Backdrop.defaultProps = {
  invisible: false };


var Backdrop$1 = withStyles(styles$4, { name: 'MuiBackdrop' })(Backdrop);

var RADIUS = 11;

var styles$5 = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: {
      position: 'relative',
      display: 'inline-flex',
      // For correct alignment with the text.
      verticalAlign: 'middle' },

    /* Styles applied to the badge `span` element. */
    badge: {
      display: 'flex',
      flexDirection: 'row',
      flexWrap: 'wrap',
      justifyContent: 'center',
      alignContent: 'center',
      alignItems: 'center',
      position: 'absolute',
      top: -RADIUS,
      right: -RADIUS,
      fontFamily: theme.typography.fontFamily,
      fontWeight: theme.typography.fontWeight,
      fontSize: theme.typography.pxToRem(12),
      width: RADIUS * 2,
      height: RADIUS * 2,
      borderRadius: '50%',
      backgroundColor: theme.palette.color,
      color: theme.palette.textColor,
      zIndex: 1, // Render the badge on top of potential ripples.
      transition: theme.transitions.create('transform', {
        easing: theme.transitions.easing.easeInOut,
        duration: theme.transitions.duration.enteringScreen }),

      transform: 'scale(1)' },

    /* Styles applied to the root element if `color="primary"`. */
    colorPrimary: {
      backgroundColor: theme.palette.primary.main,
      color: theme.palette.primary.contrastText },

    /* Styles applied to the root element if `color="secondary"`. */
    colorSecondary: {
      backgroundColor: theme.palette.secondary.main,
      color: theme.palette.secondary.contrastText },

    /* Styles applied to the root element if `color="error"`. */
    colorError: {
      backgroundColor: theme.palette.error.main,
      color: theme.palette.error.contrastText },

    /* Styles applied to the badge `span` element if `invisible={true}`. */
    invisible: {
      transition: theme.transitions.create('transform', {
        easing: theme.transitions.easing.easeInOut,
        duration: theme.transitions.duration.leavingScreen }),

      transform: 'scale(0)' } };};



function Badge(props) {var _classNames;var

  badgeContent =







  props.badgeContent,children = props.children,classes = props.classes,className = props.className,color = props.color,ComponentProp = props.component,invisible = props.invisible,other = objectWithoutProperties(props, ["badgeContent", "children", "classes", "className", "color", "component", "invisible"]);

  var badgeClassName = classnames(classes.badge, (_classNames = {}, defineProperty(_classNames,
  classes["color".concat(capitalize(color))], color !== 'default'), defineProperty(_classNames,
  classes.invisible, invisible), _classNames));


  return (
    react.createElement(ComponentProp, _extends_1({ className: classnames(classes.root, className) }, other),
    children,
    react.createElement("span", { className: badgeClassName }, badgeContent)));


}

Badge.propTypes = {
  /**
                     * The content rendered within the badge.
                     */
  badgeContent: propTypes.node.isRequired,
  /**
                                            * The badge will be added relative to this node.
                                            */
  children: propTypes.node.isRequired,
  /**
                                        * Override or extend the styles applied to the component.
                                        * See [CSS API](#css-api) below for more details.
                                        */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * The color of the component. It supports those theme colors that make sense for this component.
                                */
  color: propTypes.oneOf(['default', 'primary', 'secondary', 'error']),
  /**
                                                                         * The component used for the root node.
                                                                         * Either a string to use a DOM element or a component.
                                                                         */
  component: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                         * If `true`, the badge will be invisible.
                                                                                         */
  invisible: propTypes.bool };


Badge.defaultProps = {
  color: 'default',
  component: 'span',
  invisible: false };


withStyles(styles$5, { name: 'MuiBadge' })(Badge);

var styles$6 = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: {
      display: 'flex',
      justifyContent: 'center',
      height: 56,
      backgroundColor: theme.palette.background.paper } };};



function BottomNavigation(props) {var

  childrenProp =






  props.children,classes = props.classes,classNameProp = props.className,onChange = props.onChange,showLabels = props.showLabels,value = props.value,other = objectWithoutProperties(props, ["children", "classes", "className", "onChange", "showLabels", "value"]);

  var className = classnames(classes.root, classNameProp);

  var children = react.Children.map(childrenProp, function (child, childIndex) {
    if (!react.isValidElement(child)) {
      return null;
    }

    warning_1(
    child.type !== react.Fragment,
    [
    "Material-UI: the BottomNavigation component doesn't accept a Fragment as a child.",
    'Consider providing an array instead.'].
    join('\n'));


    var childValue = child.props.value === undefined ? childIndex : child.props.value;
    return react.cloneElement(child, {
      selected: childValue === value,
      showLabel: child.props.showLabel !== undefined ? child.props.showLabel : showLabels,
      value: childValue,
      onChange: onChange });

  });

  return (
    react.createElement("div", _extends_1({ className: className }, other),
    children));


}

BottomNavigation.propTypes = {
  /**
                                * The content of the component.
                                */
  children: propTypes.node.isRequired,
  /**
                                        * Override or extend the styles applied to the component.
                                        * See [CSS API](#css-api) below for more details.
                                        */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * Callback fired when the value changes.
                                *
                                * @param {object} event The event source of the callback
                                * @param {any} value We default to the index of the child
                                */
  onChange: propTypes.func,
  /**
                             * If `true`, all `BottomNavigationAction`s will show their labels.
                             * By default, only the selected `BottomNavigationAction` will show its label.
                             */
  showLabels: propTypes.bool,
  /**
                               * The value of the currently selected `BottomNavigationAction`.
                               */
  value: propTypes.any };


BottomNavigation.defaultProps = {
  showLabels: false };


withStyles(styles$6, { name: 'MuiBottomNavigation' })(BottomNavigation);

var keycode = createCommonjsModule(function (module, exports) {
// Source: http://jsfiddle.net/vWx8V/
// http://stackoverflow.com/questions/5603195/full-list-of-javascript-keycodes

/**
 * Conenience method returns corresponding value for given keyName or keyCode.
 *
 * @param {Mixed} keyCode {Number} or keyName {String}
 * @return {Mixed}
 * @api public
 */

function keyCode(searchInput) {
  // Keyboard Events
  if (searchInput && 'object' === typeof searchInput) {
    var hasKeyCode = searchInput.which || searchInput.keyCode || searchInput.charCode;
    if (hasKeyCode) searchInput = hasKeyCode;
  }

  // Numbers
  if ('number' === typeof searchInput) return names[searchInput]

  // Everything else (cast to string)
  var search = String(searchInput);

  // check codes
  var foundNamedKey = codes[search.toLowerCase()];
  if (foundNamedKey) return foundNamedKey

  // check aliases
  var foundNamedKey = aliases[search.toLowerCase()];
  if (foundNamedKey) return foundNamedKey

  // weird character?
  if (search.length === 1) return search.charCodeAt(0)

  return undefined
}

/**
 * Compares a keyboard event with a given keyCode or keyName.
 *
 * @param {Event} event Keyboard event that should be tested
 * @param {Mixed} keyCode {Number} or keyName {String}
 * @return {Boolean}
 * @api public
 */
keyCode.isEventKey = function isEventKey(event, nameOrCode) {
  if (event && 'object' === typeof event) {
    var keyCode = event.which || event.keyCode || event.charCode;
    if (keyCode === null || keyCode === undefined) { return false; }
    if (typeof nameOrCode === 'string') {
      // check codes
      var foundNamedKey = codes[nameOrCode.toLowerCase()];
      if (foundNamedKey) { return foundNamedKey === keyCode; }
    
      // check aliases
      var foundNamedKey = aliases[nameOrCode.toLowerCase()];
      if (foundNamedKey) { return foundNamedKey === keyCode; }
    } else if (typeof nameOrCode === 'number') {
      return nameOrCode === keyCode;
    }
    return false;
  }
};

exports = module.exports = keyCode;

/**
 * Get by name
 *
 *   exports.code['enter'] // => 13
 */

var codes = exports.code = exports.codes = {
  'backspace': 8,
  'tab': 9,
  'enter': 13,
  'shift': 16,
  'ctrl': 17,
  'alt': 18,
  'pause/break': 19,
  'caps lock': 20,
  'esc': 27,
  'space': 32,
  'page up': 33,
  'page down': 34,
  'end': 35,
  'home': 36,
  'left': 37,
  'up': 38,
  'right': 39,
  'down': 40,
  'insert': 45,
  'delete': 46,
  'command': 91,
  'left command': 91,
  'right command': 93,
  'numpad *': 106,
  'numpad +': 107,
  'numpad -': 109,
  'numpad .': 110,
  'numpad /': 111,
  'num lock': 144,
  'scroll lock': 145,
  'my computer': 182,
  'my calculator': 183,
  ';': 186,
  '=': 187,
  ',': 188,
  '-': 189,
  '.': 190,
  '/': 191,
  '`': 192,
  '[': 219,
  '\\': 220,
  ']': 221,
  "'": 222
};

// Helper aliases

var aliases = exports.aliases = {
  'windows': 91,
  '⇧': 16,
  '⌥': 18,
  '⌃': 17,
  '⌘': 91,
  'ctl': 17,
  'control': 17,
  'option': 18,
  'pause': 19,
  'break': 19,
  'caps': 20,
  'return': 13,
  'escape': 27,
  'spc': 32,
  'spacebar': 32,
  'pgup': 33,
  'pgdn': 34,
  'ins': 45,
  'del': 46,
  'cmd': 91
};

/*!
 * Programatically add the following
 */

// lower case chars
for (i = 97; i < 123; i++) codes[String.fromCharCode(i)] = i - 32;

// numbers
for (var i = 48; i < 58; i++) codes[i - 48] = i;

// function keys
for (i = 1; i < 13; i++) codes['f'+i] = i + 111;

// numpad keys
for (i = 0; i < 10; i++) codes['numpad '+i] = i + 96;

/**
 * Get by code
 *
 *   exports.name[13] // => 'Enter'
 */

var names = exports.names = exports.title = {}; // title for backward compat

// Create reverse mapping
for (i in codes) names[codes[i]] = i;

// Add aliases
for (var alias in aliases) {
  codes[alias] = aliases[alias];
}
});
var keycode_1 = keycode.code;
var keycode_2 = keycode.codes;
var keycode_3 = keycode.aliases;
var keycode_4 = keycode.names;
var keycode_5 = keycode.title;

function ownerDocument(node) {
  return node && node.ownerDocument || document;
}

function ownerWindow(node) {var fallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window;
  var doc = ownerDocument(node);
  return doc.defaultView || doc.parentView || fallback;
}

/**
                                                 * NoSsr purposely removes components from the subject of Server Side Rendering (SSR).
                                                 *
                                                 * This component can be useful in a variety of situations:
                                                 * - Escape hatch for broken dependencies not supporting SSR.
                                                 * - Improve the time-to-first paint on the client by only rendering above the fold.
                                                 * - Reduce the rendering time on the server.
                                                 * - Under too heavy server load, you can turn on service degradation.
                                                 */var
NoSsr = /*#__PURE__*/function (_React$Component) {inherits(NoSsr, _React$Component);function NoSsr() {var _getPrototypeOf2;var _this;classCallCheck(this, NoSsr);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(NoSsr)).call.apply(_getPrototypeOf2, [this].concat(args)));defineProperty(assertThisInitialized(assertThisInitialized(_this)), "mounted",
    false);defineProperty(assertThisInitialized(assertThisInitialized(_this)), "state",

    {
      mounted: false });return _this;}createClass(NoSsr, [{ key: "componentDidMount", value: function componentDidMount()


    {var _this2 = this;
      this.mounted = true;

      if (this.props.defer) {
        // Wondering why we use two RAFs? Check this video out:
        // https://www.youtube.com/watch?v=cCOL7MC4Pl0
        requestAnimationFrame(function () {
          // The browser should be about to render the DOM that React commited at this point.
          // We don't want to interrupt. Let's wait the next raf.
          requestAnimationFrame(function () {
            if (_this2.mounted) {
              _this2.setState({ mounted: true });
            }
          });
        });
      } else {
        this.setState({ mounted: true }); // eslint-disable-line react/no-did-mount-set-state
      }
    } }, { key: "componentWillUnmount", value: function componentWillUnmount()

    {
      this.mounted = false;
    } }, { key: "render", value: function render()

    {var _this$props =
      this.props,children = _this$props.children,fallback = _this$props.fallback;

      return this.state.mounted ? children : fallback;
    } }]);return NoSsr;}(react.Component);


NoSsr.propTypes = {
  children: propTypes.node.isRequired,
  /**
                                        * If `true`, the component will not only prevent server side rendering.
                                        * It will also defer the rendering of the children into a different screen frame.
                                        */
  defer: propTypes.bool,
  /**
                          * The fallback content to display.
                          */
  fallback: propTypes.node };


NoSsr.propTypes = exactProp(NoSsr.propTypes);

NoSsr.defaultProps = {
  defer: false,
  fallback: null };

var internal = {
  focusKeyPressed: false,
  keyUpEventTimeout: -1 };


function findActiveElement(doc) {
  var activeElement = doc.activeElement;
  while (activeElement && activeElement.shadowRoot && activeElement.shadowRoot.activeElement) {
    activeElement = activeElement.shadowRoot.activeElement;
  }
  return activeElement;
}

function detectFocusVisible(instance, element, callback) {var attempt = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
  warning_1(instance.focusVisibleCheckTime, 'Material-UI: missing instance.focusVisibleCheckTime.');
  warning_1(
  instance.focusVisibleMaxCheckTimes,
  'Material-UI: missing instance.focusVisibleMaxCheckTimes.');


  instance.focusVisibleTimeout = setTimeout(function () {
    var doc = ownerDocument(element);
    var activeElement = findActiveElement(doc);

    if (
    internal.focusKeyPressed && (
    activeElement === element || element.contains(activeElement)))
    {
      callback();
    } else if (attempt < instance.focusVisibleMaxCheckTimes) {
      detectFocusVisible(instance, element, callback, attempt + 1);
    }
  }, instance.focusVisibleCheckTime);
}

var FOCUS_KEYS = ['tab', 'enter', 'space', 'esc', 'up', 'down', 'left', 'right'];

function isFocusKey(event) {
  return FOCUS_KEYS.indexOf(keycode(event)) > -1;
}

var handleKeyUpEvent = function handleKeyUpEvent(event) {
  if (isFocusKey(event)) {
    internal.focusKeyPressed = true;

    // Let's consider that the user is using a keyboard during a window frame of 1s.
    clearTimeout(internal.keyUpEventTimeout);
    internal.keyUpEventTimeout = setTimeout(function () {
      internal.focusKeyPressed = false;
    }, 1e3);
  }
};

function listenForFocusKeys(win) {
  // The event listener will only be added once per window.
  // Duplicate event listeners will be ignored by addEventListener.
  // Also, this logic is client side only, we don't need a teardown.
  win.addEventListener('keyup', handleKeyUpEvent);
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }
}

var arrayWithoutHoles = _arrayWithoutHoles;

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

var iterableToArray = _iterableToArray;

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

var nonIterableSpread = _nonIterableSpread;

function _toConsumableArray(arr) {
  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();
}

var toConsumableArray = _toConsumableArray;

var ChildMapping = createCommonjsModule(function (module, exports) {

exports.__esModule = true;
exports.getChildMapping = getChildMapping;
exports.mergeChildMappings = mergeChildMappings;
exports.getInitialChildMapping = getInitialChildMapping;
exports.getNextChildMapping = getNextChildMapping;



/**
 * Given `this.props.children`, return an object mapping key to child.
 *
 * @param {*} children `this.props.children`
 * @return {object} Mapping of key to child
 */
function getChildMapping(children, mapFn) {
  var mapper = function mapper(child) {
    return mapFn && (0, react.isValidElement)(child) ? mapFn(child) : child;
  };

  var result = Object.create(null);
  if (children) react.Children.map(children, function (c) {
    return c;
  }).forEach(function (child) {
    // run the map function here instead so that the key is the computed one
    result[child.key] = mapper(child);
  });
  return result;
}
/**
 * When you're adding or removing children some may be added or removed in the
 * same render pass. We want to show *both* since we want to simultaneously
 * animate elements in and out. This function takes a previous set of keys
 * and a new set of keys and merges them with its best guess of the correct
 * ordering. In the future we may expose some of the utilities in
 * ReactMultiChild to make this easy, but for now React itself does not
 * directly have this concept of the union of prevChildren and nextChildren
 * so we implement it here.
 *
 * @param {object} prev prev children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @param {object} next next children as returned from
 * `ReactTransitionChildMapping.getChildMapping()`.
 * @return {object} a key set that contains all keys in `prev` and all keys
 * in `next` in a reasonable order.
 */


function mergeChildMappings(prev, next) {
  prev = prev || {};
  next = next || {};

  function getValueForKey(key) {
    return key in next ? next[key] : prev[key];
  } // For each key of `next`, the list of keys to insert before that key in
  // the combined list


  var nextKeysPending = Object.create(null);
  var pendingKeys = [];

  for (var prevKey in prev) {
    if (prevKey in next) {
      if (pendingKeys.length) {
        nextKeysPending[prevKey] = pendingKeys;
        pendingKeys = [];
      }
    } else {
      pendingKeys.push(prevKey);
    }
  }

  var i;
  var childMapping = {};

  for (var nextKey in next) {
    if (nextKeysPending[nextKey]) {
      for (i = 0; i < nextKeysPending[nextKey].length; i++) {
        var pendingNextKey = nextKeysPending[nextKey][i];
        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
      }
    }

    childMapping[nextKey] = getValueForKey(nextKey);
  } // Finally, add the keys which didn't appear before any key in `next`


  for (i = 0; i < pendingKeys.length; i++) {
    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
  }

  return childMapping;
}

function getProp(child, prop, props) {
  return props[prop] != null ? props[prop] : child.props[prop];
}

function getInitialChildMapping(props, onExited) {
  return getChildMapping(props.children, function (child) {
    return (0, react.cloneElement)(child, {
      onExited: onExited.bind(null, child),
      in: true,
      appear: getProp(child, 'appear', props),
      enter: getProp(child, 'enter', props),
      exit: getProp(child, 'exit', props)
    });
  });
}

function getNextChildMapping(nextProps, prevChildMapping, onExited) {
  var nextChildMapping = getChildMapping(nextProps.children);
  var children = mergeChildMappings(prevChildMapping, nextChildMapping);
  Object.keys(children).forEach(function (key) {
    var child = children[key];
    if (!(0, react.isValidElement)(child)) return;
    var hasPrev = key in prevChildMapping;
    var hasNext = key in nextChildMapping;
    var prevChild = prevChildMapping[key];
    var isLeaving = (0, react.isValidElement)(prevChild) && !prevChild.props.in; // item is new (entering)

    if (hasNext && (!hasPrev || isLeaving)) {
      // console.log('entering', key)
      children[key] = (0, react.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: true,
        exit: getProp(child, 'exit', nextProps),
        enter: getProp(child, 'enter', nextProps)
      });
    } else if (!hasNext && hasPrev && !isLeaving) {
      // item is old (exiting)
      // console.log('leaving', key)
      children[key] = (0, react.cloneElement)(child, {
        in: false
      });
    } else if (hasNext && hasPrev && (0, react.isValidElement)(prevChild)) {
      // item hasn't changed transition states
      // copy over the last transition props;
      // console.log('unchanged', key)
      children[key] = (0, react.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: prevChild.props.in,
        exit: getProp(child, 'exit', nextProps),
        enter: getProp(child, 'enter', nextProps)
      });
    }
  });
  return children;
}
});

unwrapExports(ChildMapping);
var ChildMapping_1 = ChildMapping.getChildMapping;
var ChildMapping_2 = ChildMapping.mergeChildMappings;
var ChildMapping_3 = ChildMapping.getInitialChildMapping;
var ChildMapping_4 = ChildMapping.getNextChildMapping;

var TransitionGroup_1 = createCommonjsModule(function (module, exports) {

exports.__esModule = true;
exports.default = void 0;

var _propTypes = _interopRequireDefault(propTypes);

var _react = _interopRequireDefault(react);





function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

var values = Object.values || function (obj) {
  return Object.keys(obj).map(function (k) {
    return obj[k];
  });
};
var defaultProps = {
  component: 'div',
  childFactory: function childFactory(child) {
    return child;
  }
  /**
   * The `<TransitionGroup>` component manages a set of transition components
   * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
   * components, `<TransitionGroup>` is a state machine for managing the mounting
   * and unmounting of components over time.
   *
   * Consider the example below. As items are removed or added to the TodoList the
   * `in` prop is toggled automatically by the `<TransitionGroup>`.
   *
   * Note that `<TransitionGroup>`  does not define any animation behavior!
   * Exactly _how_ a list item animates is up to the individual transition
   * component. This means you can mix and match animations across different list
   * items.
   */

};

var TransitionGroup =
/*#__PURE__*/
function (_React$Component) {
  _inheritsLoose(TransitionGroup, _React$Component);

  function TransitionGroup(props, context) {
    var _this;

    _this = _React$Component.call(this, props, context) || this;

    var handleExited = _this.handleExited.bind(_assertThisInitialized(_assertThisInitialized(_this))); // Initial children should all be entering, dependent on appear


    _this.state = {
      handleExited: handleExited,
      firstRender: true
    };
    return _this;
  }

  var _proto = TransitionGroup.prototype;

  _proto.getChildContext = function getChildContext() {
    return {
      transitionGroup: {
        isMounting: !this.appeared
      }
    };
  };

  _proto.componentDidMount = function componentDidMount() {
    this.appeared = true;
  };

  TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
    var prevChildMapping = _ref.children,
        handleExited = _ref.handleExited,
        firstRender = _ref.firstRender;
    return {
      children: firstRender ? (0, ChildMapping.getInitialChildMapping)(nextProps, handleExited) : (0, ChildMapping.getNextChildMapping)(nextProps, prevChildMapping, handleExited),
      firstRender: false
    };
  };

  _proto.handleExited = function handleExited(child, node) {
    var currentChildMapping = (0, ChildMapping.getChildMapping)(this.props.children);
    if (child.key in currentChildMapping) return;

    if (child.props.onExited) {
      child.props.onExited(node);
    }

    this.setState(function (state) {
      var children = _extends({}, state.children);

      delete children[child.key];
      return {
        children: children
      };
    });
  };

  _proto.render = function render() {
    var _this$props = this.props,
        Component = _this$props.component,
        childFactory = _this$props.childFactory,
        props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);

    var children = values(this.state.children).map(childFactory);
    delete props.appear;
    delete props.enter;
    delete props.exit;

    if (Component === null) {
      return children;
    }

    return _react.default.createElement(Component, props, children);
  };

  return TransitionGroup;
}(_react.default.Component);

TransitionGroup.childContextTypes = {
  transitionGroup: _propTypes.default.object.isRequired
};
TransitionGroup.propTypes = {};
TransitionGroup.defaultProps = defaultProps;

var _default = (0, reactLifecyclesCompat_es.polyfill)(TransitionGroup);

exports.default = _default;
module.exports = exports["default"];
});

var TransitionGroup = unwrapExports(TransitionGroup_1);

/**
                                                             * @ignore - internal component.
                                                             */var
Ripple = /*#__PURE__*/function (_React$Component) {inherits(Ripple, _React$Component);function Ripple() {var _getPrototypeOf2;var _this;classCallCheck(this, Ripple);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Ripple)).call.apply(_getPrototypeOf2, [this].concat(args)));defineProperty(assertThisInitialized(assertThisInitialized(_this)), "state",
    {
      visible: false,
      leaving: false });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleEnter",


    function () {
      _this.setState({
        visible: true });

    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleExit",

    function () {
      _this.setState({
        leaving: true });

    });return _this;}createClass(Ripple, [{ key: "render", value: function render()

    {var _classNames, _classNames2;var _this$props =








      this.props,classes = _this$props.classes,classNameProp = _this$props.className,pulsate = _this$props.pulsate,rippleX = _this$props.rippleX,rippleY = _this$props.rippleY,rippleSize = _this$props.rippleSize,other = objectWithoutProperties(_this$props, ["classes", "className", "pulsate", "rippleX", "rippleY", "rippleSize"]);var _this$state =
      this.state,visible = _this$state.visible,leaving = _this$state.leaving;

      var rippleClassName = classnames(
      classes.ripple, (_classNames = {}, defineProperty(_classNames,

      classes.rippleVisible, visible), defineProperty(_classNames,
      classes.ripplePulsate, pulsate), _classNames),

      classNameProp);


      var rippleStyles = {
        width: rippleSize,
        height: rippleSize,
        top: -(rippleSize / 2) + rippleY,
        left: -(rippleSize / 2) + rippleX };


      var childClassName = classnames(classes.child, (_classNames2 = {}, defineProperty(_classNames2,
      classes.childLeaving, leaving), defineProperty(_classNames2,
      classes.childPulsate, pulsate), _classNames2));


      return (
        react.createElement(Transition, _extends_1({ onEnter: this.handleEnter, onExit: this.handleExit }, other),
        react.createElement("span", { className: rippleClassName, style: rippleStyles },
        react.createElement("span", { className: childClassName }))));



    } }]);return Ripple;}(react.Component);


Ripple.propTypes = {
  /**
                      * Override or extend the styles applied to the component.
                      * See [CSS API](#css-api) below for more details.
                      */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * If `true`, the ripple pulsates, typically indicating the keyboard focus state of an element.
                                */
  pulsate: propTypes.bool,
  /**
                            * Diameter of the ripple.
                            */
  rippleSize: propTypes.number,
  /**
                                 * Horizontal position of the ripple center.
                                 */
  rippleX: propTypes.number,
  /**
                              * Vertical position of the ripple center.
                              */
  rippleY: propTypes.number };


Ripple.defaultProps = {
  pulsate: false };

var DURATION = 550;
var DELAY_RIPPLE = 80;

var styles$7 = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: {
      display: 'block',
      position: 'absolute',
      overflow: 'hidden',
      borderRadius: 'inherit',
      width: '100%',
      height: '100%',
      left: 0,
      top: 0,
      pointerEvents: 'none',
      zIndex: 0 },

    /* Styles applied to the internal `Ripple` components `ripple` class. */
    ripple: {
      width: 50,
      height: 50,
      left: 0,
      top: 0,
      opacity: 0,
      position: 'absolute' },

    /* Styles applied to the internal `Ripple` components `rippleVisible` class. */
    rippleVisible: {
      opacity: 0.3,
      transform: 'scale(1)',
      animation: "mui-ripple-enter ".concat(DURATION, "ms ").concat(theme.transitions.easing.easeInOut) },

    /* Styles applied to the internal `Ripple` components `ripplePulsate` class. */
    ripplePulsate: {
      animationDuration: "".concat(theme.transitions.duration.shorter, "ms") },

    /* Styles applied to the internal `Ripple` components `child` class. */
    child: {
      opacity: 1,
      display: 'block',
      width: '100%',
      height: '100%',
      borderRadius: '50%',
      backgroundColor: 'currentColor' },

    /* Styles applied to the internal `Ripple` components `childLeaving` class. */
    childLeaving: {
      opacity: 0,
      animation: "mui-ripple-exit ".concat(DURATION, "ms ").concat(theme.transitions.easing.easeInOut) },

    /* Styles applied to the internal `Ripple` components `childPulsate` class. */
    childPulsate: {
      position: 'absolute',
      left: 0,
      top: 0,
      animation: "mui-ripple-pulsate 2500ms ".concat(theme.transitions.easing.easeInOut, " 200ms infinite") },

    '@keyframes mui-ripple-enter': {
      '0%': {
        transform: 'scale(0)',
        opacity: 0.1 },

      '100%': {
        transform: 'scale(1)',
        opacity: 0.3 } },


    '@keyframes mui-ripple-exit': {
      '0%': {
        opacity: 1 },

      '100%': {
        opacity: 0 } },


    '@keyframes mui-ripple-pulsate': {
      '0%': {
        transform: 'scale(1)' },

      '50%': {
        transform: 'scale(0.92)' },

      '100%': {
        transform: 'scale(1)' } } };};var




TouchRipple = /*#__PURE__*/function (_React$PureComponent) {inherits(TouchRipple, _React$PureComponent);function TouchRipple() {var _getPrototypeOf2;var _this;classCallCheck(this, TouchRipple);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(TouchRipple)).call.apply(_getPrototypeOf2, [this].concat(args)));defineProperty(assertThisInitialized(assertThisInitialized(_this)), "state",










    {
      // eslint-disable-next-line react/no-unused-state
      nextKey: 0,
      ripples: [] });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "pulsate",






    function () {
      _this.start({}, { pulsate: true });
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "start",

    function () {var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};var cb = arguments.length > 2 ? arguments[2] : undefined;var _options$pulsate =




      options.pulsate,pulsate = _options$pulsate === void 0 ? false : _options$pulsate,_options$center = options.center,center = _options$center === void 0 ? _this.props.center || options.pulsate : _options$center,_options$fakeElement = options.fakeElement,fakeElement = _options$fakeElement === void 0 ? false : _options$fakeElement;

      if (event.type === 'mousedown' && _this.ignoringMouseDown) {
        _this.ignoringMouseDown = false;
        return;
      }

      if (event.type === 'touchstart') {
        _this.ignoringMouseDown = true;
      }

      var element = fakeElement ? null : reactDom.findDOMNode(assertThisInitialized(assertThisInitialized(_this)));
      var rect = element ?
      element.getBoundingClientRect() :
      {
        width: 0,
        height: 0,
        left: 0,
        top: 0 };


      // Get the size of the ripple
      var rippleX;
      var rippleY;
      var rippleSize;

      if (
      center ||
      event.clientX === 0 && event.clientY === 0 ||
      !event.clientX && !event.touches)
      {
        rippleX = Math.round(rect.width / 2);
        rippleY = Math.round(rect.height / 2);
      } else {
        var clientX = event.clientX ? event.clientX : event.touches[0].clientX;
        var clientY = event.clientY ? event.clientY : event.touches[0].clientY;
        rippleX = Math.round(clientX - rect.left);
        rippleY = Math.round(clientY - rect.top);
      }

      if (center) {
        rippleSize = Math.sqrt((2 * Math.pow(rect.width, 2) + Math.pow(rect.height, 2)) / 3);

        // For some reason the animation is broken on Mobile Chrome if the size if even.
        if (rippleSize % 2 === 0) {
          rippleSize += 1;
        }
      } else {
        var sizeX =
        Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;
        var sizeY =
        Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;
        rippleSize = Math.sqrt(Math.pow(sizeX, 2) + Math.pow(sizeY, 2));
      }

      // Touche devices
      if (event.touches) {
        // Prepare the ripple effect.
        _this.startTimerCommit = function () {
          _this.startCommit({ pulsate: pulsate, rippleX: rippleX, rippleY: rippleY, rippleSize: rippleSize, cb: cb });
        };
        // Deplay the execution of the ripple effect.
        _this.startTimer = setTimeout(function () {
          if (_this.startTimerCommit) {
            _this.startTimerCommit();
            _this.startTimerCommit = null;
          }
        }, DELAY_RIPPLE); // We have to make a tradeoff with this value.
      } else {
        _this.startCommit({ pulsate: pulsate, rippleX: rippleX, rippleY: rippleY, rippleSize: rippleSize, cb: cb });
      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "startCommit",

    function (params) {var
      pulsate = params.pulsate,rippleX = params.rippleX,rippleY = params.rippleY,rippleSize = params.rippleSize,cb = params.cb;

      _this.setState(function (state) {
        return {
          nextKey: state.nextKey + 1,
          ripples: toConsumableArray(
          state.ripples).concat([
          react.createElement(Ripple, {
            key: state.nextKey,
            classes: _this.props.classes,
            timeout: {
              exit: DURATION,
              enter: DURATION },

            pulsate: pulsate,
            rippleX: rippleX,
            rippleY: rippleY,
            rippleSize: rippleSize })]) };



      }, cb);
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "stop",

    function (event, cb) {
      clearTimeout(_this.startTimer);var
      ripples = _this.state.ripples;

      // The touch interaction occurs too quickly.
      // We still want to show ripple effect.
      if (event.type === 'touchend' && _this.startTimerCommit) {
        event.persist();
        _this.startTimerCommit();
        _this.startTimerCommit = null;
        _this.startTimer = setTimeout(function () {
          _this.stop(event, cb);
        }, 0);
        return;
      }

      _this.startTimerCommit = null;

      if (ripples && ripples.length) {
        _this.setState(
        {
          ripples: ripples.slice(1) },

        cb);

      }
    });return _this;}createClass(TouchRipple, [{ key: "componentWillUnmount", value: function componentWillUnmount() {clearTimeout(this.startTimer);} }, { key: "render", value: function render()

    {var _this$props =
      this.props,center = _this$props.center,classes = _this$props.classes,className = _this$props.className,other = objectWithoutProperties(_this$props, ["center", "classes", "className"]);

      return (
        react.createElement(TransitionGroup, _extends_1({
          component: "span",
          enter: true,
          exit: true,
          className: classnames(classes.root, className) },
        other),

        this.state.ripples));


    } }]);return TouchRipple;}(react.PureComponent);


TouchRipple.propTypes = {
  /**
                           * If `true`, the ripple starts at the center of the component
                           * rather than at the point of interaction.
                           */
  center: propTypes.bool,
  /**
                           * Override or extend the styles applied to the component.
                           * See [CSS API](#css-api) below for more details.
                           */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string };


TouchRipple.defaultProps = {
  center: false };


var TouchRipple$1 = withStyles(styles$7, { flip: false, name: 'MuiTouchRipple' })(TouchRipple);

/* eslint-disable import/no-mutable-exports */

var createRippleHandler = function createRippleHandler(instance, eventName, action, cb) {return function (event) {
    if (cb) {
      cb.call(instance, event);
    }

    var ignore = false;

    // Ignore events that have been `event.preventDefault()` marked.
    if (event.defaultPrevented) {
      ignore = true;
    }

    if (instance.props.disableTouchRipple && eventName !== 'Blur') {
      ignore = true;
    }

    if (!ignore && instance.ripple) {
      instance.ripple[action](event);
    }

    if (typeof instance.props["on".concat(eventName)] === 'function') {
      instance.props["on".concat(eventName)](event);
    }

    return true;
  };};

/* istanbul ignore if */
if (typeof window === 'undefined') {
  createRippleHandler = function createRippleHandler() {return function () {};};
}

var createRippleHandler$1 = createRippleHandler;

var styles$8 = {
  /* Styles applied to the root element. */
  root: {
    display: 'inline-flex',
    alignItems: 'center',
    justifyContent: 'center',
    position: 'relative',
    // Remove grey highlight
    WebkitTapHighlightColor: 'transparent',
    backgroundColor: 'transparent', // Reset default value
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 'none',
    border: 0,
    margin: 0, // Remove the margin in Safari
    borderRadius: 0,
    padding: 0, // Remove the padding in Firefox
    cursor: 'pointer',
    userSelect: 'none',
    verticalAlign: 'middle',
    '-moz-appearance': 'none', // Reset
    '-webkit-appearance': 'none', // Reset
    textDecoration: 'none',
    // So we take precedent over the style of a native <a /> element.
    color: 'inherit',
    '&::-moz-focus-inner': {
      borderStyle: 'none' // Remove Firefox dotted outline.
    },
    '&$disabled': {
      pointerEvents: 'none', // Disable link interactions
      cursor: 'default' } },


  /* Styles applied to the root element if `disabled={true}`. */
  disabled: {},
  /* Styles applied to the root element if keyboard focused. */
  focusVisible: {} };

/**
   * `ButtonBase` contains as few styles as possible.
   * It aims to be a simple building block for creating a button.
   * It contains a load of style reset and some focus/ripple logic.
   */var
ButtonBase = /*#__PURE__*/function (_React$Component) {inherits(ButtonBase, _React$Component);function ButtonBase() {var _getPrototypeOf2;var _this;classCallCheck(this, ButtonBase);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(ButtonBase)).call.apply(_getPrototypeOf2, [this].concat(args)));defineProperty(assertThisInitialized(assertThisInitialized(_this)), "state",
    {});defineProperty(assertThisInitialized(assertThisInitialized(_this)), "keyDown",

    false);defineProperty(assertThisInitialized(assertThisInitialized(_this)), "focusVisibleCheckTime",

    50);defineProperty(assertThisInitialized(assertThisInitialized(_this)), "focusVisibleMaxCheckTimes",

    5);defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleMouseDown",

    createRippleHandler$1(assertThisInitialized(assertThisInitialized(_this)), 'MouseDown', 'start', function () {
      clearTimeout(_this.focusVisibleTimeout);
      if (_this.state.focusVisible) {
        _this.setState({ focusVisible: false });
      }
    }));defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleMouseUp",

    createRippleHandler$1(assertThisInitialized(assertThisInitialized(_this)), 'MouseUp', 'stop'));defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleMouseLeave",

    createRippleHandler$1(assertThisInitialized(assertThisInitialized(_this)), 'MouseLeave', 'stop', function (event) {
      if (_this.state.focusVisible) {
        event.preventDefault();
      }
    }));defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleTouchStart",

    createRippleHandler$1(assertThisInitialized(assertThisInitialized(_this)), 'TouchStart', 'start'));defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleTouchEnd",

    createRippleHandler$1(assertThisInitialized(assertThisInitialized(_this)), 'TouchEnd', 'stop'));defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleTouchMove",

    createRippleHandler$1(assertThisInitialized(assertThisInitialized(_this)), 'TouchMove', 'stop'));defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleBlur",

    createRippleHandler$1(assertThisInitialized(assertThisInitialized(_this)), 'Blur', 'stop', function () {
      clearTimeout(_this.focusVisibleTimeout);
      if (_this.state.focusVisible) {
        _this.setState({ focusVisible: false });
      }
    }));defineProperty(assertThisInitialized(assertThisInitialized(_this)), "onRippleRef",






























    function (node) {
      _this.ripple = node;
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "onFocusVisibleHandler",

    function (event) {
      _this.keyDown = false;
      _this.setState({ focusVisible: true });

      if (_this.props.onFocusVisible) {
        _this.props.onFocusVisible(event);
      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleKeyDown",























    function (event) {var _this$props =
      _this.props,component = _this$props.component,focusRipple = _this$props.focusRipple,onKeyDown = _this$props.onKeyDown,onClick = _this$props.onClick;
      var key = keycode(event);

      // Check if key is already down to avoid repeats being counted as multiple activations
      if (focusRipple && !_this.keyDown && _this.state.focusVisible && _this.ripple && key === 'space') {
        _this.keyDown = true;
        event.persist();
        _this.ripple.stop(event, function () {
          _this.ripple.start(event);
        });
      }

      if (onKeyDown) {
        onKeyDown(event);
      }

      // Keyboard accessibility for non interactive elements
      if (
      event.target === event.currentTarget &&
      component &&
      component !== 'button' && (
      key === 'space' || key === 'enter') &&
      !(_this.button.tagName === 'A' && _this.button.href))
      {
        event.preventDefault();
        if (onClick) {
          onClick(event);
        }
      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleKeyUp",

    function (event) {
      if (
      _this.props.focusRipple &&
      keycode(event) === 'space' &&
      _this.ripple &&
      _this.state.focusVisible)
      {
        _this.keyDown = false;
        event.persist();
        _this.ripple.stop(event, function () {
          _this.ripple.pulsate(event);
        });
      }
      if (_this.props.onKeyUp) {
        _this.props.onKeyUp(event);
      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleFocus",

    function (event) {
      if (_this.props.disabled) {
        return;
      }

      // Fix for https://github.com/facebook/react/issues/7769
      if (!_this.button) {
        _this.button = event.currentTarget;
      }

      event.persist();
      detectFocusVisible(assertThisInitialized(assertThisInitialized(_this)), _this.button, function () {
        _this.onFocusVisibleHandler(event);
      });

      if (_this.props.onFocus) {
        _this.props.onFocus(event);
      }
    });return _this;}createClass(ButtonBase, [{ key: "componentDidMount", value: function componentDidMount() {var _this2 = this;this.button = reactDom.findDOMNode(this);listenForFocusKeys(ownerWindow(this.button));if (this.props.action) {this.props.action({ focusVisible: function focusVisible() {_this2.setState({ focusVisible: true });_this2.button.focus();} });}} }, { key: "componentDidUpdate", value: function componentDidUpdate(prevProps, prevState) {if (this.props.focusRipple && !this.props.disableRipple && !prevState.focusVisible && this.state.focusVisible) {this.ripple.pulsate();}} }, { key: "componentWillUnmount", value: function componentWillUnmount() {clearTimeout(this.focusVisibleTimeout);} }, { key: "render", value: function render()

    {var _classNames;var _this$props2 =




























      this.props,action = _this$props2.action,buttonRef = _this$props2.buttonRef,centerRipple = _this$props2.centerRipple,children = _this$props2.children,classes = _this$props2.classes,classNameProp = _this$props2.className,component = _this$props2.component,disabled = _this$props2.disabled,disableRipple = _this$props2.disableRipple,disableTouchRipple = _this$props2.disableTouchRipple,focusRipple = _this$props2.focusRipple,focusVisibleClassName = _this$props2.focusVisibleClassName,onBlur = _this$props2.onBlur,onFocus = _this$props2.onFocus,onFocusVisible = _this$props2.onFocusVisible,onKeyDown = _this$props2.onKeyDown,onKeyUp = _this$props2.onKeyUp,onMouseDown = _this$props2.onMouseDown,onMouseLeave = _this$props2.onMouseLeave,onMouseUp = _this$props2.onMouseUp,onTouchEnd = _this$props2.onTouchEnd,onTouchMove = _this$props2.onTouchMove,onTouchStart = _this$props2.onTouchStart,tabIndex = _this$props2.tabIndex,TouchRippleProps = _this$props2.TouchRippleProps,type = _this$props2.type,other = objectWithoutProperties(_this$props2, ["action", "buttonRef", "centerRipple", "children", "classes", "className", "component", "disabled", "disableRipple", "disableTouchRipple", "focusRipple", "focusVisibleClassName", "onBlur", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseDown", "onMouseLeave", "onMouseUp", "onTouchEnd", "onTouchMove", "onTouchStart", "tabIndex", "TouchRippleProps", "type"]);

      var className = classnames(
      classes.root, (_classNames = {}, defineProperty(_classNames,

      classes.disabled, disabled), defineProperty(_classNames,
      classes.focusVisible, this.state.focusVisible), defineProperty(_classNames,
      focusVisibleClassName, this.state.focusVisible), _classNames),

      classNameProp);


      var ComponentProp = component;

      if (ComponentProp === 'button' && other.href) {
        ComponentProp = 'a';
      }

      var buttonProps = {};
      if (ComponentProp === 'button') {
        buttonProps.type = type || 'button';
        buttonProps.disabled = disabled;
      } else {
        buttonProps.role = 'button';
      }

      return (
        react.createElement(ComponentProp, _extends_1({
          className: className,
          onBlur: this.handleBlur,
          onFocus: this.handleFocus,
          onKeyDown: this.handleKeyDown,
          onKeyUp: this.handleKeyUp,
          onMouseDown: this.handleMouseDown,
          onMouseLeave: this.handleMouseLeave,
          onMouseUp: this.handleMouseUp,
          onTouchEnd: this.handleTouchEnd,
          onTouchMove: this.handleTouchMove,
          onTouchStart: this.handleTouchStart,
          ref: buttonRef,
          tabIndex: disabled ? '-1' : tabIndex },
        buttonProps,
        other),

        children,
        !disableRipple && !disabled ?
        react.createElement(NoSsr, null,

        react.createElement(TouchRipple$1, _extends_1({ innerRef: this.onRippleRef, center: centerRipple }, TouchRippleProps))) :

        null));


    } }], [{ key: "getDerivedStateFromProps", value: function getDerivedStateFromProps(nextProps, prevState) {if (typeof prevState.focusVisible === 'undefined') {return { focusVisible: false, lastDisabled: nextProps.disabled };} // The blur won't fire when the disabled state is set on a focused input.
      // We need to book keep the focused state manually.
      if (!prevState.prevState && nextProps.disabled && prevState.focusVisible) {return { focusVisible: false, lastDisabled: nextProps.disabled };}return { lastDisabled: nextProps.disabled };} }]);return ButtonBase;}(react.Component);
ButtonBase.propTypes = {
  /**
                          * Callback fired when the component mounts.
                          * This is useful when you want to trigger an action programmatically.
                          * It currently only supports `focusVisible()` action.
                          *
                          * @param {object} actions This object contains all possible actions
                          * that can be triggered programmatically.
                          */
  action: propTypes.func,
  /**
                           * Use that property to pass a ref callback to the native button component.
                           */
  buttonRef: propTypes.oneOfType([propTypes.func, propTypes.object]),
  /**
                                                                       * If `true`, the ripples will be centered.
                                                                       * They won't start at the cursor interaction position.
                                                                       */
  centerRipple: propTypes.bool,
  /**
                                 * The content of the component.
                                 */
  children: propTypes.node,
  /**
                             * Override or extend the styles applied to the component.
                             * See [CSS API](#css-api) below for more details.
                             */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * The component used for the root node.
                                * Either a string to use a DOM element or a component.
                                */
  component: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                         * If `true`, the base button will be disabled.
                                                                                         */
  disabled: propTypes.bool,
  /**
                             * If `true`, the ripple effect will be disabled.
                             */
  disableRipple: propTypes.bool,
  /**
                                  * If `true`, the touch ripple effect will be disabled.
                                  */
  disableTouchRipple: propTypes.bool,
  /**
                                       * If `true`, the base button will have a keyboard focus ripple.
                                       * `disableRipple` must also be `false`.
                                       */
  focusRipple: propTypes.bool,
  /**
                                * This property can help a person know which element has the keyboard focus.
                                * The class name will be applied when the element gain the focus through a keyboard interaction.
                                * It's a polyfill for the [CSS :focus-visible feature](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
                                * The rational for using this feature [is explain here](https://github.com/WICG/focus-visible/blob/master/explainer.md).
                                */
  focusVisibleClassName: propTypes.string,
  /**
                                            * @ignore
                                            */
  onBlur: propTypes.func,
  /**
                           * @ignore
                           */
  onClick: propTypes.func,
  /**
                            * @ignore
                            */
  onFocus: propTypes.func,
  /**
                            * Callback fired when the component is focused with a keyboard.
                            * We trigger a `onFocus` callback too.
                            */
  onFocusVisible: propTypes.func,
  /**
                                   * @ignore
                                   */
  onKeyDown: propTypes.func,
  /**
                              * @ignore
                              */
  onKeyUp: propTypes.func,
  /**
                            * @ignore
                            */
  onMouseDown: propTypes.func,
  /**
                                * @ignore
                                */
  onMouseLeave: propTypes.func,
  /**
                                 * @ignore
                                 */
  onMouseUp: propTypes.func,
  /**
                              * @ignore
                              */
  onTouchEnd: propTypes.func,
  /**
                               * @ignore
                               */
  onTouchMove: propTypes.func,
  /**
                                * @ignore
                                */
  onTouchStart: propTypes.func,
  /**
                                 * @ignore
                                 */
  role: propTypes.string,
  /**
                           * @ignore
                           */
  tabIndex: propTypes.oneOfType([propTypes.number, propTypes.string]),
  /**
                                                                        * Properties applied to the `TouchRipple` element.
                                                                        */
  TouchRippleProps: propTypes.object,
  /**
                                       * Used to control the button's purpose.
                                       * This property passes the value to the `type` attribute of the native button component.
                                       * Valid property values include `button`, `submit`, and `reset`.
                                       */
  type: propTypes.string };


ButtonBase.defaultProps = {
  centerRipple: false,
  component: 'button',
  disableRipple: false,
  disableTouchRipple: false,
  focusRipple: false,
  tabIndex: '0',
  type: 'button' };


var ButtonBase$1 = withStyles(styles$8, { name: 'MuiButtonBase' })(ButtonBase);

function unsupportedProp(props, propName, componentName, location, propFullName) {
  /* istanbul ignore if */
  {
    return null;
  }

  var propFullNameSafe = propFullName || propName;

  if (typeof props[propName] !== 'undefined') {
    return new Error("The property `".concat(propFullNameSafe, "` is not supported. Please remove it."));
  }

  return null;
}

var styles$9 = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: {
      transition: theme.transitions.create(['color', 'padding-top'], {
        duration: theme.transitions.duration.short }),

      paddingTop: 8,
      paddingBottom: 10,
      paddingLeft: 12,
      paddingRight: 12,
      minWidth: 80,
      maxWidth: 168,
      color: theme.palette.text.secondary,
      flex: '1',
      '&$iconOnly': {
        paddingTop: 16 },

      '&$selected': {
        paddingTop: 6,
        color: theme.palette.primary.main } },


    /* Styles applied to the root element if selected. */
    selected: {},
    /* Styles applied to the root element if `showLabel={false}` and not selected. */
    iconOnly: {},
    /* Styles applied to the span element that wraps the icon and label. */
    wrapper: {
      display: 'inline-flex',
      alignItems: 'center',
      justifyContent: 'center',
      width: '100%',
      flexDirection: 'column' },

    /* Styles applied to the label's span element. */
    label: {
      fontFamily: theme.typography.fontFamily,
      fontSize: theme.typography.pxToRem(12),
      opacity: 1,
      transition: 'font-size 0.2s, opacity 0.2s',
      transitionDelay: '0.1s',
      '&$iconOnly': {
        opacity: 0,
        transitionDelay: '0s' },

      '&$selected': {
        fontSize: theme.typography.pxToRem(14) } } };};var




BottomNavigationAction = /*#__PURE__*/function (_React$Component) {inherits(BottomNavigationAction, _React$Component);function BottomNavigationAction() {var _getPrototypeOf2;var _this;classCallCheck(this, BottomNavigationAction);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(BottomNavigationAction)).call.apply(_getPrototypeOf2, [this].concat(args)));defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleChange",
    function (event) {var _this$props =
      _this.props,onChange = _this$props.onChange,value = _this$props.value,onClick = _this$props.onClick;

      if (onChange) {
        onChange(event, value);
      }

      if (onClick) {
        onClick(event);
      }
    });return _this;}createClass(BottomNavigationAction, [{ key: "render", value: function render()

    {var _classNames, _classNames2;var _this$props2 =











      this.props,classes = _this$props2.classes,classNameProp = _this$props2.className,icon = _this$props2.icon,label = _this$props2.label,onChange = _this$props2.onChange,onClick = _this$props2.onClick,selected = _this$props2.selected,showLabelProp = _this$props2.showLabel,value = _this$props2.value,other = objectWithoutProperties(_this$props2, ["classes", "className", "icon", "label", "onChange", "onClick", "selected", "showLabel", "value"]);

      var className = classnames(
      classes.root, (_classNames = {}, defineProperty(_classNames,

      classes.selected, selected), defineProperty(_classNames,
      classes.iconOnly, !showLabelProp && !selected), _classNames),

      classNameProp);


      var labelClassName = classnames(classes.label, (_classNames2 = {}, defineProperty(_classNames2,
      classes.selected, selected), defineProperty(_classNames2,
      classes.iconOnly, !showLabelProp && !selected), _classNames2));


      return (
        react.createElement(ButtonBase$1, _extends_1({ className: className, focusRipple: true, onClick: this.handleChange }, other),
        react.createElement("span", { className: classes.wrapper },
        icon,
        react.createElement("span", { className: labelClassName }, label))));



    } }]);return BottomNavigationAction;}(react.Component);


BottomNavigationAction.propTypes = {
  /**
                                      * This property isn't supported.
                                      * Use the `component` property if you need to change the children structure.
                                      */
  children: unsupportedProp,
  /**
                              * Override or extend the styles applied to the component.
                              * See [CSS API](#css-api) below for more details.
                              */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * The icon element.
                                */
  icon: propTypes.node,
  /**
                         * The label element.
                         */
  label: propTypes.node,
  /**
                          * @ignore
                          */
  onChange: propTypes.func,
  /**
                             * @ignore
                             */
  onClick: propTypes.func,
  /**
                            * @ignore
                            */
  selected: propTypes.bool,
  /**
                             * If `true`, the `BottomNavigationAction` will show its label.
                             * By default, only the selected `BottomNavigationAction`
                             * inside `BottomNavigation` will show its label.
                             */
  showLabel: propTypes.bool,
  /**
                              * You can provide your own value. Otherwise, we fallback to the child position index.
                              */
  value: propTypes.any };


withStyles(styles$9, { name: 'MuiBottomNavigationAction' })(BottomNavigationAction);

function chainPropTypes(propType1, propType2) {
  /* istanbul ignore if */
  {
    return function () {return null;};
  }

  return function validate() {
    return propType1.apply(void 0, arguments) || propType2.apply(void 0, arguments);
  };
}

var styles$a = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: objectSpread({},
    theme.typography.button, {
      boxSizing: 'border-box',
      minWidth: 64,
      minHeight: 36,
      padding: '8px 16px',
      borderRadius: theme.shape.borderRadius,
      color: theme.palette.text.primary,
      transition: theme.transitions.create(['background-color', 'box-shadow', 'border'], {
        duration: theme.transitions.duration.short }),

      '&:hover': {
        textDecoration: 'none',
        backgroundColor: fade(theme.palette.text.primary, theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: 'transparent' },

        '&$disabled': {
          backgroundColor: 'transparent' } },


      '&$disabled': {
        color: theme.palette.action.disabled } }),


    /* Styles applied to the span element that wraps the children. */
    label: {
      width: '100%', // assure the correct width for iOS Safari
      display: 'inherit',
      alignItems: 'inherit',
      justifyContent: 'inherit' },

    /* Styles applied to the root element if `variant="text"`. */
    text: {},
    /* Styles applied to the root element if `variant="text"` and `color="primary"`. */
    textPrimary: {
      color: theme.palette.primary.main,
      '&:hover': {
        backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: 'transparent' } } },



    /* Styles applied to the root element if `variant="text"` and `color="secondary"`. */
    textSecondary: {
      color: theme.palette.secondary.main,
      '&:hover': {
        backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: 'transparent' } } },



    /* Styles applied to the root element for backwards compatibility with legacy variant naming. */
    flat: {},
    /* Styles applied to the root element for backwards compatibility with legacy variant naming. */
    flatPrimary: {},
    /* Styles applied to the root element for backwards compatibility with legacy variant naming. */
    flatSecondary: {},
    /* Styles applied to the root element if `variant="outlined"`. */
    outlined: {
      border: "1px solid ".concat(
      theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)') },


    /* Styles applied to the root element if `variant="outlined"` and `color="primary"`. */
    outlinedPrimary: {
      color: theme.palette.primary.main,
      border: "1px solid ".concat(fade(theme.palette.primary.main, 0.5)),
      '&:hover': {
        border: "1px solid ".concat(theme.palette.primary.main),
        backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: 'transparent' } },


      '&$disabled': {
        border: "1px solid ".concat(theme.palette.action.disabled) } },


    /* Styles applied to the root element if `variant="outlined"` and `color="secondary"`. */
    outlinedSecondary: {
      color: theme.palette.secondary.main,
      border: "1px solid ".concat(fade(theme.palette.secondary.main, 0.5)),
      '&:hover': {
        border: "1px solid ".concat(theme.palette.secondary.main),
        backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: 'transparent' } },


      '&$disabled': {
        border: "1px solid ".concat(theme.palette.action.disabled) } },


    /* Styles applied to the root element if `variant="[contained | fab]"`. */
    contained: {
      color: theme.palette.getContrastText(theme.palette.grey[300]),
      backgroundColor: theme.palette.grey[300],
      boxShadow: theme.shadows[2],
      '&$focusVisible': {
        boxShadow: theme.shadows[6] },

      '&:active': {
        boxShadow: theme.shadows[8] },

      '&$disabled': {
        color: theme.palette.action.disabled,
        boxShadow: theme.shadows[0],
        backgroundColor: theme.palette.action.disabledBackground },

      '&:hover': {
        backgroundColor: theme.palette.grey.A100,
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: theme.palette.grey[300] },

        '&$disabled': {
          backgroundColor: theme.palette.action.disabledBackground } } },



    /* Styles applied to the root element if `variant="[contained | fab]"` and `color="primary"`. */
    containedPrimary: {
      color: theme.palette.primary.contrastText,
      backgroundColor: theme.palette.primary.main,
      '&:hover': {
        backgroundColor: theme.palette.primary.dark,
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: theme.palette.primary.main } } },



    /* Styles applied to the root element if `variant="[contained | fab]"` and `color="secondary"`. */
    containedSecondary: {
      color: theme.palette.secondary.contrastText,
      backgroundColor: theme.palette.secondary.main,
      '&:hover': {
        backgroundColor: theme.palette.secondary.dark,
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: theme.palette.secondary.main } } },



    /* Styles applied to the root element for backwards compatibility with legacy variant naming. */
    raised: {}, // legacy
    /* Styles applied to the root element for backwards compatibility with legacy variant naming. */
    raisedPrimary: {}, // legacy
    /* Styles applied to the root element for backwards compatibility with legacy variant naming. */
    raisedSecondary: {}, // legacy
    /* Styles applied to the root element if `variant="[fab | extendedFab]"`. */
    fab: {
      borderRadius: '50%',
      padding: 0,
      minWidth: 0,
      width: 56,
      height: 56,
      boxShadow: theme.shadows[6],
      '&:active': {
        boxShadow: theme.shadows[12] } },


    /* Styles applied to the root element if `variant="extendedFab"`. */
    extendedFab: {
      borderRadius: 48 / 2,
      padding: '0 16px',
      width: 'auto',
      minWidth: 48,
      height: 48 },

    /* Styles applied to the ButtonBase root element if the button is keyboard focused. */
    focusVisible: {},
    /* Styles applied to the root element if `disabled={true}`. */
    disabled: {},
    /* Styles applied to the root element if `color="inherit"`. */
    colorInherit: {
      color: 'inherit' },

    /* Styles applied to the root element if `mini={true}` & `variant="[fab | extendedFab]"`. */
    mini: {
      width: 40,
      height: 40 },

    /* Styles applied to the root element if `size="small"`. */
    sizeSmall: {
      padding: '7px 8px',
      minWidth: 64,
      minHeight: 32,
      fontSize: theme.typography.pxToRem(13) },

    /* Styles applied to the root element if `size="large"`. */
    sizeLarge: {
      padding: '8px 24px',
      minWidth: 112,
      minHeight: 40,
      fontSize: theme.typography.pxToRem(15) },

    /* Styles applied to the root element if `fullWidth={true}`. */
    fullWidth: {
      width: '100%' } };};



function Button(props) {var _classNames;var

  children =











  props.children,classes = props.classes,classNameProp = props.className,color = props.color,disabled = props.disabled,disableFocusRipple = props.disableFocusRipple,focusVisibleClassName = props.focusVisibleClassName,fullWidth = props.fullWidth,mini = props.mini,size = props.size,variant = props.variant,other = objectWithoutProperties(props, ["children", "classes", "className", "color", "disabled", "disableFocusRipple", "focusVisibleClassName", "fullWidth", "mini", "size", "variant"]);

  var fab = variant === 'fab' || variant === 'extendedFab';
  var contained = variant === 'contained' || variant === 'raised';
  var text = variant === 'text' || variant === 'flat';
  var className = classnames(
  classes.root, (_classNames = {}, defineProperty(_classNames,

  classes.fab, fab), defineProperty(_classNames,
  classes.mini, fab && mini), defineProperty(_classNames,
  classes.extendedFab, variant === 'extendedFab'), defineProperty(_classNames,
  classes.text, text), defineProperty(_classNames,
  classes.textPrimary, text && color === 'primary'), defineProperty(_classNames,
  classes.textSecondary, text && color === 'secondary'), defineProperty(_classNames,
  classes.flat, variant === 'text' || variant === 'flat'), defineProperty(_classNames,
  classes.flatPrimary, (variant === 'text' || variant === 'flat') && color === 'primary'), defineProperty(_classNames,
  classes.flatSecondary, (variant === 'text' || variant === 'flat') && color === 'secondary'), defineProperty(_classNames,
  classes.contained, contained || fab), defineProperty(_classNames,
  classes.containedPrimary, (contained || fab) && color === 'primary'), defineProperty(_classNames,
  classes.containedSecondary, (contained || fab) && color === 'secondary'), defineProperty(_classNames,
  classes.raised, contained || fab), defineProperty(_classNames,
  classes.raisedPrimary, (contained || fab) && color === 'primary'), defineProperty(_classNames,
  classes.raisedSecondary, (contained || fab) && color === 'secondary'), defineProperty(_classNames,
  classes.outlined, variant === 'outlined'), defineProperty(_classNames,
  classes.outlinedPrimary, variant === 'outlined' && color === 'primary'), defineProperty(_classNames,
  classes.outlinedSecondary, variant === 'outlined' && color === 'secondary'), defineProperty(_classNames,
  classes["size".concat(capitalize(size))], size !== 'medium'), defineProperty(_classNames,
  classes.disabled, disabled), defineProperty(_classNames,
  classes.fullWidth, fullWidth), defineProperty(_classNames,
  classes.colorInherit, color === 'inherit'), _classNames),

  classNameProp);


  return (
    react.createElement(ButtonBase$1, _extends_1({
      className: className,
      disabled: disabled,
      focusRipple: !disableFocusRipple,
      focusVisibleClassName: classnames(classes.focusVisible, focusVisibleClassName) },
    other),

    react.createElement("span", { className: classes.label }, children)));


}

Button.propTypes = {
  /**
                      * The content of the button.
                      */
  children: propTypes.node.isRequired,
  /**
                                        * Override or extend the styles applied to the component.
                                        * See [CSS API](#css-api) below for more details.
                                        */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * The color of the component. It supports those theme colors that make sense for this component.
                                */
  color: propTypes.oneOf(['default', 'inherit', 'primary', 'secondary']),
  /**
                                                                           * The component used for the root node.
                                                                           * Either a string to use a DOM element or a component.
                                                                           */
  component: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                         * If `true`, the button will be disabled.
                                                                                         */
  disabled: propTypes.bool,
  /**
                             * If `true`, the  keyboard focus ripple will be disabled.
                             * `disableRipple` must also be true.
                             */
  disableFocusRipple: propTypes.bool,
  /**
                                       * If `true`, the ripple effect will be disabled.
                                       */
  disableRipple: propTypes.bool,
  /**
                                  * @ignore
                                  */
  focusVisibleClassName: propTypes.string,
  /**
                                            * If `true`, the button will take up the full width of its container.
                                            */
  fullWidth: propTypes.bool,
  /**
                              * The URL to link to when the button is clicked.
                              * If defined, an `a` element will be used as the root node.
                              */
  href: propTypes.string,
  /**
                           * If `true`, and `variant` is `'fab'`, will use mini floating action button styling.
                           */
  mini: propTypes.bool,
  /**
                         * The size of the button.
                         * `small` is equivalent to the dense button styling.
                         */
  size: propTypes.oneOf(['small', 'medium', 'large']),
  /**
                                                        * @ignore
                                                        */
  type: propTypes.string,
  /**
                           * The variant to use.
                           * __WARNING__: `flat` and `raised` are deprecated.
                           * Instead use `text` and `contained` respectively.
                           * `fab` and `extendedFab` are deprecated.
                           * Instead use `<Fab>` and `<Fab variant="extended">`
                           */
  variant: chainPropTypes(
  propTypes.oneOf(['text', 'outlined', 'contained', 'fab', 'extendedFab', 'flat', 'raised']),
  function (props) {
    if (props.variant === 'flat') {
      return new Error(
      'The `flat` variant will be removed in the next major release. ' +
      '`text` is equivalent and should be used instead.');

    }
    if (props.variant === 'raised') {
      return new Error(
      'The `raised` variant will be removed in the next major release. ' +
      '`contained` is equivalent and should be used instead.');

    }
    if (props.variant === 'fab') {
      return new Error(
      'The `fab` variant will be removed in the next major release. ' +
      'The `<Fab>` component is equivalent and should be used instead.');

    }
    if (props.variant === 'extendedFab') {
      return new Error(
      'The `fab` variant will be removed in the next major release. ' +
      'The `<Fab>` component with `variant="extended"` is equivalent ' +
      'and should be used instead.');

    }

    return null;
  }) };



Button.defaultProps = {
  color: 'default',
  component: 'button',
  disabled: false,
  disableFocusRipple: false,
  fullWidth: false,
  mini: false,
  size: 'medium',
  type: 'button',
  variant: 'text' };


var Button$1 = withStyles(styles$a, { name: 'MuiButton' })(Button);

var styles$b = {
  /* Styles applied to the root element. */
  root: {
    overflow: 'hidden' } };



function Card(props) {var
  classes = props.classes,className = props.className,raised = props.raised,other = objectWithoutProperties(props, ["classes", "className", "raised"]);

  return (
    react.createElement(Paper$1, _extends_1({ className: classnames(classes.root, className), elevation: raised ? 8 : 1 }, other)));

}

Card.propTypes = {
  /**
                    * Override or extend the styles applied to the component.
                    * See [CSS API](#css-api) below for more details.
                    */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * If `true`, the card will use raised styling.
                                */
  raised: propTypes.bool };


Card.defaultProps = {
  raised: false };


withStyles(styles$b, { name: 'MuiCard' })(Card);

var styles$c = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: {
      display: 'block',
      textAlign: 'inherit',
      width: '100%',
      '&:hover $focusHighlight': {
        opacity: theme.palette.action.hoverOpacity },

      '&$focusVisible $focusHighlight': {
        opacity: 0.12 } },


    /* Styles applied to the ButtonBase root element if the action area is keyboard focused. */
    focusVisible: {},
    /* Styles applied to the overlay that covers the action area when it is keyboard focused. */
    focusHighlight: {
      pointerEvents: 'none',
      position: 'absolute',
      backgroundColor: 'currentcolor',
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      opacity: 0,
      transition: theme.transitions.create('opacity', {
        duration: theme.transitions.duration.short }) } };};




function CardActionArea(props) {var
  children = props.children,classes = props.classes,className = props.className,focusVisibleClassName = props.focusVisibleClassName,other = objectWithoutProperties(props, ["children", "classes", "className", "focusVisibleClassName"]);

  return (
    react.createElement(ButtonBase$1, _extends_1({
      className: classnames(classes.root, className),
      focusVisibleClassName: classnames(focusVisibleClassName, classes.focusVisible) },
    other),

    children,
    react.createElement("span", { className: classes.focusHighlight })));


}

CardActionArea.propTypes = {
  /**
                              * The content of the component.
                              */
  children: propTypes.node,
  /**
                             * Override or extend the styles applied to the component.
                             * See [CSS API](#css-api) below for more details.
                             */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * @ignore
                                */
  focusVisibleClassName: propTypes.string };


withStyles(styles$c, { name: 'MuiCardActionArea' })(CardActionArea);

/* eslint-disable import/prefer-default-export */

function cloneElementWithClassName(child, className) {
  return react.cloneElement(child, {
    className: classnames(child.props.className, className) });

}

function cloneChildrenWithClassName(children, className) {
  return react.Children.map(children, function (child) {
    return react.isValidElement(child) && cloneElementWithClassName(child, className);
  });
}

function isMuiElement(element, muiNames) {
  return react.isValidElement(element) && muiNames.indexOf(element.type.muiName) !== -1;
}

function setRef(ref, value) {
  if (typeof ref === 'function') {
    ref(value);
  } else if (ref) {
    ref.current = value;
  }
}

var styles$d = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: defineProperty({
      display: 'flex',
      alignItems: 'center',
      boxSizing: 'border-box',
      padding: '8px 4px' },
    theme.breakpoints.up('sm'), {
      padding: '8px 12px' }),


    /* Styles applied to the children. */
    action: {
      margin: '0 4px' } };};



function CardActions(props) {var
  disableActionSpacing = props.disableActionSpacing,children = props.children,classes = props.classes,className = props.className,other = objectWithoutProperties(props, ["disableActionSpacing", "children", "classes", "className"]);

  return (
    react.createElement("div", _extends_1({ className: classnames(classes.root, className) }, other),
    disableActionSpacing ? children : cloneChildrenWithClassName(children, classes.action)));


}

CardActions.propTypes = {
  /**
                           * The content of the component.
                           */
  children: propTypes.node,
  /**
                             * Override or extend the styles applied to the component.
                             * See [CSS API](#css-api) below for more details.
                             */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * If `true`, the card actions do not have additional margin.
                                */
  disableActionSpacing: propTypes.bool };


CardActions.defaultProps = {
  disableActionSpacing: false };


withStyles(styles$d, { name: 'MuiCardActions' })(CardActions);

var styles$e = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: theme.mixins.gutters({
      paddingTop: 16,
      paddingBottom: 16,
      '&:last-child': {
        paddingBottom: 24 } }) };};




function CardContent(props) {var
  classes = props.classes,className = props.className,Component = props.component,other = objectWithoutProperties(props, ["classes", "className", "component"]);

  return react.createElement(Component, _extends_1({ className: classnames(classes.root, className) }, other));
}

CardContent.propTypes = {
  /**
                           * Override or extend the styles applied to the component.
                           * See [CSS API](#css-api) below for more details.
                           */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * The component used for the root node.
                                * Either a string to use a DOM element or a component.
                                */
  component: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]) };


CardContent.defaultProps = {
  component: 'div' };


withStyles(styles$e, { name: 'MuiCardContent' })(CardContent);

var styles$f = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: {
      display: 'block',
      margin: 0 },

    /* Styles applied to the root element if `variant="display4"`. */
    display4: theme.typography.display4,
    /* Styles applied to the root element if `variant="display3"`. */
    display3: theme.typography.display3,
    /* Styles applied to the root element if `variant="display2"`. */
    display2: theme.typography.display2,
    /* Styles applied to the root element if `variant="display1"`. */
    display1: theme.typography.display1,
    /* Styles applied to the root element if `variant="headline"`. */
    headline: theme.typography.headline,
    /* Styles applied to the root element if `variant="title"`. */
    title: theme.typography.title,
    /* Styles applied to the root element if `variant="subheading"`. */
    subheading: theme.typography.subheading,
    /* Styles applied to the root element if `variant="body2"`. */
    body2: theme.typography.body2,
    /* Styles applied to the root element if `variant="body1"`. */
    body1: theme.typography.body1,
    /* Styles applied to the root element if `variant="caption"`. */
    caption: theme.typography.caption,
    /* Styles applied to the root element if `variant="button"`. */
    button: theme.typography.button,
    /* Styles applied to the root element if `variant="h1"`. */
    h1: theme.typography.h1,
    /* Styles applied to the root element if `variant="h2"`. */
    h2: theme.typography.h2,
    /* Styles applied to the root element if `variant="h3"`. */
    h3: theme.typography.h3,
    /* Styles applied to the root element if `variant="h4"`. */
    h4: theme.typography.h4,
    /* Styles applied to the root element if `variant="h5"`. */
    h5: theme.typography.h5,
    /* Styles applied to the root element if `variant="h6"`. */
    h6: theme.typography.h6,
    /* Styles applied to the root element if `variant="subtitle1"`. */
    subtitle1: theme.typography.subtitle1,
    /* Styles applied to the root element if `variant="subtitle2"`. */
    subtitle2: theme.typography.subtitle2,
    /* Styles applied to the root element if `variant="overline"`. */
    overline: theme.typography.overline,
    /* Styles applied to the root element if `variant="srOnly"`. Only accessible to screen readers. */
    srOnly: {
      position: 'absolute',
      height: 1,
      width: 1,
      overflow: 'hidden' },

    /* Styles applied to the root element if `align="left"`. */
    alignLeft: {
      textAlign: 'left' },

    /* Styles applied to the root element if `align="center"`. */
    alignCenter: {
      textAlign: 'center' },

    /* Styles applied to the root element if `align="right"`. */
    alignRight: {
      textAlign: 'right' },

    /* Styles applied to the root element if `align="justify"`. */
    alignJustify: {
      textAlign: 'justify' },

    /* Styles applied to the root element if `align="nowrap"`. */
    noWrap: {
      overflow: 'hidden',
      textOverflow: 'ellipsis',
      whiteSpace: 'nowrap' },

    /* Styles applied to the root element if `gutterBottom={true}`. */
    gutterBottom: {
      marginBottom: '0.35em' },

    /* Styles applied to the root element if `paragraph={true}`. */
    paragraph: {
      marginBottom: 16 },

    /* Styles applied to the root element if `color="inherit"`. */
    colorInherit: {
      color: 'inherit' },

    /* Styles applied to the root element if `color="primary"`. */
    colorPrimary: {
      color: theme.palette.primary.main },

    /* Styles applied to the root element if `color="secondary"`. */
    colorSecondary: {
      color: theme.palette.secondary.main },

    /* Styles applied to the root element if `color="textPrimary"`. */
    colorTextPrimary: {
      color: theme.palette.text.primary },

    /* Styles applied to the root element if `color="textSecondary"`. */
    colorTextSecondary: {
      color: theme.palette.text.secondary },

    /* Styles applied to the root element if `color="error"`. */
    colorError: {
      color: theme.palette.error.main } };};



var nextVariants = {
  display4: 'h1',
  display3: 'h2',
  display2: 'h3',
  display1: 'h4',
  headline: 'h5',
  title: 'h6',
  subheading: 'subtitle1' };


function getVariant(theme, variantProp) {
  var typography = theme.typography;
  var variant = variantProp;

  if (!variant) {
    variant = typography.useNextVariants ? 'body2' : 'body1';
  }

  // complete v2 switch
  if (typography.useNextVariants) {
    variant = nextVariants[variant] || variant;
  }

  return variant;
}

var defaultHeadlineMapping = {
  h1: 'h1',
  h2: 'h2',
  h3: 'h3',
  h4: 'h4',
  h5: 'h5',
  h6: 'h6',
  subtitle1: 'h6',
  subtitle2: 'h6',
  body1: 'p',
  body2: 'p',
  // deprecated
  display4: 'h1',
  display3: 'h1',
  display2: 'h1',
  display1: 'h1',
  headline: 'h1',
  title: 'h2',
  subheading: 'h3' };


function Typography(props) {var _classNames;var

  align =












  props.align,classes = props.classes,classNameProp = props.className,color = props.color,componentProp = props.component,gutterBottom = props.gutterBottom,headlineMapping = props.headlineMapping,internalDeprecatedVariant = props.internalDeprecatedVariant,noWrap = props.noWrap,paragraph = props.paragraph,theme = props.theme,variantProp = props.variant,other = objectWithoutProperties(props, ["align", "classes", "className", "color", "component", "gutterBottom", "headlineMapping", "internalDeprecatedVariant", "noWrap", "paragraph", "theme", "variant"]);

  var variant = getVariant(theme, variantProp);
  var className = classnames(
  classes.root, (_classNames = {}, defineProperty(_classNames,

  classes[variant], variant !== 'inherit'), defineProperty(_classNames,
  classes["color".concat(capitalize(color))], color !== 'default'), defineProperty(_classNames,
  classes.noWrap, noWrap), defineProperty(_classNames,
  classes.gutterBottom, gutterBottom), defineProperty(_classNames,
  classes.paragraph, paragraph), defineProperty(_classNames,
  classes["align".concat(capitalize(align))], align !== 'inherit'), _classNames),

  classNameProp);


  var Component =
  componentProp || (
  paragraph ? 'p' : headlineMapping[variant] || defaultHeadlineMapping[variant]) ||
  'span';

  return react.createElement(Component, _extends_1({ className: className }, other));
}

Typography.propTypes = {
  /**
                          * Set the text-align on the component.
                          */
  align: propTypes.oneOf(['inherit', 'left', 'center', 'right', 'justify']),
  /**
                                                                              * The content of the component.
                                                                              */
  children: propTypes.node,
  /**
                             * Override or extend the styles applied to the component.
                             * See [CSS API](#css-api) below for more details.
                             */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * The color of the component. It supports those theme colors that make sense for this component.
                                */
  color: propTypes.oneOf([
  'default',
  'error',
  'inherit',
  'primary',
  'secondary',
  'textPrimary',
  'textSecondary']),

  /**
                      * The component used for the root node.
                      * Either a string to use a DOM element or a component.
                      * By default, it maps the variant to a good default headline component.
                      */
  component: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                         * If `true`, the text will have a bottom margin.
                                                                                         */
  gutterBottom: propTypes.bool,
  /**
                                 * We are empirically mapping the variant property to a range of different DOM element types.
                                 * For instance, subtitle1 to `<h6>`.
                                 * If you wish to change that mapping, you can provide your own.
                                 * Alternatively, you can use the `component` property.
                                 * The default mapping is the following:
                                 */
  headlineMapping: propTypes.object,
  /**
                                      * A deprecated variant is used from an internal component. Users don't need
                                      * a deprecation warning here if they switched to the v2 theme. They already
                                      * get the mapping that will be applied in the next major release.
                                      *
                                      * @internal
                                      */
  internalDeprecatedVariant: propTypes.bool,
  /**
                                              * If `true`, the text will not wrap, but instead will truncate with an ellipsis.
                                              */
  noWrap: propTypes.bool,
  /**
                           * If `true`, the text will have a bottom margin.
                           */
  paragraph: propTypes.bool,
  /**
                              * Applies the theme typography styles.
                              * Use `body1` as the default value with the legacy implementation and `body2` with the new one.
                              */
  variant: chainPropTypes(
  propTypes.oneOf([
  'h1',
  'h2',
  'h3',
  'h4',
  'h5',
  'h6',
  'subtitle1',
  'subtitle2',
  'body1',
  'body2',
  'caption',
  'button',
  'overline',
  'srOnly',
  'inherit',
  // deprecated
  'display4',
  'display3',
  'display2',
  'display1',
  'headline',
  'title',
  'subheading']),

  function (props) {
    var deprecatedVariants = [
    'display4',
    'display3',
    'display2',
    'display1',
    'headline',
    'title',
    'subheading'];

    if (
    props.theme.typography.useNextVariants &&
    !props.internalDeprecatedVariant &&
    deprecatedVariants.indexOf(props.variant) !== -1)
    {
      return new Error(
      'You are using a deprecated typography variant: ' + "`".concat(
      props.variant, "` that will be removed in the next major release.") +
      '\nPlease read the migration guide under https://material-ui.com/style/typography#migration-to-typography-v2');

    }

    return null;
  }) };



Typography.defaultProps = {
  align: 'inherit',
  color: 'default',
  gutterBottom: false,
  headlineMapping: defaultHeadlineMapping,
  noWrap: false,
  paragraph: false };


var Typography$1 = withStyles(styles$f, { name: 'MuiTypography', withTheme: true })(Typography);

var styles$g = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: theme.mixins.gutters({
      display: 'flex',
      alignItems: 'center',
      paddingTop: 16,
      paddingBottom: 16 }),

    /* Styles applied to the avatar element. */
    avatar: {
      flex: '0 0 auto',
      marginRight: 16 },

    /* Styles applied to the action element. */
    action: defineProperty({
      flex: '0 0 auto',
      alignSelf: 'flex-start',
      marginTop: -8,
      marginRight: -12 },
    theme.breakpoints.up('sm'), {
      marginRight: -20 }),


    /* Styles applied to the content wrapper element. */
    content: {
      flex: '1 1 auto' },

    /* Styles applied to the title Typography element. */
    title: {},
    /* Styles applied to the subheader Typography element. */
    subheader: {} };};


function CardHeader(props) {var

  action =










  props.action,avatar = props.avatar,classes = props.classes,classNameProp = props.className,Component = props.component,disableTypography = props.disableTypography,subheaderProp = props.subheader,subheaderTypographyProps = props.subheaderTypographyProps,titleProp = props.title,titleTypographyProps = props.titleTypographyProps,other = objectWithoutProperties(props, ["action", "avatar", "classes", "className", "component", "disableTypography", "subheader", "subheaderTypographyProps", "title", "titleTypographyProps"]);

  var title = titleProp;
  if (title != null && title.type !== Typography$1 && !disableTypography) {
    title =
    react.createElement(Typography$1, _extends_1({
      variant: avatar ? 'body2' : 'headline',
      internalDeprecatedVariant: true,
      className: classes.title,
      component: "span" },
    titleTypographyProps),

    title);


  }

  var subheader = subheaderProp;
  if (subheader != null && subheader.type !== Typography$1 && !disableTypography) {
    subheader =
    react.createElement(Typography$1, _extends_1({
      variant: avatar ? 'body2' : 'body1',
      className: classes.subheader,
      color: "textSecondary",
      component: "span" },
    subheaderTypographyProps),

    subheader);


  }

  return (
    react.createElement(Component, _extends_1({ className: classnames(classes.root, classNameProp) }, other),
    avatar && react.createElement("div", { className: classes.avatar }, avatar),
    react.createElement("div", { className: classes.content },
    title,
    subheader),

    action && react.createElement("div", { className: classes.action }, action)));


}

CardHeader.propTypes = {
  /**
                          * The action to display in the card header.
                          */
  action: propTypes.node,
  /**
                           * The Avatar for the Card Header.
                           */
  avatar: propTypes.node,
  /**
                           * Override or extend the styles applied to the component.
                           * See [CSS API](#css-api) below for more details.
                           */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * The component used for the root node.
                                * Either a string to use a DOM element or a component.
                                */
  component: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                         * If `true`, the children won't be wrapped by a Typography component.
                                                                                         * This can be useful to render an alternative Typography variant by wrapping
                                                                                         * the `title` text, and optional `subheader` text
                                                                                         * with the Typography component.
                                                                                         */
  disableTypography: propTypes.bool,
  /**
                                      * The content of the component.
                                      */
  subheader: propTypes.node,
  /**
                              * These props will be forwarded to the subheader
                              * (as long as disableTypography is not `true`).
                              */
  subheaderTypographyProps: propTypes.object,
  /**
                                               * The content of the Card Title.
                                               */
  title: propTypes.node,
  /**
                          * These props will be forwarded to the title
                          * (as long as disableTypography is not `true`).
                          */
  titleTypographyProps: propTypes.object };


CardHeader.defaultProps = {
  component: 'div',
  disableTypography: false };


withStyles(styles$g, { name: 'MuiCardHeader' })(CardHeader);

var styles$h = {
  /* Styles applied to the root element. */
  root: {
    display: 'block',
    backgroundSize: 'cover',
    backgroundRepeat: 'no-repeat',
    backgroundPosition: 'center' },

  /* Styles applied to the root element if `component="video, audio, picture, iframe, or img"`. */
  media: {
    width: '100%' } };



var MEDIA_COMPONENTS = ['video', 'audio', 'picture', 'iframe', 'img'];

function CardMedia(props) {var
  classes = props.classes,className = props.className,Component = props.component,image = props.image,src = props.src,style = props.style,other = objectWithoutProperties(props, ["classes", "className", "component", "image", "src", "style"]);

  warning_1(
  Boolean(image || src),
  'Material-UI: either `image` or `src` property must be specified.');


  var isMediaComponent = MEDIA_COMPONENTS.indexOf(Component) !== -1;
  var composedStyle =
  !isMediaComponent && image ? objectSpread({ backgroundImage: "url(\"".concat(image, "\")") }, style) : style;

  return (
    react.createElement(Component, _extends_1({
      className: classnames(
      classes.root, defineProperty({},

      classes.media, isMediaComponent),

      className),

      style: composedStyle,
      src: isMediaComponent ? image || src : undefined },
    other)));


}

CardMedia.propTypes = {
  /**
                         * Override or extend the styles applied to the component.
                         * See [CSS API](#css-api) below for more details.
                         */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * Component for rendering image.
                                * Either a string to use a DOM element or a component.
                                */
  component: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                         * Image to be displayed as a background image.
                                                                                         * Either `image` or `src` prop must be specified.
                                                                                         * Note that caller must specify height otherwise the image will not be visible.
                                                                                         */
  image: propTypes.string,
  /**
                            * An alias for `image` property.
                            * Available only with media components.
                            * Media components: `video`, `audio`, `picture`, `iframe`, `img`.
                            */
  src: propTypes.string,
  /**
                          * @ignore
                          */
  style: propTypes.object };


CardMedia.defaultProps = {
  component: 'div' };


withStyles(styles$h, { name: 'MuiCardMedia' })(CardMedia);

/**
                            * @ignore - internal component.
                            */
var FormControlContext = react.createContext();

function withFormControlContext(Component) {
  var EnhancedComponent = function EnhancedComponent(props) {
    return (
      react.createElement(FormControlContext.Consumer, null,
      function (context) {
        return react.createElement(Component, _extends_1({ muiFormControl: context }, props));
      }));


  };

  hoistNonReactStatics_cjs(EnhancedComponent, Component);

  return EnhancedComponent;
}

var styles$i = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: {
      textAlign: 'center',
      flex: '0 0 auto',
      fontSize: theme.typography.pxToRem(24),
      padding: 12,
      borderRadius: '50%',
      overflow: 'visible', // Explicitly set the default value to solve a bug on IE 11.
      color: theme.palette.action.active,
      transition: theme.transitions.create('background-color', {
        duration: theme.transitions.duration.shortest }),

      '&:hover': {
        backgroundColor: fade(theme.palette.action.active, theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: 'transparent' },

        '&$disabled': {
          backgroundColor: 'transparent' } },


      '&$disabled': {
        color: theme.palette.action.disabled } },


    /* Styles applied to the root element if `color="inherit"`. */
    colorInherit: {
      color: 'inherit' },

    /* Styles applied to the root element if `color="primary"`. */
    colorPrimary: {
      color: theme.palette.primary.main,
      '&:hover': {
        backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: 'transparent' } } },



    /* Styles applied to the root element if `color="secondary"`. */
    colorSecondary: {
      color: theme.palette.secondary.main,
      '&:hover': {
        backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: 'transparent' } } },



    /* Styles applied to the root element if `disabled={true}`. */
    disabled: {},
    /* Styles applied to the children container element. */
    label: {
      width: '100%',
      display: 'flex',
      alignItems: 'inherit',
      justifyContent: 'inherit' } };};



/**
                                        * Refer to the [Icons](/style/icons/) section of the documentation
                                        * regarding the available icon options.
                                        */
function IconButton(props) {var _classNames;var
  children = props.children,classes = props.classes,className = props.className,color = props.color,disabled = props.disabled,other = objectWithoutProperties(props, ["children", "classes", "className", "color", "disabled"]);

  return (
    react.createElement(ButtonBase$1, _extends_1({
      className: classnames(
      classes.root, (_classNames = {}, defineProperty(_classNames,

      classes["color".concat(capitalize(color))], color !== 'default'), defineProperty(_classNames,
      classes.disabled, disabled), _classNames),

      className),

      centerRipple: true,
      focusRipple: true,
      disabled: disabled },
    other),

    react.createElement("span", { className: classes.label }, children)));


}

IconButton.propTypes = {
  /**
                          * The icon element.
                          */
  children: propTypes.node,
  /**
                             * Override or extend the styles applied to the component.
                             * See [CSS API](#css-api) below for more details.
                             */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * The color of the component. It supports those theme colors that make sense for this component.
                                */
  color: propTypes.oneOf(['default', 'inherit', 'primary', 'secondary']),
  /**
                                                                           * If `true`, the button will be disabled.
                                                                           */
  disabled: propTypes.bool,
  /**
                             * If `true`, the ripple will be disabled.
                             */
  disableRipple: propTypes.bool };


IconButton.defaultProps = {
  color: 'default',
  disabled: false };


var IconButton$1 = withStyles(styles$i, { name: 'MuiIconButton' })(IconButton);

var styles$j = {
  root: {
    display: 'inline-flex',
    alignItems: 'center',
    transition: 'none',
    '&:hover': {
      // Disable the hover effect for the IconButton.
      backgroundColor: 'transparent' } },


  checked: {},
  disabled: {},
  input: {
    cursor: 'inherit',
    position: 'absolute',
    opacity: 0,
    width: '100%',
    height: '100%',
    top: 0,
    left: 0,
    margin: 0,
    padding: 0 } };



/**
                     * @ignore - internal component.
                     */var
SwitchBase = /*#__PURE__*/function (_React$Component) {inherits(SwitchBase, _React$Component);
  function SwitchBase(props) {var _this;classCallCheck(this, SwitchBase);
    _this = possibleConstructorReturn(this, getPrototypeOf(SwitchBase).call(this));defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleFocus",








    function (event) {
      if (_this.props.onFocus) {
        _this.props.onFocus(event);
      }var

      muiFormControl = _this.props.muiFormControl;
      if (muiFormControl && muiFormControl.onFocus) {
        muiFormControl.onFocus(event);
      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleBlur",

    function (event) {
      if (_this.props.onBlur) {
        _this.props.onBlur(event);
      }var

      muiFormControl = _this.props.muiFormControl;
      if (muiFormControl && muiFormControl.onBlur) {
        muiFormControl.onBlur(event);
      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleInputChange",

    function (event) {
      var checked = event.target.checked;

      if (!_this.isControlled) {
        _this.setState({ checked: checked });
      }

      if (_this.props.onChange) {
        _this.props.onChange(event, checked);
      }
    });_this.isControlled = props.checked != null;_this.state = {};if (!_this.isControlled) {// not controlled, use internal state
      _this.state.checked = props.defaultChecked !== undefined ? props.defaultChecked : false;}return _this;}createClass(SwitchBase, [{ key: "render", value: function render()
    {var _classNames;var _this$props =























      this.props,autoFocus = _this$props.autoFocus,checkedProp = _this$props.checked,checkedIcon = _this$props.checkedIcon,classes = _this$props.classes,classNameProp = _this$props.className,defaultChecked = _this$props.defaultChecked,disabledProp = _this$props.disabled,icon = _this$props.icon,id = _this$props.id,inputProps = _this$props.inputProps,inputRef = _this$props.inputRef,muiFormControl = _this$props.muiFormControl,name = _this$props.name,onBlur = _this$props.onBlur,onChange = _this$props.onChange,onFocus = _this$props.onFocus,readOnly = _this$props.readOnly,required = _this$props.required,tabIndex = _this$props.tabIndex,type = _this$props.type,value = _this$props.value,other = objectWithoutProperties(_this$props, ["autoFocus", "checked", "checkedIcon", "classes", "className", "defaultChecked", "disabled", "icon", "id", "inputProps", "inputRef", "muiFormControl", "name", "onBlur", "onChange", "onFocus", "readOnly", "required", "tabIndex", "type", "value"]);

      var disabled = disabledProp;

      if (muiFormControl) {
        if (typeof disabled === 'undefined') {
          disabled = muiFormControl.disabled;
        }
      }

      var checked = this.isControlled ? checkedProp : this.state.checked;
      var hasLabelFor = type === 'checkbox' || type === 'radio';

      return (
        react.createElement(IconButton$1, _extends_1({
          component: "span",
          className: classnames(
          classes.root, (_classNames = {}, defineProperty(_classNames,

          classes.checked, checked), defineProperty(_classNames,
          classes.disabled, disabled), _classNames),

          classNameProp),

          disabled: disabled,
          tabIndex: null,
          role: undefined,
          onFocus: this.handleFocus,
          onBlur: this.handleBlur },
        other),

        checked ? checkedIcon : icon,
        react.createElement("input", _extends_1({
          autoFocus: autoFocus,
          checked: checkedProp,
          defaultChecked: defaultChecked,
          className: classes.input,
          disabled: disabled,
          id: hasLabelFor && id,
          name: name,
          onChange: this.handleInputChange,
          readOnly: readOnly,
          ref: inputRef,
          required: required,
          tabIndex: tabIndex,
          type: type,
          value: value },
        inputProps))));



    } }]);return SwitchBase;}(react.Component);


// NB: If changed, please update Checkbox, Switch and Radio
// so that the API documentation is updated.
SwitchBase.propTypes = {
  /**
                          * If `true`, the input will be focused during the first mount.
                          */
  autoFocus: propTypes.bool,
  /**
                              * If `true`, the component is checked.
                              */
  checked: propTypes.oneOfType([propTypes.bool, propTypes.string]),
  /**
                                                                     * The icon to display when the component is checked.
                                                                     */
  checkedIcon: propTypes.node.isRequired,
  /**
                                           * Override or extend the styles applied to the component.
                                           * See [CSS API](#css-api) below for more details.
                                           */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * @ignore
                                */
  defaultChecked: propTypes.bool,
  /**
                                   * If `true`, the switch will be disabled.
                                   */
  disabled: propTypes.bool,
  /**
                             * If `true`, the ripple effect will be disabled.
                             */
  disableRipple: propTypes.bool,
  /**
                                  * The icon to display when the component is unchecked.
                                  */
  icon: propTypes.node.isRequired,
  /**
                                    * The id of the `input` element.
                                    */
  id: propTypes.string,
  /**
                         * Attributes applied to the `input` element.
                         */
  inputProps: propTypes.object,
  /**
                                 * Use that property to pass a ref callback to the native input component.
                                 */
  inputRef: propTypes.oneOfType([propTypes.func, propTypes.object]),
  /**
                                                                      * @ignore
                                                                      */
  muiFormControl: propTypes.object,
  /*
                                     * @ignore
                                     */
  name: propTypes.string,
  /**
                           * @ignore
                           */
  onBlur: propTypes.func,
  /**
                           * Callback fired when the state is changed.
                           *
                           * @param {object} event The event source of the callback.
                           * You can pull out the new value by accessing `event.target.checked`.
                           * @param {boolean} checked The `checked` value of the switch
                           */
  onChange: propTypes.func,
  /**
                             * @ignore
                             */
  onFocus: propTypes.func,
  /**
                            * It prevents the user from changing the value of the field
                            * (not from interacting with the field).
                            */
  readOnly: propTypes.bool,
  /**
                             * If `true`, the input will be required.
                             */
  required: propTypes.bool,
  /**
                             * @ignore
                             */
  tabIndex: propTypes.oneOfType([propTypes.number, propTypes.string]),
  /**
                                                                        * The input component property `type`.
                                                                        */
  type: propTypes.string.isRequired,
  /**
                                      * The value of the component.
                                      */
  value: propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.bool]) };


var SwitchBase$1 = withStyles(styles$j, { name: 'MuiPrivateSwitchBase' })(
withFormControlContext(SwitchBase));

var interopRequireDefault$2 = createCommonjsModule(function (module) {
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

module.exports = _interopRequireDefault;
});

unwrapExports(interopRequireDefault$2);

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

var inheritsLoose = _inheritsLoose;

var setStatic_1 = createCommonjsModule(function (module, exports) {

exports.__esModule = true;
exports.default = void 0;

var setStatic = function setStatic(key, value) {
  return function (BaseComponent) {
    /* eslint-disable no-param-reassign */
    BaseComponent[key] = value;
    /* eslint-enable no-param-reassign */

    return BaseComponent;
  };
};

var _default = setStatic;
exports.default = _default;
});

unwrapExports(setStatic_1);

var setDisplayName_1 = createCommonjsModule(function (module, exports) {



exports.__esModule = true;
exports.default = void 0;

var _setStatic = interopRequireDefault$2(setStatic_1);

var setDisplayName = function setDisplayName(displayName) {
  return (0, _setStatic.default)('displayName', displayName);
};

var _default = setDisplayName;
exports.default = _default;
});

unwrapExports(setDisplayName_1);

var getDisplayName_1$1 = createCommonjsModule(function (module, exports) {

exports.__esModule = true;
exports.default = void 0;

var getDisplayName = function getDisplayName(Component) {
  if (typeof Component === 'string') {
    return Component;
  }

  if (!Component) {
    return undefined;
  }

  return Component.displayName || Component.name || 'Component';
};

var _default = getDisplayName;
exports.default = _default;
});

unwrapExports(getDisplayName_1$1);

var wrapDisplayName_1 = createCommonjsModule(function (module, exports) {



exports.__esModule = true;
exports.default = void 0;

var _getDisplayName = interopRequireDefault$2(getDisplayName_1$1);

var wrapDisplayName = function wrapDisplayName(BaseComponent, hocName) {
  return hocName + "(" + (0, _getDisplayName.default)(BaseComponent) + ")";
};

var _default = wrapDisplayName;
exports.default = _default;
});

unwrapExports(wrapDisplayName_1);

var shouldUpdate_1 = createCommonjsModule(function (module, exports) {



exports.__esModule = true;
exports.default = void 0;

var _inheritsLoose2 = interopRequireDefault$2(inheritsLoose);



var _setDisplayName = interopRequireDefault$2(setDisplayName_1);

var _wrapDisplayName = interopRequireDefault$2(wrapDisplayName_1);

var shouldUpdate = function shouldUpdate(test) {
  return function (BaseComponent) {
    var factory = (0, react.createFactory)(BaseComponent);

    var ShouldUpdate =
    /*#__PURE__*/
    function (_Component) {
      (0, _inheritsLoose2.default)(ShouldUpdate, _Component);

      function ShouldUpdate() {
        return _Component.apply(this, arguments) || this;
      }

      var _proto = ShouldUpdate.prototype;

      _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
        return test(this.props, nextProps);
      };

      _proto.render = function render() {
        return factory(this.props);
      };

      return ShouldUpdate;
    }(react.Component);

    return ShouldUpdate;
  };
};

var _default = shouldUpdate;
exports.default = _default;
});

unwrapExports(shouldUpdate_1);

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @typechecks
 * 
 */

var hasOwnProperty$1 = Object.prototype.hasOwnProperty;

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
function is(x, y) {
  // SameValue algorithm
  if (x === y) {
    // Steps 1-5, 7-10
    // Steps 6.b-6.e: +0 != -0
    // Added the nonzero y check to make Flow happy, but it is redundant
    return x !== 0 || y !== 0 || 1 / x === 1 / y;
  } else {
    // Step 6.a: NaN == NaN
    return x !== x && y !== y;
  }
}

/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */
function shallowEqual(objA, objB) {
  if (is(objA, objB)) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  // Test for A's keys different from B.
  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwnProperty$1.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

var shallowEqual_1 = shallowEqual;

var shallowEqual$1 = createCommonjsModule(function (module, exports) {



exports.__esModule = true;
exports.default = void 0;

var _shallowEqual = interopRequireDefault$2(shallowEqual_1);

var _default = _shallowEqual.default;
exports.default = _default;
});

unwrapExports(shallowEqual$1);

var pure_1 = createCommonjsModule(function (module, exports) {



exports.__esModule = true;
exports.default = void 0;

var _shouldUpdate = interopRequireDefault$2(shouldUpdate_1);

var _shallowEqual = interopRequireDefault$2(shallowEqual$1);

var _setDisplayName = interopRequireDefault$2(setDisplayName_1);

var _wrapDisplayName = interopRequireDefault$2(wrapDisplayName_1);

var pure = function pure(BaseComponent) {
  var hoc = (0, _shouldUpdate.default)(function (props, nextProps) {
    return !(0, _shallowEqual.default)(props, nextProps);
  });

  return hoc(BaseComponent);
};

var _default = pure;
exports.default = _default;
});

var pure = unwrapExports(pure_1);

var styles$k = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: {
      userSelect: 'none',
      width: '1em',
      height: '1em',
      display: 'inline-block',
      fill: 'currentColor',
      flexShrink: 0,
      fontSize: 24,
      transition: theme.transitions.create('fill', {
        duration: theme.transitions.duration.shorter }) },


    /* Styles applied to the root element if `color="primary"`. */
    colorPrimary: {
      color: theme.palette.primary.main },

    /* Styles applied to the root element if `color="secondary"`. */
    colorSecondary: {
      color: theme.palette.secondary.main },

    /* Styles applied to the root element if `color="action"`. */
    colorAction: {
      color: theme.palette.action.active },

    /* Styles applied to the root element if `color="error"`. */
    colorError: {
      color: theme.palette.error.main },

    /* Styles applied to the root element if `color="disabled"`. */
    colorDisabled: {
      color: theme.palette.action.disabled },

    /* Styles applied to the root element if `fontSize="inherit"`. */
    fontSizeInherit: {
      fontSize: 'inherit' },

    /* Styles applied to the root element if `fontSize="small"`. */
    fontSizeSmall: {
      fontSize: 20 },

    /* Styles applied to the root element if `fontSize="large"`. */
    fontSizeLarge: {
      fontSize: 35 } };};



function SvgIcon(props) {var _classNames;var

  children =









  props.children,classes = props.classes,className = props.className,color = props.color,Component = props.component,fontSize = props.fontSize,nativeColor = props.nativeColor,titleAccess = props.titleAccess,viewBox = props.viewBox,other = objectWithoutProperties(props, ["children", "classes", "className", "color", "component", "fontSize", "nativeColor", "titleAccess", "viewBox"]);

  return (
    react.createElement(Component, _extends_1({
      className: classnames(
      classes.root, (_classNames = {}, defineProperty(_classNames,

      classes["color".concat(capitalize(color))], color !== 'inherit'), defineProperty(_classNames,
      classes["fontSize".concat(capitalize(fontSize))], fontSize !== 'default'), _classNames),

      className),

      focusable: "false",
      viewBox: viewBox,
      color: nativeColor,
      "aria-hidden": titleAccess ? 'false' : 'true',
      role: titleAccess ? 'img' : 'presentation' },
    other),

    children,
    titleAccess ? react.createElement("title", null, titleAccess) : null));


}

SvgIcon.propTypes = {
  /**
                       * Node passed into the SVG element.
                       */
  children: propTypes.node.isRequired,
  /**
                                        * Override or extend the styles applied to the component.
                                        * See [CSS API](#css-api) below for more details.
                                        */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * The color of the component. It supports those theme colors that make sense for this component.
                                * You can use the `nativeColor` property to apply a color attribute to the SVG element.
                                */
  color: propTypes.oneOf(['inherit', 'primary', 'secondary', 'action', 'error', 'disabled']),
  /**
                                                                                               * The component used for the root node.
                                                                                               * Either a string to use a DOM element or a component.
                                                                                               */
  component: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                         * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
                                                                                         */
  fontSize: propTypes.oneOf(['inherit', 'default', 'small', 'large']),
  /**
                                                                        * Applies a color attribute to the SVG element.
                                                                        */
  nativeColor: propTypes.string,
  /**
                                  * The shape-rendering attribute. The behavior of the different options is described
                                  * [here](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).
                                  * If you are having issues with blurry icons you should investigate this property.
                                  */
  shapeRendering: propTypes.string,
  /**
                                     * Provides a human-readable title for the element that contains it.
                                     * https://www.w3.org/TR/SVG-access/#Equivalent
                                     */
  titleAccess: propTypes.string,
  /**
                                  * Allows you to redefine what the coordinates without units mean inside an SVG element.
                                  * For example, if the SVG element is 500 (width) by 200 (height),
                                  * and you pass viewBox="0 0 50 20",
                                  * this means that the coordinates inside the SVG will go from the top left corner (0,0)
                                  * to bottom right (50,20) and each unit will be worth 10px.
                                  */
  viewBox: propTypes.string };


SvgIcon.defaultProps = {
  color: 'inherit',
  component: 'svg',
  fontSize: 'default',
  viewBox: '0 0 24 24' };


SvgIcon.muiName = 'SvgIcon';

var SvgIcon$1 = withStyles(styles$k, { name: 'MuiSvgIcon' })(SvgIcon);

/**
                                      * @ignore - internal component.
                                      */
var CheckBoxOutlineBlank = function CheckBoxOutlineBlank(props) {return (
    react.createElement(SvgIcon$1, props,
    react.createElement("path", { d: "M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z" })));};


CheckBoxOutlineBlank = pure(CheckBoxOutlineBlank);
CheckBoxOutlineBlank.muiName = 'SvgIcon';

var CheckBoxOutlineBlankIcon = CheckBoxOutlineBlank;

/**
                                      * @ignore - internal component.
                                      */
var CheckBox = function CheckBox(props) {return (
    react.createElement(SvgIcon$1, props,
    react.createElement("path", { d: "M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z" })));};


CheckBox = pure(CheckBox);
CheckBox.muiName = 'SvgIcon';

var CheckBoxIcon = CheckBox;

/**
                                      * @ignore - internal component.
                                      */
var IndeterminateCheckBox = function IndeterminateCheckBox(props) {return (
    react.createElement(SvgIcon$1, props,
    react.createElement("path", { d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z" })));};


IndeterminateCheckBox = pure(IndeterminateCheckBox);
IndeterminateCheckBox.muiName = 'SvgIcon';

var IndeterminateCheckBoxIcon = IndeterminateCheckBox;

var styles$l = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: {
      color: theme.palette.text.secondary },

    /* Styles applied to the root element if `checked={true}`. */
    checked: {},
    /* Styles applied to the root element if `disabled={true}`. */
    disabled: {},
    /* Styles applied to the root element if `indeterminate={true}`. */
    indeterminate: {},
    /* Styles applied to the root element if `color="primary"`. */
    colorPrimary: {
      '&$checked': {
        color: theme.palette.primary.main },

      '&$disabled': {
        color: theme.palette.action.disabled } },


    /* Styles applied to the root element if `color="secondary"`. */
    colorSecondary: {
      '&$checked': {
        color: theme.palette.secondary.main },

      '&$disabled': {
        color: theme.palette.action.disabled } } };};




function Checkbox(props) {var

  checkedIcon =








  props.checkedIcon,classes = props.classes,className = props.className,color = props.color,icon = props.icon,indeterminate = props.indeterminate,indeterminateIcon = props.indeterminateIcon,inputProps = props.inputProps,other = objectWithoutProperties(props, ["checkedIcon", "classes", "className", "color", "icon", "indeterminate", "indeterminateIcon", "inputProps"]);

  return (
    react.createElement(SwitchBase$1, _extends_1({
      type: "checkbox",
      checkedIcon: indeterminate ? indeterminateIcon : checkedIcon,
      className: classnames(defineProperty({},

      classes.indeterminate, indeterminate),

      className),

      classes: {
        root: classnames(classes.root, classes["color".concat(capitalize(color))]),
        checked: classes.checked,
        disabled: classes.disabled },

      inputProps: objectSpread({
        'data-indeterminate': indeterminate },
      inputProps),

      icon: indeterminate ? indeterminateIcon : icon },
    other)));


}

Checkbox.propTypes = {
  /**
                        * If `true`, the component is checked.
                        */
  checked: propTypes.oneOfType([propTypes.bool, propTypes.string]),
  /**
                                                                     * The icon to display when the component is checked.
                                                                     */
  checkedIcon: propTypes.node,
  /**
                                * Override or extend the styles applied to the component.
                                * See [CSS API](#css-api) below for more details.
                                */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * The color of the component. It supports those theme colors that make sense for this component.
                                */
  color: propTypes.oneOf(['primary', 'secondary', 'default']),
  /**
                                                                * If `true`, the switch will be disabled.
                                                                */
  disabled: propTypes.bool,
  /**
                             * If `true`, the ripple effect will be disabled.
                             */
  disableRipple: propTypes.bool,
  /**
                                  * The icon to display when the component is unchecked.
                                  */
  icon: propTypes.node,
  /**
                         * The id of the `input` element.
                         */
  id: propTypes.string,
  /**
                         * If `true`, the component appears indeterminate.
                         * This does not set the native input element to indeterminate due
                         * to inconsistent behavior across browsers.
                         * However, we set a `data-indeterminate` attribute on the input.
                         */
  indeterminate: propTypes.bool,
  /**
                                  * The icon to display when the component is indeterminate.
                                  */
  indeterminateIcon: propTypes.node,
  /**
                                      * Properties applied to the `input` element.
                                      */
  inputProps: propTypes.object,
  /**
                                 * Use that property to pass a ref callback to the native input component.
                                 */
  inputRef: propTypes.oneOfType([propTypes.func, propTypes.object]),
  /**
                                                                      * Callback fired when the state is changed.
                                                                      *
                                                                      * @param {object} event The event source of the callback.
                                                                      * You can pull out the new value by accessing `event.target.checked`.
                                                                      * @param {boolean} checked The `checked` value of the switch
                                                                      */
  onChange: propTypes.func,
  /**
                             * The input component property `type`.
                             */
  type: propTypes.string,
  /**
                           * The value of the component.
                           */
  value: propTypes.string };


Checkbox.defaultProps = {
  checkedIcon: react.createElement(CheckBoxIcon, null),
  color: 'secondary',
  icon: react.createElement(CheckBoxOutlineBlankIcon, null),
  indeterminate: false,
  indeterminateIcon: react.createElement(IndeterminateCheckBoxIcon, null) };


withStyles(styles$l, { name: 'MuiCheckbox' })(Checkbox);

/**
                                      * @ignore - internal component.
                                      */
var Cancel = function Cancel(props) {return (
    react.createElement(SvgIcon$1, props,
    react.createElement("path", { d: "M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z" })));};


Cancel = pure(Cancel);
Cancel.muiName = 'SvgIcon';

var CancelIcon = Cancel;

var styles$m = function styles(theme) {
  var height = 32;
  var backgroundColor =
  theme.palette.type === 'light' ? theme.palette.grey[300] : theme.palette.grey[700];
  var deleteIconColor = fade(theme.palette.text.primary, 0.26);

  return {
    /* Styles applied to the root element. */
    root: {
      fontFamily: theme.typography.fontFamily,
      fontSize: theme.typography.pxToRem(13),
      display: 'inline-flex',
      alignItems: 'center',
      justifyContent: 'center',
      height: height,
      color: theme.palette.getContrastText(backgroundColor),
      backgroundColor: backgroundColor,
      borderRadius: height / 2,
      whiteSpace: 'nowrap',
      transition: theme.transitions.create(['background-color', 'box-shadow']),
      // label will inherit this from root, then `clickable` class overrides this for both
      cursor: 'default',
      // We disable the focus ring for mouse, touch and keyboard users.
      outline: 'none',
      textDecoration: 'none',
      border: 'none', // Remove `button` border
      padding: 0, // Remove `button` padding
      verticalAlign: 'middle',
      boxSizing: 'border-box' },

    /* Styles applied to the root element if `color="primary"`. */
    colorPrimary: {
      backgroundColor: theme.palette.primary.main,
      color: theme.palette.primary.contrastText },

    /* Styles applied to the root element if `color="secondary"`. */
    colorSecondary: {
      backgroundColor: theme.palette.secondary.main,
      color: theme.palette.secondary.contrastText },

    /* Styles applied to the root element if `onClick` is defined or `clickable={true}`. */
    clickable: {
      WebkitTapHighlightColor: 'transparent', // Remove grey highlight
      cursor: 'pointer',
      '&:hover, &:focus': {
        backgroundColor: emphasize(backgroundColor, 0.08) },

      '&:active': {
        boxShadow: theme.shadows[1],
        backgroundColor: emphasize(backgroundColor, 0.12) } },


    /**
                                                                * Styles applied to the root element if
                                                                * `onClick` and `color="primary"` is defined or `clickable={true}`.
                                                                */
    clickableColorPrimary: {
      '&:hover, &:focus': {
        backgroundColor: emphasize(theme.palette.primary.main, 0.08) },

      '&:active': {
        backgroundColor: emphasize(theme.palette.primary.main, 0.12) } },


    /**
                                                                           * Styles applied to the root element if
                                                                           * `onClick` and `color="secondary"` is defined or `clickable={true}`.
                                                                           */
    clickableColorSecondary: {
      '&:hover, &:focus': {
        backgroundColor: emphasize(theme.palette.secondary.main, 0.08) },

      '&:active': {
        backgroundColor: emphasize(theme.palette.secondary.main, 0.12) } },


    /* Styles applied to the root element if `onDelete` is defined. */
    deletable: {
      '&:focus': {
        backgroundColor: emphasize(backgroundColor, 0.08) } },


    /* Styles applied to the root element if `onDelete` and `color="primary"` is defined. */
    deletableColorPrimary: {
      '&:focus': {
        backgroundColor: emphasize(theme.palette.primary.main, 0.2) } },


    /* Styles applied to the root element if `onDelete` and `color="secondary"` is defined. */
    deletableColorSecondary: {
      '&:focus': {
        backgroundColor: emphasize(theme.palette.secondary.main, 0.2) } },


    /* Styles applied to the root element if `variant="outlined"`. */
    outlined: {
      backgroundColor: 'transparent',
      border: "1px solid ".concat(
      theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)'),

      '$clickable&:hover, $clickable&:focus, $deletable&:focus': {
        backgroundColor: fade(theme.palette.text.primary, theme.palette.action.hoverOpacity) },

      '& $avatar': {
        marginLeft: -1 } },


    /* Styles applied to the root element if `variant="outlined"` and `color="primary"`. */
    outlinedPrimary: {
      color: theme.palette.primary.main,
      border: "1px solid ".concat(theme.palette.primary.main),
      '$clickable&:hover, $clickable&:focus, $deletable&:focus': {
        backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity) } },


    /* Styles applied to the root element if `variant="outlined"` and `color="secondary"`. */
    outlinedSecondary: {
      color: theme.palette.secondary.main,
      border: "1px solid ".concat(theme.palette.secondary.main),
      '$clickable&:hover, $clickable&:focus, $deletable&:focus': {
        backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity) } },


    /* Styles applied to the `avatar` element. */
    avatar: {
      marginRight: -4,
      width: height,
      height: height,
      color: theme.palette.type === 'light' ? theme.palette.grey[700] : theme.palette.grey[300],
      fontSize: theme.typography.pxToRem(16) },

    /* Styles applied to the `avatar` element if `color="primary"` */
    avatarColorPrimary: {
      color: theme.palette.primary.contrastText,
      backgroundColor: theme.palette.primary.dark },

    /* Styles applied to the `avatar` element if `color="secondary"` */
    avatarColorSecondary: {
      color: theme.palette.secondary.contrastText,
      backgroundColor: theme.palette.secondary.dark },

    /* Styles applied to the `avatar` elements children. */
    avatarChildren: {
      width: 19,
      height: 19 },

    /* Styles applied to the `icon` element. */
    icon: {
      color: theme.palette.type === 'light' ? theme.palette.grey[700] : theme.palette.grey[300],
      marginLeft: 4,
      marginRight: -8 },

    /* Styles applied to the `icon` element if `color="primary"` */
    iconColorPrimary: {
      color: 'inherit' },

    /* Styles applied to the `icon` element if `color="secondary"` */
    iconColorSecondary: {
      color: 'inherit' },

    /* Styles applied to the label `span` element`. */
    label: {
      display: 'flex',
      alignItems: 'center',
      paddingLeft: 12,
      paddingRight: 12,
      userSelect: 'none',
      whiteSpace: 'nowrap',
      cursor: 'inherit' },

    /* Styles applied to the `deleteIcon` element. */
    deleteIcon: {
      // Remove grey highlight
      WebkitTapHighlightColor: 'transparent',
      color: deleteIconColor,
      cursor: 'pointer',
      height: 'auto',
      margin: '0 4px 0 -8px',
      '&:hover': {
        color: fade(deleteIconColor, 0.4) } },


    /* Styles applied to the deleteIcon element if `color="primary"` and `variant="default"`. */
    deleteIconColorPrimary: {
      color: fade(theme.palette.primary.contrastText, 0.7),
      '&:hover, &:active': {
        color: theme.palette.primary.contrastText } },


    /* Styles applied to the deleteIcon element if `color="secondary"` and `variant="default"`. */
    deleteIconColorSecondary: {
      color: fade(theme.palette.primary.contrastText, 0.7),
      '&:hover, &:active': {
        color: theme.palette.primary.contrastText } },


    /* Styles applied to the deleteIcon element if `color="primary"` and `variant="outlined"`. */
    deleteIconOutlinedColorPrimary: {
      color: fade(theme.palette.primary.main, 0.7),
      '&:hover, &:active': {
        color: theme.palette.primary.main } },


    /* Styles applied to the deleteIcon element if `color="secondary"` and `variant="outlined"`. */
    deleteIconOutlinedColorSecondary: {
      color: fade(theme.palette.secondary.main, 0.7),
      '&:hover, &:active': {
        color: theme.palette.secondary.main } } };



};

/**
    * Chips represent complex entities in small blocks, such as a contact.
    */var
Chip = /*#__PURE__*/function (_React$Component) {inherits(Chip, _React$Component);function Chip() {var _getPrototypeOf2;var _this;classCallCheck(this, Chip);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Chip)).call.apply(_getPrototypeOf2, [this].concat(args)));defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleDeleteIconClick",
    function (event) {
      // Stop the event from bubbling up to the `Chip`
      event.stopPropagation();var
      onDelete = _this.props.onDelete;
      if (onDelete) {
        onDelete(event);
      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleKeyDown",

    function (event) {var
      onKeyDown = _this.props.onKeyDown;
      if (onKeyDown) {
        onKeyDown(event);
      }

      // Ignore events from children of `Chip`.
      if (event.currentTarget !== event.target) {
        return;
      }

      var key = keycode(event);
      if (key === 'space' || key === 'enter' || key === 'backspace' || key === 'esc') {
        event.preventDefault();
      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleKeyUp",

    function (event) {var _this$props =
      _this.props,onClick = _this$props.onClick,onDelete = _this$props.onDelete,onKeyUp = _this$props.onKeyUp;

      if (onKeyUp) {
        onKeyUp(event);
      }

      // Ignore events from children of `Chip`.
      if (event.currentTarget !== event.target) {
        return;
      }

      var key = keycode(event);

      if (onClick && (key === 'space' || key === 'enter')) {
        onClick(event);
      } else if (onDelete && key === 'backspace') {
        onDelete(event);
      } else if (key === 'esc' && _this.chipRef) {
        _this.chipRef.blur();
      }
    });return _this;}createClass(Chip, [{ key: "render", value: function render()

    {var _classNames,_this2 = this;var _this$props2 =

















      this.props,avatarProp = _this$props2.avatar,classes = _this$props2.classes,classNameProp = _this$props2.className,clickableProp = _this$props2.clickable,color = _this$props2.color,Component = _this$props2.component,deleteIconProp = _this$props2.deleteIcon,iconProp = _this$props2.icon,label = _this$props2.label,onClick = _this$props2.onClick,onDelete = _this$props2.onDelete,onKeyDown = _this$props2.onKeyDown,onKeyUp = _this$props2.onKeyUp,tabIndexProp = _this$props2.tabIndex,variant = _this$props2.variant,other = objectWithoutProperties(_this$props2, ["avatar", "classes", "className", "clickable", "color", "component", "deleteIcon", "icon", "label", "onClick", "onDelete", "onKeyDown", "onKeyUp", "tabIndex", "variant"]);

      var clickable = clickableProp !== false && onClick ? true : clickableProp;
      var className = classnames(
      classes.root, (_classNames = {}, defineProperty(_classNames,

      classes["color".concat(capitalize(color))], color !== 'default'), defineProperty(_classNames,
      classes.clickable, clickable), defineProperty(_classNames,
      classes["clickableColor".concat(capitalize(color))], clickable && color !== 'default'), defineProperty(_classNames,
      classes.deletable, onDelete), defineProperty(_classNames,
      classes["deletableColor".concat(capitalize(color))], onDelete && color !== 'default'), defineProperty(_classNames,
      classes.outlined, variant === 'outlined'), defineProperty(_classNames,
      classes.outlinedPrimary, variant === 'outlined' && color === 'primary'), defineProperty(_classNames,
      classes.outlinedSecondary, variant === 'outlined' && color === 'secondary'), _classNames),

      classNameProp);


      var deleteIcon = null;
      if (onDelete) {var _customClasses;
        var customClasses = (_customClasses = {}, defineProperty(_customClasses,
        classes["deleteIconColor".concat(capitalize(color))],
        color !== 'default' && variant !== 'outlined'), defineProperty(_customClasses,
        classes["deleteIconOutlinedColor".concat(capitalize(color))],
        color !== 'default' && variant === 'outlined'), _customClasses);


        deleteIcon =
        deleteIconProp && react.isValidElement(deleteIconProp) ?
        react.cloneElement(deleteIconProp, {
          className: classnames(
          deleteIconProp.props.className,
          classes.deleteIcon,
          customClasses),

          onClick: this.handleDeleteIconClick }) :


        react.createElement(CancelIcon, {
          className: classnames(classes.deleteIcon, customClasses),
          onClick: this.handleDeleteIconClick });


      }

      var avatar = null;
      if (avatarProp && react.isValidElement(avatarProp)) {
        avatar = react.cloneElement(avatarProp, {
          className: classnames(classes.avatar, avatarProp.props.className, defineProperty({},
          classes["avatarColor".concat(capitalize(color))], color !== 'default')),

          childrenClassName: classnames(classes.avatarChildren, avatarProp.props.childrenClassName) });

      }

      var icon = null;
      if (iconProp && react.isValidElement(iconProp)) {
        icon = react.cloneElement(iconProp, {
          className: classnames(classes.icon, iconProp.props.className, defineProperty({},
          classes["iconColor".concat(capitalize(color))], color !== 'default')) });


      }

      var tabIndex = tabIndexProp;

      if (!tabIndex) {
        tabIndex = onClick || onDelete || clickable ? 0 : -1;
      }

      warning_1(
      !avatar || !icon,
      'Material-UI: the Chip component can not handle the avatar ' +
      'and the icon property at the same time. Pick one.');


      return (
        react.createElement(Component, _extends_1({
          role: "button",
          className: className,
          tabIndex: tabIndex,
          onClick: onClick,
          onKeyDown: this.handleKeyDown,
          onKeyUp: this.handleKeyUp,
          ref: function ref(_ref) {
            _this2.chipRef = _ref;
          } },
        other),

        avatar || icon,
        react.createElement("span", { className: classes.label }, label),
        deleteIcon));


    } }]);return Chip;}(react.Component);


Chip.propTypes = {
  /**
                    * Avatar element.
                    */
  avatar: propTypes.element,
  /**
                              * This property isn't supported.
                              * Use the `component` property if you need to change the children structure.
                              */
  children: unsupportedProp,
  /**
                              * Override or extend the styles applied to the component.
                              * See [CSS API](#css-api) below for more details.
                              */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * If true, the chip will appear clickable, and will raise when pressed,
                                * even if the onClick property is not defined.
                                * If false, the chip will not be clickable, even if onClick peoperty is defined.
                                * This can be used, for example,
                                * along with the component property to indicate an anchor Chip is clickable.
                                */
  clickable: propTypes.bool,
  /**
                              * The color of the component. It supports those theme colors that make sense for this component.
                              */
  color: propTypes.oneOf(['default', 'primary', 'secondary']),
  /**
                                                                * The component used for the root node.
                                                                * Either a string to use a DOM element or a component.
                                                                */
  component: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                         * Override the default delete icon element. Shown only if `onDelete` is set.
                                                                                         */
  deleteIcon: propTypes.element,
  /**
                                  * Icon element.
                                  */
  icon: propTypes.element,
  /**
                            * The content of the label.
                            */
  label: propTypes.node,
  /**
                          * @ignore
                          */
  onClick: propTypes.func,
  /**
                            * Callback function fired when the delete icon is clicked.
                            * If set, the delete icon will be shown.
                            */
  onDelete: propTypes.func,
  /**
                             * @ignore
                             */
  onKeyDown: propTypes.func,
  /**
                              * @ignore
                              */
  onKeyUp: propTypes.func,
  /**
                            * @ignore
                            */
  tabIndex: propTypes.oneOfType([propTypes.number, propTypes.string]),
  /**
                                                                        * The variant to use.
                                                                        */
  variant: propTypes.oneOf(['default', 'outlined']) };


Chip.defaultProps = {
  component: 'div',
  color: 'default',
  variant: 'default' };


withStyles(styles$m, { name: 'MuiChip' })(Chip);

var SIZE = 44;

function getRelativeValue(value, min, max) {
  var clampedValue = Math.min(Math.max(min, value), max);
  return (clampedValue - min) / (max - min);
}

function easeOut(t) {
  t = getRelativeValue(t, 0, 1);
  // https://gist.github.com/gre/1650294
  t = (t -= 1) * t * t + 1;
  return t;
}

function easeIn(t) {
  return t * t;
}

var styles$n = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: {
      display: 'inline-block',
      lineHeight: 1 // Keep the progress centered
    },
    /* Styles applied to the root element if `variant="static"`. */
    static: {
      transition: theme.transitions.create('transform') },

    /* Styles applied to the root element if `variant="indeterminate"`. */
    indeterminate: {
      animation: 'mui-progress-circular-rotate 1.4s linear infinite' },

    /* Styles applied to the root element if `color="primary"`. */
    colorPrimary: {
      color: theme.palette.primary.main },

    /* Styles applied to the root element if `color="secondary"`. */
    colorSecondary: {
      color: theme.palette.secondary.main },

    /* Styles applied to the `svg` element. */
    svg: {},
    /* Styles applied to the `circle` svg path. */
    circle: {
      stroke: 'currentColor'
      // Use butt to follow the specification, by chance, it's already the default CSS value.
      // strokeLinecap: 'butt',
    },
    /* Styles applied to the `circle` svg path if `variant="static"`. */
    circleStatic: {
      transition: theme.transitions.create('stroke-dashoffset') },

    /* Styles applied to the `circle` svg path if `variant="indeterminate"`. */
    circleIndeterminate: {
      animation: 'mui-progress-circular-dash 1.4s ease-in-out infinite',
      // Some default value that looks fine waiting for the animation to kicks in.
      strokeDasharray: '80px, 200px',
      strokeDashoffset: '0px' // Add the unit to fix a Edge 16 and below bug.
    },
    '@keyframes mui-progress-circular-rotate': {
      '100%': {
        transform: 'rotate(360deg)' } },


    '@keyframes mui-progress-circular-dash': {
      '0%': {
        strokeDasharray: '1px, 200px',
        strokeDashoffset: '0px' },

      '50%': {
        strokeDasharray: '100px, 200px',
        strokeDashoffset: '-15px' },

      '100%': {
        strokeDasharray: '100px, 200px',
        strokeDashoffset: '-120px' } },


    /* Styles applied to the `circle` svg path if `disableShrink={true}`. */
    circleDisableShrink: {
      animation: 'none' } };};



/**
                                * ## ARIA
                                *
                                * If the progress bar is describing the loading progress of a particular region of a page,
                                * you should use `aria-describedby` to point to the progress bar, and set the `aria-busy`
                                * attribute to `true` on that region until it has finished loading.
                                */
function CircularProgress(props) {var _classNames, _classNames2;var

  classes =









  props.classes,className = props.className,color = props.color,disableShrink = props.disableShrink,size = props.size,style = props.style,thickness = props.thickness,value = props.value,variant = props.variant,other = objectWithoutProperties(props, ["classes", "className", "color", "disableShrink", "size", "style", "thickness", "value", "variant"]);

  var circleStyle = {};
  var rootStyle = {};
  var rootProps = {};

  if (variant === 'determinate' || variant === 'static') {
    var circumference = 2 * Math.PI * ((SIZE - thickness) / 2);
    circleStyle.strokeDasharray = circumference.toFixed(3);
    rootProps['aria-valuenow'] = Math.round(value);

    if (variant === 'static') {
      circleStyle.strokeDashoffset = "".concat(((100 - value) / 100 * circumference).toFixed(3), "px");
      rootStyle.transform = 'rotate(-90deg)';
    } else {
      circleStyle.strokeDashoffset = "".concat((easeIn((100 - value) / 100) * circumference).toFixed(
      3), "px");

      rootStyle.transform = "rotate(".concat((easeOut(value / 70) * 270).toFixed(3), "deg)");
    }
  }

  return (
    react.createElement("div", _extends_1({
      className: classnames(
      classes.root, (_classNames = {}, defineProperty(_classNames,

      classes["color".concat(capitalize(color))], color !== 'inherit'), defineProperty(_classNames,
      classes.indeterminate, variant === 'indeterminate'), defineProperty(_classNames,
      classes.static, variant === 'static'), _classNames),

      className),

      style: objectSpread({ width: size, height: size }, rootStyle, style),
      role: "progressbar" },
    rootProps,
    other),

    react.createElement("svg", { className: classes.svg, viewBox: "".concat(SIZE / 2, " ").concat(SIZE / 2, " ").concat(SIZE, " ").concat(SIZE) },
    react.createElement("circle", {
      className: classnames(classes.circle, (_classNames2 = {}, defineProperty(_classNames2,
      classes.circleIndeterminate, variant === 'indeterminate'), defineProperty(_classNames2,
      classes.circleStatic, variant === 'static'), defineProperty(_classNames2,
      classes.circleDisableShrink, disableShrink), _classNames2)),

      style: circleStyle,
      cx: SIZE,
      cy: SIZE,
      r: (SIZE - thickness) / 2,
      fill: "none",
      strokeWidth: thickness }))));




}

CircularProgress.propTypes = {
  /**
                                * Override or extend the styles applied to the component.
                                * See [CSS API](#css-api) below for more details.
                                */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * The color of the component. It supports those theme colors that make sense for this component.
                                */
  color: propTypes.oneOf(['primary', 'secondary', 'inherit']),
  /**
                                                                * If `true`, the shrink animation is disabled.
                                                                * This only works if variant is `indeterminate`.
                                                                */
  disableShrink: chainPropTypes(propTypes.bool, function (props) {
    /* istanbul ignore if */
    if (props.disableShrink && props.variant !== 'indeterminate') {
      return new Error(
      'Material-UI: you have provided the `disableShrink` property ' +
      'with a variant other than `indeterminate`. This will have no effect.');

    }

    return null;
  }),
  /**
       * The size of the circle.
       */
  size: propTypes.oneOfType([propTypes.number, propTypes.string]),
  /**
                                                                    * @ignore
                                                                    */
  style: propTypes.object,
  /**
                            * The thickness of the circle.
                            */
  thickness: propTypes.number,
  /**
                                * The value of the progress indicator for the determinate and static variants.
                                * Value between 0 and 100.
                                */
  value: propTypes.number,
  /**
                            * The variant to use.
                            * Use indeterminate when there is no progress value.
                            */
  variant: propTypes.oneOf(['determinate', 'indeterminate', 'static']) };


CircularProgress.defaultProps = {
  color: 'primary',
  disableShrink: false,
  size: 40,
  thickness: 3.6,
  value: 0,
  variant: 'indeterminate' };


withStyles(styles$n, { name: 'MuiCircularProgress', flip: false })(CircularProgress);

function _classCallCheck$1(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var classCallCheck$1 = _classCallCheck$1;

function _defineProperties$1(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass$1(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties$1(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties$1(Constructor, staticProps);
  return Constructor;
}

var createClass$1 = _createClass$1;

var _typeof_1$1 = createCommonjsModule(function (module) {
function _typeof2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}

module.exports = _typeof;
});

function _assertThisInitialized$1(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

var assertThisInitialized$1 = _assertThisInitialized$1;

function _possibleConstructorReturn$1(self, call) {
  if (call && (_typeof_1$1(call) === "object" || typeof call === "function")) {
    return call;
  }

  return assertThisInitialized$1(self);
}

var possibleConstructorReturn$1 = _possibleConstructorReturn$1;

var getPrototypeOf$2 = createCommonjsModule(function (module) {
function _getPrototypeOf(o) {
  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

module.exports = _getPrototypeOf;
});

var setPrototypeOf$1 = createCommonjsModule(function (module) {
function _setPrototypeOf(o, p) {
  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

module.exports = _setPrototypeOf;
});

function _inherits$1(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) setPrototypeOf$1(subClass, superClass);
}

var inherits$1 = _inherits$1;

function _objectWithoutPropertiesLoose$1(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var objectWithoutPropertiesLoose$1 = _objectWithoutPropertiesLoose$1;

function _objectWithoutProperties$1(source, excluded) {
  if (source == null) return {};
  var target = objectWithoutPropertiesLoose$1(source, excluded);
  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

var objectWithoutProperties$1 = _objectWithoutProperties$1;

var _extends_1$1 = createCommonjsModule(function (module) {
function _extends() {
  module.exports = _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

module.exports = _extends;
});

var reactEventListener_cjs = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _classCallCheck = _interopDefault(classCallCheck$1);
var _createClass = _interopDefault(createClass$1);
var _possibleConstructorReturn = _interopDefault(possibleConstructorReturn$1);
var _getPrototypeOf = _interopDefault(getPrototypeOf$2);
var _inherits = _interopDefault(inherits$1);
var _typeof = _interopDefault(_typeof_1$1);
var _objectWithoutProperties = _interopDefault(objectWithoutProperties$1);
var _extends = _interopDefault(_extends_1$1);
var React = _interopDefault(react);
var PropTypes = _interopDefault(propTypes);
var warning = _interopDefault(warning_1);

function defineProperty(object, property, attr) {
  return Object.defineProperty(object, property, attr);
} // Passive options
// Inspired by https://github.com/Modernizr/Modernizr/blob/master/feature-detects/dom/passiveeventlisteners.js


var passiveOption = function () {
  var cache = null;
  return function () {
    if (cache !== null) {
      return cache;
    }

    var supportsPassiveOption = false;

    try {
      window.addEventListener('test', null, defineProperty({}, 'passive', {
        get: function get() {
          supportsPassiveOption = true;
        }
      }));
    } catch (err) {//
    }

    cache = supportsPassiveOption;
    return supportsPassiveOption;
  }();
}();

var defaultEventOptions = {
  capture: false,
  passive: false
};

function mergeDefaultEventOptions(options) {
  return _extends({}, defaultEventOptions, options);
}

function getEventListenerArgs(eventName, callback, options) {
  var args = [eventName, callback];
  args.push(passiveOption ? options : options.capture);
  return args;
}

function on$$1(target, eventName, callback, options) {
  // eslint-disable-next-line prefer-spread
  target.addEventListener.apply(target, getEventListenerArgs(eventName, callback, options));
}

function off$$1(target, eventName, callback, options) {
  // eslint-disable-next-line prefer-spread
  target.removeEventListener.apply(target, getEventListenerArgs(eventName, callback, options));
}

function forEachListener(props, iteratee) {
  var children = props.children,
      target = props.target,
      eventProps = _objectWithoutProperties(props, ["children", "target"]);

  Object.keys(eventProps).forEach(function (name) {
    if (name.substring(0, 2) !== 'on') {
      return;
    }

    var prop = eventProps[name];

    var type = _typeof(prop);

    var isObject = type === 'object';
    var isFunction = type === 'function';

    if (!isObject && !isFunction) {
      return;
    }

    var capture = name.substr(-7).toLowerCase() === 'capture';
    var eventName = name.substring(2).toLowerCase();
    eventName = capture ? eventName.substring(0, eventName.length - 7) : eventName;

    if (isObject) {
      iteratee(eventName, prop.handler, prop.options);
    } else {
      iteratee(eventName, prop, mergeDefaultEventOptions({
        capture: capture
      }));
    }
  });
}

function withOptions(handler, options) {
  return {
    handler: handler,
    options: mergeDefaultEventOptions(options)
  };
}

var EventListener =
/*#__PURE__*/
function (_React$PureComponent) {
  _inherits(EventListener, _React$PureComponent);

  function EventListener() {
    _classCallCheck(this, EventListener);

    return _possibleConstructorReturn(this, _getPrototypeOf(EventListener).apply(this, arguments));
  }

  _createClass(EventListener, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.applyListeners(on$$1);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      this.applyListeners(off$$1, prevProps);
      this.applyListeners(on$$1);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.applyListeners(off$$1);
    }
  }, {
    key: "applyListeners",
    value: function applyListeners(onOrOff) {
      var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.props;
      var target = props.target;

      if (target) {
        var element = target;

        if (typeof target === 'string') {
          element = window[target];
        }

        forEachListener(props, onOrOff.bind(null, element));
      }
    }
  }, {
    key: "render",
    value: function render() {
      return this.props.children || null;
    }
  }]);

  return EventListener;
}(React.PureComponent);

EventListener.propTypes = {};

exports.withOptions = withOptions;
exports.default = EventListener;
});

var EventListener = unwrapExports(reactEventListener_cjs);
var reactEventListener_cjs_1 = reactEventListener_cjs.withOptions;

/**
                                                     * Listen for click events that occur somewhere in the document, outside of the element itself.
                                                     * For instance, if you need to hide a menu when people click anywhere else on your page.
                                                     */var
ClickAwayListener = /*#__PURE__*/function (_React$Component) {inherits(ClickAwayListener, _React$Component);function ClickAwayListener() {var _getPrototypeOf2;var _this;classCallCheck(this, ClickAwayListener);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(ClickAwayListener)).call.apply(_getPrototypeOf2, [this].concat(args)));defineProperty(assertThisInitialized(assertThisInitialized(_this)), "mounted",
    false);defineProperty(assertThisInitialized(assertThisInitialized(_this)), "moved",

    false);defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleClickAway",












    function (event) {
      // Ignore events that have been `event.preventDefault()` marked.
      if (event.defaultPrevented) {
        return;
      }

      // IE 11 support, which trigger the handleClickAway even after the unbind
      if (!_this.mounted) {
        return;
      }

      // Do not act if user performed touchmove
      if (_this.moved) {
        _this.moved = false;
        return;
      }

      // The child might render null.
      if (!_this.node) {
        return;
      }

      var doc = ownerDocument(_this.node);

      if (
      doc.documentElement &&
      doc.documentElement.contains(event.target) &&
      !_this.node.contains(event.target))
      {
        _this.props.onClickAway(event);
      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleTouchMove",

    function () {
      _this.moved = true;
    });return _this;}createClass(ClickAwayListener, [{ key: "componentDidMount", value: function componentDidMount() {// Finds the first child when a component returns a fragment.
      // https://github.com/facebook/react/blob/036ae3c6e2f056adffc31dfb78d1b6f0c63272f0/packages/react-dom/src/__tests__/ReactDOMFiber-test.js#L105
      this.node = reactDom.findDOMNode(this);this.mounted = true;} }, { key: "componentWillUnmount", value: function componentWillUnmount() {this.mounted = false;} }, { key: "render", value: function render() {var _this$props =
      this.props,children = _this$props.children,mouseEvent = _this$props.mouseEvent,touchEvent = _this$props.touchEvent,onClickAway = _this$props.onClickAway,other = objectWithoutProperties(_this$props, ["children", "mouseEvent", "touchEvent", "onClickAway"]);
      var listenerProps = {};
      if (mouseEvent !== false) {
        listenerProps[mouseEvent] = this.handleClickAway;
      }
      if (touchEvent !== false) {
        listenerProps[touchEvent] = this.handleClickAway;
        listenerProps.onTouchMove = this.handleTouchMove;
      }

      return (
        react.createElement(react.Fragment, null,
        children,
        react.createElement(EventListener, _extends_1({ target: "document" }, listenerProps, other))));


    } }]);return ClickAwayListener;}(react.Component);


ClickAwayListener.propTypes = {
  /**
                                 * The wrapped element.
                                 */
  children: propTypes.element.isRequired,
  /**
                                           * The mouse event to listen to. You can disable the listener by providing `false`.
                                           */
  mouseEvent: propTypes.oneOf(['onClick', 'onMouseDown', 'onMouseUp', false]),
  /**
                                                                                * Callback fired when a "click away" event is detected.
                                                                                */
  onClickAway: propTypes.func.isRequired,
  /**
                                           * The touch event to listen to. You can disable the listener by providing `false`.
                                           */
  touchEvent: propTypes.oneOf(['onTouchStart', 'onTouchEnd', false]) };


ClickAwayListener.defaultProps = {
  mouseEvent: 'onMouseUp',
  touchEvent: 'onTouchEnd' };

var styles$o = function styles(theme) {return {
    /* Styles applied to the container element. */
    container: {
      height: 0,
      overflow: 'hidden',
      transition: theme.transitions.create('height') },

    /* Styles applied to the container element when the transition has entered. */
    entered: {
      height: 'auto',
      overflow: 'visible' },

    /* Styles applied to the outer wrapper element. */
    wrapper: {
      // Hack to get children with a negative margin to not falsify the height computation.
      display: 'flex' },

    /* Styles applied to the inner wrapper element. */
    wrapperInner: {
      width: '100%' } };};



/**
                            * The Collapse transition is used by the
                            * [Vertical Stepper](/demos/steppers/#vertical-stepper) StepContent component.
                            * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
                            */var
Collapse = /*#__PURE__*/function (_React$Component) {inherits(Collapse, _React$Component);function Collapse() {var _getPrototypeOf2;var _this;classCallCheck(this, Collapse);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Collapse)).call.apply(_getPrototypeOf2, [this].concat(args)));defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleEnter",




    function (node) {
      node.style.height = _this.props.collapsedHeight;

      if (_this.props.onEnter) {
        _this.props.onEnter(node);
      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleEntering",

    function (node) {var _this$props =
      _this.props,timeout = _this$props.timeout,theme = _this$props.theme;
      var wrapperHeight = _this.wrapperRef ? _this.wrapperRef.clientHeight : 0;var _getTransitionProps =

      getTransitionProps(_this.props, {
        mode: 'enter' }),transitionDuration = _getTransitionProps.duration;


      if (timeout === 'auto') {
        var duration2 = theme.transitions.getAutoHeightDuration(wrapperHeight);
        node.style.transitionDuration = "".concat(duration2, "ms");
        _this.autoTransitionDuration = duration2;
      } else {
        node.style.transitionDuration =
        typeof transitionDuration === 'string' ? transitionDuration : "".concat(transitionDuration, "ms");
      }

      node.style.height = "".concat(wrapperHeight, "px");

      if (_this.props.onEntering) {
        _this.props.onEntering(node);
      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleEntered",

    function (node) {
      node.style.height = 'auto';

      if (_this.props.onEntered) {
        _this.props.onEntered(node);
      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleExit",

    function (node) {
      var wrapperHeight = _this.wrapperRef ? _this.wrapperRef.clientHeight : 0;
      node.style.height = "".concat(wrapperHeight, "px");

      if (_this.props.onExit) {
        _this.props.onExit(node);
      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleExiting",

    function (node) {var _this$props2 =
      _this.props,timeout = _this$props2.timeout,theme = _this$props2.theme;
      var wrapperHeight = _this.wrapperRef ? _this.wrapperRef.clientHeight : 0;var _getTransitionProps2 =

      getTransitionProps(_this.props, {
        mode: 'exit' }),transitionDuration = _getTransitionProps2.duration;


      if (timeout === 'auto') {
        var duration2 = theme.transitions.getAutoHeightDuration(wrapperHeight);
        node.style.transitionDuration = "".concat(duration2, "ms");
        _this.autoTransitionDuration = duration2;
      } else {
        node.style.transitionDuration =
        typeof transitionDuration === 'string' ? transitionDuration : "".concat(transitionDuration, "ms");
      }

      node.style.height = _this.props.collapsedHeight;

      if (_this.props.onExiting) {
        _this.props.onExiting(node);
      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "addEndListener",

    function (_, next) {
      if (_this.props.timeout === 'auto') {
        _this.timer = setTimeout(next, _this.autoTransitionDuration || 0);
      }
    });return _this;}createClass(Collapse, [{ key: "componentWillUnmount", value: function componentWillUnmount() {clearTimeout(this.timer);} }, { key: "render", value: function render()

    {var _this2 = this;var _this$props3 =















      this.props,children = _this$props3.children,classes = _this$props3.classes,className = _this$props3.className,collapsedHeight = _this$props3.collapsedHeight,Component = _this$props3.component,onEnter = _this$props3.onEnter,onEntered = _this$props3.onEntered,onEntering = _this$props3.onEntering,onExit = _this$props3.onExit,onExiting = _this$props3.onExiting,style = _this$props3.style,theme = _this$props3.theme,timeout = _this$props3.timeout,other = objectWithoutProperties(_this$props3, ["children", "classes", "className", "collapsedHeight", "component", "onEnter", "onEntered", "onEntering", "onExit", "onExiting", "style", "theme", "timeout"]);

      return (
        react.createElement(Transition, _extends_1({
          onEnter: this.handleEnter,
          onEntered: this.handleEntered,
          onEntering: this.handleEntering,
          onExit: this.handleExit,
          onExiting: this.handleExiting,
          addEndListener: this.addEndListener,
          timeout: timeout === 'auto' ? null : timeout },
        other),

        function (state, childProps) {
          return (
            react.createElement(Component, _extends_1({
              className: classnames(
              classes.container, defineProperty({},

              classes.entered, state === 'entered'),

              className),

              style: objectSpread({},
              style, {
                minHeight: collapsedHeight }) },

            childProps),

            react.createElement("div", {
              className: classes.wrapper,
              ref: function ref(_ref) {
                _this2.wrapperRef = _ref;
              } },

            react.createElement("div", { className: classes.wrapperInner }, children))));



        }));


    } }]);return Collapse;}(react.Component);


Collapse.propTypes = {
  /**
                        * The content node to be collapsed.
                        */
  children: propTypes.node,
  /**
                             * Override or extend the styles applied to the component.
                             * See [CSS API](#css-api) below for more details.
                             */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * The height of the container when collapsed.
                                */
  collapsedHeight: propTypes.string,
  /**
                                      * The component used for the root node.
                                      * Either a string to use a DOM element or a component.
                                      */
  component: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                         * If `true`, the component will transition in.
                                                                                         */
  in: propTypes.bool,
  /**
                       * @ignore
                       */
  onEnter: propTypes.func,
  /**
                            * @ignore
                            */
  onEntered: propTypes.func,
  /**
                              * @ignore
                              */
  onEntering: propTypes.func,
  /**
                               * @ignore
                               */
  onExit: propTypes.func,
  /**
                           * @ignore
                           */
  onExiting: propTypes.func,
  /**
                              * @ignore
                              */
  style: propTypes.object,
  /**
                            * @ignore
                            */
  theme: propTypes.object.isRequired,
  /**
                                       * The duration for the transition, in milliseconds.
                                       * You may specify a single timeout for all transitions, or individually with an object.
                                       *
                                       * Set to 'auto' to automatically calculate transition time based on height.
                                       */
  timeout: propTypes.oneOfType([
  propTypes.number,
  propTypes.shape({ enter: propTypes.number, exit: propTypes.number }),
  propTypes.oneOf(['auto'])]) };



Collapse.defaultProps = {
  collapsedHeight: '0px',
  component: 'div',
  timeout: duration.standard };


Collapse.muiSupportAuto = true;

var Collapse$1 = withStyles(styles$o, {
  withTheme: true,
  name: 'MuiCollapse' })(
Collapse);

var styles$p = function styles(theme) {return {
    '@global': {
      html: {
        WebkitFontSmoothing: 'antialiased', // Antialiasing.
        MozOsxFontSmoothing: 'grayscale', // Antialiasing.
        // Change from `box-sizing: content-box` so that `width`
        // is not affected by `padding` or `border`.
        boxSizing: 'border-box' },

      '*, *::before, *::after': {
        boxSizing: 'inherit' },

      body: {
        margin: 0, // Remove the margin in all browsers.
        backgroundColor: theme.palette.background.default,
        '@media print': {
          // Save printer ink.
          backgroundColor: theme.palette.common.white } } } };};





/**
                                                                  * Kickstart an elegant, consistent, and simple baseline to build upon.
                                                                  */var
CssBaseline = /*#__PURE__*/function (_React$Component) {inherits(CssBaseline, _React$Component);function CssBaseline() {classCallCheck(this, CssBaseline);return possibleConstructorReturn(this, getPrototypeOf(CssBaseline).apply(this, arguments));}createClass(CssBaseline, [{ key: "render", value: function render()
    {
      return this.props.children;
    } }]);return CssBaseline;}(react.Component);


CssBaseline.propTypes = {
  /**
                           * You can wrap a node.
                           */
  children: propTypes.node,
  /**
                             * @ignore
                             */
  classes: propTypes.object.isRequired };


CssBaseline.propTypes = exactProp(CssBaseline.propTypes);

CssBaseline.defaultProps = {
  children: null };


withStyles(styles$p, { name: 'MuiCssBaseline' })(CssBaseline);

/**
                                                 * Helper component to allow attaching a ref to a
                                                 * wrapped element to access the underlying DOM element.
                                                 *
                                                 * It's highly inspired by https://github.com/facebook/react/issues/11401#issuecomment-340543801.
                                                 * For example:
                                                 * ```jsx
                                                 * import React from 'react';
                                                 * import RootRef from '@material-ui/core/RootRef';
                                                 *
                                                 * class MyComponent extends React.Component {
                                                 *   constructor() {
                                                 *     super();
                                                 *     this.domRef = React.createRef();
                                                 *   }
                                                 *
                                                 *   componentDidMount() {
                                                 *     console.log(this.domRef.current); // DOM node
                                                 *   }
                                                 *
                                                 *   render() {
                                                 *     return (
                                                 *       <RootRef rootRef={this.domRef}>
                                                 *         <SomeChildComponent />
                                                 *       </RootRef>
                                                 *     );
                                                 *   }
                                                 * }
                                                 * ```
                                                 */var
RootRef = /*#__PURE__*/function (_React$Component) {inherits(RootRef, _React$Component);function RootRef() {classCallCheck(this, RootRef);return possibleConstructorReturn(this, getPrototypeOf(RootRef).apply(this, arguments));}createClass(RootRef, [{ key: "componentDidMount", value: function componentDidMount()
    {
      this.ref = reactDom.findDOMNode(this);
      setRef(this.props.rootRef, this.ref);
    } }, { key: "componentDidUpdate", value: function componentDidUpdate(

    prevProps) {
      var ref = reactDom.findDOMNode(this);

      if (prevProps.rootRef !== this.props.rootRef || this.ref !== ref) {
        if (prevProps.rootRef !== this.props.rootRef) {
          setRef(prevProps.rootRef, null);
        }

        this.ref = ref;
        setRef(this.props.rootRef, this.ref);
      }
    } }, { key: "componentWillUnmount", value: function componentWillUnmount()

    {
      this.ref = null;
      setRef(this.props.rootRef, null);
    } }, { key: "render", value: function render()

    {
      return this.props.children;
    } }]);return RootRef;}(react.Component);


RootRef.propTypes = {
  /**
                       * The wrapped element.
                       */
  children: propTypes.element.isRequired,
  /**
                                           * Provide a way to access the DOM node of the wrapped element.
                                           * You can provide a callback ref or a `React.createRef()` ref.
                                           */
  rootRef: propTypes.oneOfType([propTypes.func, propTypes.object]).isRequired };


RootRef.propTypes = exactProp(RootRef.propTypes);

function getContainer(container, defaultContainer) {
  container = typeof container === 'function' ? container() : container;
  return reactDom.findDOMNode(container) || defaultContainer;
}

function getOwnerDocument(element) {
  return ownerDocument(reactDom.findDOMNode(element));
}

/**
   * Portals provide a first-class way to render children into a DOM node
   * that exists outside the DOM hierarchy of the parent component.
   */var
Portal = /*#__PURE__*/function (_React$Component) {inherits(Portal, _React$Component);function Portal() {var _getPrototypeOf2;var _this;classCallCheck(this, Portal);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Portal)).call.apply(_getPrototypeOf2, [this].concat(args)));defineProperty(assertThisInitialized(assertThisInitialized(_this)), "getMountNode",







































    function () {
      return _this.mountNode;
    });return _this;}createClass(Portal, [{ key: "componentDidMount", value: function componentDidMount() {this.setMountNode(this.props.container); // Only rerender if needed
      if (!this.props.disablePortal) {this.forceUpdate(this.props.onRendered);}} }, { key: "componentDidUpdate", value: function componentDidUpdate(prevProps) {if (prevProps.container !== this.props.container || prevProps.disablePortal !== this.props.disablePortal) {this.setMountNode(this.props.container); // Only rerender if needed
        if (!this.props.disablePortal) {this.forceUpdate(this.props.onRendered);}}} }, { key: "componentWillUnmount", value: function componentWillUnmount() {this.mountNode = null;} }, { key: "setMountNode", value: function setMountNode(container) {if (this.props.disablePortal) {this.mountNode = reactDom.findDOMNode(this).parentElement;return;}this.mountNode = getContainer(container, getOwnerDocument(this).body);} /**
                                                                                                                                                                                                                                                                                                                                                                                                                                   * @public
                                                                                                                                                                                                                                                                                                                                                                                                                                   */ }, { key: "render", value: function render() {var _this$props = this.props,children = _this$props.children,disablePortal = _this$props.disablePortal;
      if (disablePortal) {
        return children;
      }

      return this.mountNode ? reactDom.createPortal(children, this.mountNode) : null;
    } }]);return Portal;}(react.Component);


Portal.propTypes = {
  /**
                      * The children to render into the `container`.
                      */
  children: propTypes.node.isRequired,
  /**
                                        * A node, component instance, or function that returns either.
                                        * The `container` will have the portal children appended to it.
                                        * By default, it uses the body of the top-level document object,
                                        * so it's simply `document.body` most of the time.
                                        */
  container: propTypes.oneOfType([propTypes.object, propTypes.func]),
  /**
                                                                       * Disable the portal behavior.
                                                                       * The children stay within it's parent DOM hierarchy.
                                                                       */
  disablePortal: propTypes.bool,
  /**
                                  * Callback fired once the children has been mounted into the `container`.
                                  */
  onRendered: propTypes.func };


Portal.defaultProps = {
  disablePortal: false };


Portal.propTypes = exactProp(Portal.propTypes);

var interopRequireDefault$4 = createCommonjsModule(function (module) {
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

module.exports = _interopRequireDefault;
});

unwrapExports(interopRequireDefault$4);

var camelize_1$1 = createCommonjsModule(function (module, exports) {

exports.__esModule = true;
exports.default = camelize;
var rHyphen = /-(.)/g;

function camelize(string) {
  return string.replace(rHyphen, function (_, chr) {
    return chr.toUpperCase();
  });
}

module.exports = exports["default"];
});

unwrapExports(camelize_1$1);

var camelizeStyle = createCommonjsModule(function (module, exports) {



exports.__esModule = true;
exports.default = camelizeStyleName;

var _camelize = interopRequireDefault$4(camelize_1$1);

/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 * https://github.com/facebook/react/blob/2aeb8a2a6beb00617a4217f7f8284924fa2ad819/src/vendor/core/camelizeStyleName.js
 */
var msPattern = /^-ms-/;

function camelizeStyleName(string) {
  return (0, _camelize.default)(string.replace(msPattern, 'ms-'));
}

module.exports = exports["default"];
});

unwrapExports(camelizeStyle);

var hyphenate_1 = createCommonjsModule(function (module, exports) {

exports.__esModule = true;
exports.default = hyphenate;
var rUpper = /([A-Z])/g;

function hyphenate(string) {
  return string.replace(rUpper, '-$1').toLowerCase();
}

module.exports = exports["default"];
});

unwrapExports(hyphenate_1);

var hyphenateStyle = createCommonjsModule(function (module, exports) {



exports.__esModule = true;
exports.default = hyphenateStyleName;

var _hyphenate = interopRequireDefault$4(hyphenate_1);

/**
 * Copyright 2013-2014, Facebook, Inc.
 * All rights reserved.
 * https://github.com/facebook/react/blob/2aeb8a2a6beb00617a4217f7f8284924fa2ad819/src/vendor/core/hyphenateStyleName.js
 */
var msPattern = /^ms-/;

function hyphenateStyleName(string) {
  return (0, _hyphenate.default)(string).replace(msPattern, '-ms-');
}

module.exports = exports["default"];
});

unwrapExports(hyphenateStyle);

var getComputedStyle$1 = createCommonjsModule(function (module, exports) {



exports.__esModule = true;
exports.default = _getComputedStyle;

var _camelizeStyle = interopRequireDefault$4(camelizeStyle);

var rposition = /^(top|right|bottom|left)$/;
var rnumnonpx = /^([+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|))(?!px)[a-z%]+$/i;

function _getComputedStyle(node) {
  if (!node) throw new TypeError('No Element passed to `getComputedStyle()`');
  var doc = node.ownerDocument;
  return 'defaultView' in doc ? doc.defaultView.opener ? node.ownerDocument.defaultView.getComputedStyle(node, null) : window.getComputedStyle(node, null) : {
    //ie 8 "magic" from: https://github.com/jquery/jquery/blob/1.11-stable/src/css/curCSS.js#L72
    getPropertyValue: function getPropertyValue(prop) {
      var style = node.style;
      prop = (0, _camelizeStyle.default)(prop);
      if (prop == 'float') prop = 'styleFloat';
      var current = node.currentStyle[prop] || null;
      if (current == null && style && style[prop]) current = style[prop];

      if (rnumnonpx.test(current) && !rposition.test(prop)) {
        // Remember the original values
        var left = style.left;
        var runStyle = node.runtimeStyle;
        var rsLeft = runStyle && runStyle.left; // Put in the new values to get a computed value out

        if (rsLeft) runStyle.left = node.currentStyle.left;
        style.left = prop === 'fontSize' ? '1em' : current;
        current = style.pixelLeft + 'px'; // Revert the changed values

        style.left = left;
        if (rsLeft) runStyle.left = rsLeft;
      }

      return current;
    }
  };
}

module.exports = exports["default"];
});

unwrapExports(getComputedStyle$1);

var removeStyle_1 = createCommonjsModule(function (module, exports) {

exports.__esModule = true;
exports.default = removeStyle;

function removeStyle(node, key) {
  return 'removeProperty' in node.style ? node.style.removeProperty(key) : node.style.removeAttribute(key);
}

module.exports = exports["default"];
});

unwrapExports(removeStyle_1);

var inDOM = createCommonjsModule(function (module, exports) {

exports.__esModule = true;
exports.default = void 0;

var _default = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

exports.default = _default;
module.exports = exports["default"];
});

unwrapExports(inDOM);

var properties = createCommonjsModule(function (module, exports) {



exports.__esModule = true;
exports.default = exports.animationEnd = exports.animationDelay = exports.animationTiming = exports.animationDuration = exports.animationName = exports.transitionEnd = exports.transitionDuration = exports.transitionDelay = exports.transitionTiming = exports.transitionProperty = exports.transform = void 0;

var _inDOM = interopRequireDefault$4(inDOM);

var transform = 'transform';
exports.transform = transform;
var prefix, transitionEnd, animationEnd;
exports.animationEnd = animationEnd;
exports.transitionEnd = transitionEnd;
var transitionProperty, transitionDuration, transitionTiming, transitionDelay;
exports.transitionDelay = transitionDelay;
exports.transitionTiming = transitionTiming;
exports.transitionDuration = transitionDuration;
exports.transitionProperty = transitionProperty;
var animationName, animationDuration, animationTiming, animationDelay;
exports.animationDelay = animationDelay;
exports.animationTiming = animationTiming;
exports.animationDuration = animationDuration;
exports.animationName = animationName;

if (_inDOM.default) {
  var _getTransitionPropert = getTransitionProperties();

  prefix = _getTransitionPropert.prefix;
  exports.transitionEnd = transitionEnd = _getTransitionPropert.transitionEnd;
  exports.animationEnd = animationEnd = _getTransitionPropert.animationEnd;
  exports.transform = transform = prefix + "-" + transform;
  exports.transitionProperty = transitionProperty = prefix + "-transition-property";
  exports.transitionDuration = transitionDuration = prefix + "-transition-duration";
  exports.transitionDelay = transitionDelay = prefix + "-transition-delay";
  exports.transitionTiming = transitionTiming = prefix + "-transition-timing-function";
  exports.animationName = animationName = prefix + "-animation-name";
  exports.animationDuration = animationDuration = prefix + "-animation-duration";
  exports.animationTiming = animationTiming = prefix + "-animation-delay";
  exports.animationDelay = animationDelay = prefix + "-animation-timing-function";
}

var _default = {
  transform: transform,
  end: transitionEnd,
  property: transitionProperty,
  timing: transitionTiming,
  delay: transitionDelay,
  duration: transitionDuration
};
exports.default = _default;

function getTransitionProperties() {
  var style = document.createElement('div').style;
  var vendorMap = {
    O: function O(e) {
      return "o" + e.toLowerCase();
    },
    Moz: function Moz(e) {
      return e.toLowerCase();
    },
    Webkit: function Webkit(e) {
      return "webkit" + e;
    },
    ms: function ms(e) {
      return "MS" + e;
    }
  };
  var vendors = Object.keys(vendorMap);
  var transitionEnd, animationEnd;
  var prefix = '';

  for (var i = 0; i < vendors.length; i++) {
    var vendor = vendors[i];

    if (vendor + "TransitionProperty" in style) {
      prefix = "-" + vendor.toLowerCase();
      transitionEnd = vendorMap[vendor]('TransitionEnd');
      animationEnd = vendorMap[vendor]('AnimationEnd');
      break;
    }
  }

  if (!transitionEnd && 'transitionProperty' in style) transitionEnd = 'transitionend';
  if (!animationEnd && 'animationName' in style) animationEnd = 'animationend';
  style = null;
  return {
    animationEnd: animationEnd,
    transitionEnd: transitionEnd,
    prefix: prefix
  };
}
});

unwrapExports(properties);
var properties_1 = properties.animationEnd;
var properties_2 = properties.animationDelay;
var properties_3 = properties.animationTiming;
var properties_4 = properties.animationDuration;
var properties_5 = properties.animationName;
var properties_6 = properties.transitionEnd;
var properties_7 = properties.transitionDuration;
var properties_8 = properties.transitionDelay;
var properties_9 = properties.transitionTiming;
var properties_10 = properties.transitionProperty;
var properties_11 = properties.transform;

var isTransform_1 = createCommonjsModule(function (module, exports) {

exports.__esModule = true;
exports.default = isTransform;
var supportedTransforms = /^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i;

function isTransform(property) {
  return !!(property && supportedTransforms.test(property));
}

module.exports = exports["default"];
});

unwrapExports(isTransform_1);

var style_1 = createCommonjsModule(function (module, exports) {



exports.__esModule = true;
exports.default = style;

var _camelizeStyle = interopRequireDefault$4(camelizeStyle);

var _hyphenateStyle = interopRequireDefault$4(hyphenateStyle);

var _getComputedStyle2 = interopRequireDefault$4(getComputedStyle$1);

var _removeStyle = interopRequireDefault$4(removeStyle_1);



var _isTransform = interopRequireDefault$4(isTransform_1);

function style(node, property, value) {
  var css = '';
  var transforms = '';
  var props = property;

  if (typeof property === 'string') {
    if (value === undefined) {
      return node.style[(0, _camelizeStyle.default)(property)] || (0, _getComputedStyle2.default)(node).getPropertyValue((0, _hyphenateStyle.default)(property));
    } else {
      (props = {})[property] = value;
    }
  }

  Object.keys(props).forEach(function (key) {
    var value = props[key];

    if (!value && value !== 0) {
      (0, _removeStyle.default)(node, (0, _hyphenateStyle.default)(key));
    } else if ((0, _isTransform.default)(key)) {
      transforms += key + "(" + value + ") ";
    } else {
      css += (0, _hyphenateStyle.default)(key) + ": " + value + ";";
    }
  });

  if (transforms) {
    css += properties.transform + ": " + transforms + ";";
  }

  node.style.cssText += ';' + css;
}

module.exports = exports["default"];
});

var css = unwrapExports(style_1);

var scrollbarSize_1 = createCommonjsModule(function (module, exports) {



exports.__esModule = true;
exports.default = scrollbarSize;

var _inDOM = interopRequireDefault$4(inDOM);

var size;

function scrollbarSize(recalc) {
  if (!size && size !== 0 || recalc) {
    if (_inDOM.default) {
      var scrollDiv = document.createElement('div');
      scrollDiv.style.position = 'absolute';
      scrollDiv.style.top = '-9999px';
      scrollDiv.style.width = '50px';
      scrollDiv.style.height = '50px';
      scrollDiv.style.overflow = 'scroll';
      document.body.appendChild(scrollDiv);
      size = scrollDiv.offsetWidth - scrollDiv.clientWidth;
      document.body.removeChild(scrollDiv);
    }
  }

  return size;
}

module.exports = exports["default"];
});

var getScrollbarSize = unwrapExports(scrollbarSize_1);

var isWindow = createCommonjsModule(function (module, exports) {

exports.__esModule = true;
exports.default = getWindow;

function getWindow(node) {
  return node === node.window ? node : node.nodeType === 9 ? node.defaultView || node.parentWindow : false;
}

module.exports = exports["default"];
});

var isWindow$1 = unwrapExports(isWindow);

function isBody(node) {
  return node && node.tagName.toLowerCase() === 'body';
}

// Do we have a vertical scroll bar?
function isOverflowing(container) {
  var doc = ownerDocument(container);
  var win = ownerWindow(doc);

  /* istanbul ignore next */
  if (!isWindow$1(doc) && !isBody(container)) {
    return container.scrollHeight > container.clientHeight;
  }

  // Takes in account potential non zero margin on the body.
  var style = win.getComputedStyle(doc.body);
  var marginLeft = parseInt(style.getPropertyValue('margin-left'), 10);
  var marginRight = parseInt(style.getPropertyValue('margin-right'), 10);

  return marginLeft + doc.body.clientWidth + marginRight < win.innerWidth;
}

var BLACKLIST = ['template', 'script', 'style'];

function isHidable(node) {
  return node.nodeType === 1 && BLACKLIST.indexOf(node.tagName.toLowerCase()) === -1;
}

function siblings$1(container, mount, currentNode, callback) {
  var blacklist = [mount, currentNode]; // eslint-disable-line no-param-reassign

  [].forEach.call(container.children, function (node) {
    if (blacklist.indexOf(node) === -1 && isHidable(node)) {
      callback(node);
    }
  });
}

function ariaHidden(node, show) {
  if (show) {
    node.setAttribute('aria-hidden', 'true');
  } else {
    node.removeAttribute('aria-hidden');
  }
}

function ariaHiddenSiblings(container, mountNode, currentNode, show) {
  siblings$1(container, mountNode, currentNode, function (node) {return ariaHidden(node, show);});
}

function findIndexOf(data, callback) {
  var idx = -1;
  data.some(function (item, index) {
    if (callback(item)) {
      idx = index;
      return true;
    }
    return false;
  });
  return idx;
}

function getPaddingRight(node) {
  return parseInt(css(node, 'paddingRight') || 0, 10);
}

function setContainerStyle(data) {
  var style = { overflow: 'hidden' };

  // We are only interested in the actual `style` here because we will override it.
  data.style = {
    overflow: data.container.style.overflow,
    paddingRight: data.container.style.paddingRight };


  if (data.overflowing) {
    var scrollbarSize = getScrollbarSize();

    // Use computed style, here to get the real padding to add our scrollbar width.
    style.paddingRight = "".concat(getPaddingRight(data.container) + scrollbarSize, "px");

    // .mui-fixed is a global helper.
    var fixedNodes = ownerDocument(data.container).querySelectorAll('.mui-fixed');
    for (var i = 0; i < fixedNodes.length; i += 1) {
      var paddingRight = getPaddingRight(fixedNodes[i]);
      data.prevPaddings.push(paddingRight);
      fixedNodes[i].style.paddingRight = "".concat(paddingRight + scrollbarSize, "px");
    }
  }

  Object.keys(style).forEach(function (key) {
    data.container.style[key] = style[key];
  });
}

function removeContainerStyle(data) {
  Object.keys(data.style).forEach(function (key) {
    data.container.style[key] = data.style[key];
  });

  var fixedNodes = ownerDocument(data.container).querySelectorAll('.mui-fixed');
  for (var i = 0; i < fixedNodes.length; i += 1) {
    fixedNodes[i].style.paddingRight = "".concat(data.prevPaddings[i], "px");
  }
}

/**
   * @ignore - do not document.
   *
   * Proper state managment for containers and the modals in those containers.
   * Simplified, but inspired by react-overlay's ModalManager class.
   * Used by the Modal to ensure proper styling of containers.
   */var
ModalManager = /*#__PURE__*/function () {
  function ModalManager() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};classCallCheck(this, ModalManager);var _options$hideSiblingN =
    options.hideSiblingNodes,hideSiblingNodes = _options$hideSiblingN === void 0 ? true : _options$hideSiblingN,_options$handleContai = options.handleContainerOverflow,handleContainerOverflow = _options$handleContai === void 0 ? true : _options$handleContai;

    this.hideSiblingNodes = hideSiblingNodes;
    this.handleContainerOverflow = handleContainerOverflow;

    // this.modals[modalIdx] = modal
    this.modals = [];
    // this.data[containerIdx] = {
    //   modals: [],
    //   container,
    //   overflowing,
    //   prevPaddings,
    // }
    this.data = [];
  }createClass(ModalManager, [{ key: "add", value: function add(

    modal, container) {
      var modalIdx = this.modals.indexOf(modal);
      if (modalIdx !== -1) {
        return modalIdx;
      }

      modalIdx = this.modals.length;
      this.modals.push(modal);

      // If the modal we are adding is already in the DOM.
      if (modal.modalRef) {
        ariaHidden(modal.modalRef, false);
      }
      if (this.hideSiblingNodes) {
        ariaHiddenSiblings(container, modal.mountNode, modal.modalRef, true);
      }

      var containerIdx = findIndexOf(this.data, function (item) {return item.container === container;});
      if (containerIdx !== -1) {
        this.data[containerIdx].modals.push(modal);
        return modalIdx;
      }

      var data = {
        modals: [modal],
        container: container,
        overflowing: isOverflowing(container),
        prevPaddings: [] };


      this.data.push(data);

      return modalIdx;
    } }, { key: "mount", value: function mount(

    modal) {
      var containerIdx = findIndexOf(this.data, function (item) {return item.modals.indexOf(modal) !== -1;});
      var data = this.data[containerIdx];

      if (data.modals.length === 1 && this.handleContainerOverflow) {
        setContainerStyle(data);
      }
    } }, { key: "remove", value: function remove(

    modal) {
      var modalIdx = this.modals.indexOf(modal);

      if (modalIdx === -1) {
        return modalIdx;
      }

      var containerIdx = findIndexOf(this.data, function (item) {return item.modals.indexOf(modal) !== -1;});
      var data = this.data[containerIdx];

      data.modals.splice(data.modals.indexOf(modal), 1);
      this.modals.splice(modalIdx, 1);

      // If that was the last modal in a container, clean up the container.
      if (data.modals.length === 0) {
        if (this.handleContainerOverflow) {
          removeContainerStyle(data);
        }

        // In case the modal wasn't in the DOM yet.
        if (modal.modalRef) {
          ariaHidden(modal.modalRef, true);
        }
        if (this.hideSiblingNodes) {
          ariaHiddenSiblings(data.container, modal.mountNode, modal.modalRef, false);
        }
        this.data.splice(containerIdx, 1);
      } else if (this.hideSiblingNodes) {
        // Otherwise make sure the next top modal is visible to a screan reader.
        var nextTop = data.modals[data.modals.length - 1];
        // as soon as a modal is adding its modalRef is undefined. it can't set
        // aria-hidden because the dom element doesn't exist either
        // when modal was unmounted before modalRef gets null
        if (nextTop.modalRef) {
          ariaHidden(nextTop.modalRef, false);
        }
      }

      return modalIdx;
    } }, { key: "isTopModal", value: function isTopModal(

    modal) {
      return !!this.modals.length && this.modals[this.modals.length - 1] === modal;
    } }]);return ModalManager;}();

function getContainer$1(container, defaultContainer) {
  container = typeof container === 'function' ? container() : container;
  return reactDom.findDOMNode(container) || defaultContainer;
}

function getHasTransition(props) {
  return props.children ? props.children.props.hasOwnProperty('in') : false;
}

var styles$q = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: {
      position: 'fixed',
      zIndex: theme.zIndex.modal,
      right: 0,
      bottom: 0,
      top: 0,
      left: 0 },

    /* Styles applied to the root element if the `Modal` has exited. */
    hidden: {
      visibility: 'hidden' } };};

/**
   * This component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).
   */var
Modal = /*#__PURE__*/function (_React$Component) {inherits(Modal, _React$Component);


  function Modal(props) {var _this;classCallCheck(this, Modal);
    _this = possibleConstructorReturn(this, getPrototypeOf(Modal).call(this));defineProperty(assertThisInitialized(assertThisInitialized(_this)), "mounted", false);defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleOpen",














































    function () {
      var doc = ownerDocument(_this.mountNode);
      var container = getContainer$1(_this.props.container, doc.body);

      _this.props.manager.add(assertThisInitialized(assertThisInitialized(_this)), container);
      doc.addEventListener('keydown', _this.handleDocumentKeyDown);
      doc.addEventListener('focus', _this.enforceFocus, true);

      if (_this.dialogRef) {
        _this.handleOpened();
      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleRendered",

    function () {
      if (_this.props.onRendered) {
        _this.props.onRendered();
      }

      if (_this.props.open) {
        _this.handleOpened();
      } else {
        ariaHidden(_this.modalRef, true);
      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleOpened",

    function () {
      _this.autoFocus();
      _this.props.manager.mount(assertThisInitialized(assertThisInitialized(_this)));

      // Fix a bug on Chrome where the scroll isn't initially 0.
      _this.modalRef.scrollTop = 0;
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleClose",

    function () {
      _this.props.manager.remove(assertThisInitialized(assertThisInitialized(_this)));

      var doc = ownerDocument(_this.mountNode);
      doc.removeEventListener('keydown', _this.handleDocumentKeyDown);
      doc.removeEventListener('focus', _this.enforceFocus, true);

      _this.restoreLastFocus();
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleExited",

    function () {
      _this.setState({ exited: true });
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleBackdropClick",

    function (event) {
      if (event.target !== event.currentTarget) {
        return;
      }

      if (_this.props.onBackdropClick) {
        _this.props.onBackdropClick(event);
      }

      if (!_this.props.disableBackdropClick && _this.props.onClose) {
        _this.props.onClose(event, 'backdropClick');
      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleDocumentKeyDown",

    function (event) {
      // Ignore events that have been `event.preventDefault()` marked.
      if (keycode(event) !== 'esc' || !_this.isTopModal() || event.defaultPrevented) {
        return;
      }

      if (_this.props.onEscapeKeyDown) {
        _this.props.onEscapeKeyDown(event);
      }

      if (!_this.props.disableEscapeKeyDown && _this.props.onClose) {
        _this.props.onClose(event, 'escapeKeyDown');
      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "enforceFocus",

    function () {
      // The Modal might not already be mounted.
      if (!_this.isTopModal() || _this.props.disableEnforceFocus || !_this.mounted || !_this.dialogRef) {
        return;
      }

      var currentActiveElement = ownerDocument(_this.mountNode).activeElement;

      if (!_this.dialogRef.contains(currentActiveElement)) {
        _this.dialogRef.focus();
      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handlePortalRef",

    function (ref) {
      _this.mountNode = ref ? ref.getMountNode() : ref;
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleModalRef",

    function (ref) {
      _this.modalRef = ref;
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "onRootRef",

    function (ref) {
      _this.dialogRef = ref;
    });_this.state = { exited: !props.open };return _this;}createClass(Modal, [{ key: "componentDidMount", value: function componentDidMount() {this.mounted = true;if (this.props.open) {this.handleOpen();}} }, { key: "componentDidUpdate", value: function componentDidUpdate(prevProps) {if (prevProps.open && !this.props.open) {this.handleClose();} else if (!prevProps.open && this.props.open) {this.lastFocus = ownerDocument(this.mountNode).activeElement;this.handleOpen();}} }, { key: "componentWillUnmount", value: function componentWillUnmount() {this.mounted = false;if (this.props.open || getHasTransition(this.props) && !this.state.exited) {this.handleClose();}} }, { key: "autoFocus", value: function autoFocus()

    {
      // We might render an empty child.
      if (this.props.disableAutoFocus || !this.dialogRef) {
        return;
      }

      var currentActiveElement = ownerDocument(this.mountNode).activeElement;

      if (!this.dialogRef.contains(currentActiveElement)) {
        if (!this.dialogRef.hasAttribute('tabIndex')) {
          warning_1(
          false,
          [
          'Material-UI: the modal content node does not accept focus.',
          'For the benefit of assistive technologies, ' +
          'the tabIndex of the node is being set to "-1".'].
          join('\n'));

          this.dialogRef.setAttribute('tabIndex', -1);
        }

        this.lastFocus = currentActiveElement;
        this.dialogRef.focus();
      }
    } }, { key: "restoreLastFocus", value: function restoreLastFocus()

    {
      if (this.props.disableRestoreFocus || !this.lastFocus) {
        return;
      }

      // Not all elements in IE 11 have a focus method.
      // Because IE 11 market share is low, we accept the restore focus being broken
      // and we silent the issue.
      if (this.lastFocus.focus) {
        this.lastFocus.focus();
      }

      this.lastFocus = null;
    } }, { key: "isTopModal", value: function isTopModal()

    {
      return this.props.manager.isTopModal(this);
    } }, { key: "render", value: function render()

    {var _this$props =






















      this.props,BackdropComponent = _this$props.BackdropComponent,BackdropProps = _this$props.BackdropProps,children = _this$props.children,classes = _this$props.classes,className = _this$props.className,container = _this$props.container,disableAutoFocus = _this$props.disableAutoFocus,disableBackdropClick = _this$props.disableBackdropClick,disableEnforceFocus = _this$props.disableEnforceFocus,disableEscapeKeyDown = _this$props.disableEscapeKeyDown,disablePortal = _this$props.disablePortal,disableRestoreFocus = _this$props.disableRestoreFocus,hideBackdrop = _this$props.hideBackdrop,keepMounted = _this$props.keepMounted,manager = _this$props.manager,onBackdropClick = _this$props.onBackdropClick,onClose = _this$props.onClose,onEscapeKeyDown = _this$props.onEscapeKeyDown,onRendered = _this$props.onRendered,open = _this$props.open,other = objectWithoutProperties(_this$props, ["BackdropComponent", "BackdropProps", "children", "classes", "className", "container", "disableAutoFocus", "disableBackdropClick", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "hideBackdrop", "keepMounted", "manager", "onBackdropClick", "onClose", "onEscapeKeyDown", "onRendered", "open"]);var
      exited = this.state.exited;
      var hasTransition = getHasTransition(this.props);

      if (!keepMounted && !open && (!hasTransition || exited)) {
        return null;
      }

      var childProps = {};

      // It's a Transition like component
      if (hasTransition) {
        childProps.onExited = createChainedFunction(this.handleExited, children.props.onExited);
      }

      if (children.props.role === undefined) {
        childProps.role = children.props.role || 'document';
      }

      if (children.props.tabIndex === undefined) {
        childProps.tabIndex = children.props.tabIndex || '-1';
      }

      return (
        react.createElement(Portal, {
          ref: this.handlePortalRef,
          container: container,
          disablePortal: disablePortal,
          onRendered: this.handleRendered },

        react.createElement("div", _extends_1({
          "data-mui-test": "Modal",
          ref: this.handleModalRef,
          className: classnames('mui-fixed', classes.root, className, defineProperty({},
          classes.hidden, exited)) },

        other),

        hideBackdrop ? null :
        react.createElement(BackdropComponent, _extends_1({ open: open, onClick: this.handleBackdropClick }, BackdropProps)),

        react.createElement(RootRef, { rootRef: this.onRootRef }, react.cloneElement(children, childProps)))));



    } }], [{ key: "getDerivedStateFromProps", value: function getDerivedStateFromProps(nextProps) {if (nextProps.open) {return { exited: false };}if (!getHasTransition(nextProps)) {// Otherwise let handleExited take care of marking exited.
        return { exited: true };}return null;} }]);return Modal;}(react.Component);

Modal.propTypes = {
  /**
                     * A backdrop component. This property enables custom backdrop rendering.
                     */
  BackdropComponent: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                                 * Properties applied to the [`Backdrop`](/api/backdrop/) element.
                                                                                                 */
  BackdropProps: propTypes.object,
  /**
                                    * A single child content element.
                                    */
  children: propTypes.element,
  /**
                                * Override or extend the styles applied to the component.
                                * See [CSS API](#css-api) below for more details.
                                */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * A node, component instance, or function that returns either.
                                * The `container` will have the portal children appended to it.
                                */
  container: propTypes.oneOfType([propTypes.object, propTypes.func]),
  /**
                                                                       * If `true`, the modal will not automatically shift focus to itself when it opens, and
                                                                       * replace it to the last focused element when it closes.
                                                                       * This also works correctly with any modal children that have the `disableAutoFocus` prop.
                                                                       *
                                                                       * Generally this should never be set to `true` as it makes the modal less
                                                                       * accessible to assistive technologies, like screen readers.
                                                                       */
  disableAutoFocus: propTypes.bool,
  /**
                                     * If `true`, clicking the backdrop will not fire any callback.
                                     */
  disableBackdropClick: propTypes.bool,
  /**
                                         * If `true`, the modal will not prevent focus from leaving the modal while open.
                                         *
                                         * Generally this should never be set to `true` as it makes the modal less
                                         * accessible to assistive technologies, like screen readers.
                                         */
  disableEnforceFocus: propTypes.bool,
  /**
                                        * If `true`, hitting escape will not fire any callback.
                                        */
  disableEscapeKeyDown: propTypes.bool,
  /**
                                         * Disable the portal behavior.
                                         * The children stay within it's parent DOM hierarchy.
                                         */
  disablePortal: propTypes.bool,
  /**
                                  * If `true`, the modal will not restore focus to previously focused element once
                                  * modal is hidden.
                                  */
  disableRestoreFocus: propTypes.bool,
  /**
                                        * If `true`, the backdrop is not rendered.
                                        */
  hideBackdrop: propTypes.bool,
  /**
                                 * Always keep the children in the DOM.
                                 * This property can be useful in SEO situation or
                                 * when you want to maximize the responsiveness of the Modal.
                                 */
  keepMounted: propTypes.bool,
  /**
                                * A modal manager used to track and manage the state of open
                                * Modals. This enables customizing how modals interact within a container.
                                */
  manager: propTypes.object,
  /**
                              * Callback fired when the backdrop is clicked.
                              */
  onBackdropClick: propTypes.func,
  /**
                                    * Callback fired when the component requests to be closed.
                                    * The `reason` parameter can optionally be used to control the response to `onClose`.
                                    *
                                    * @param {object} event The event source of the callback
                                    * @param {string} reason Can be:`"escapeKeyDown"`, `"backdropClick"`
                                    */
  onClose: propTypes.func,
  /**
                            * Callback fired when the escape key is pressed,
                            * `disableEscapeKeyDown` is false and the modal is in focus.
                            */
  onEscapeKeyDown: propTypes.func,
  /**
                                    * Callback fired once the children has been mounted into the `container`.
                                    * It signals that the `open={true}` property took effect.
                                    */
  onRendered: propTypes.func,
  /**
                               * If `true`, the modal is open.
                               */
  open: propTypes.bool.isRequired };


Modal.defaultProps = {
  BackdropComponent: Backdrop$1,
  disableAutoFocus: false,
  disableBackdropClick: false,
  disableEnforceFocus: false,
  disableEscapeKeyDown: false,
  disablePortal: false,
  disableRestoreFocus: false,
  hideBackdrop: false,
  keepMounted: false,
  // Modals don't open on the server so this won't conflict with concurrent requests.
  manager: new ModalManager() };


var Modal$1 = withStyles(styles$q, { flip: false, name: 'MuiModal' })(Modal);

var styles$r = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: {},
    /* Styles applied to the root element if `scroll="paper"`. */
    scrollPaper: {
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center' },

    /* Styles applied to the root element if `scroll="body"`. */
    scrollBody: {
      overflowY: 'auto',
      overflowX: 'hidden' },

    /* Styles applied to the container element. */
    container: {
      height: '100%',
      // We disable the focus ring for mouse, touch and keyboard users.
      outline: 'none' },

    /* Styles applied to the `Paper` component. */
    paper: {
      display: 'flex',
      flexDirection: 'column',
      margin: 48,
      position: 'relative',
      overflowY: 'auto' // Fix IE 11 issue, to remove at some point.
    },
    /* Styles applied to the `Paper` component if `scroll="paper"`. */
    paperScrollPaper: {
      flex: '0 1 auto',
      maxHeight: 'calc(100% - 96px)' },

    /* Styles applied to the `Paper` component if `scroll="body"`. */
    paperScrollBody: {
      margin: '48px auto' },

    /* Styles applied to the `Paper` component if `maxWidth="xs"`. */
    paperWidthXs: {
      maxWidth: Math.max(theme.breakpoints.values.xs, 360),
      '&$paperScrollBody': defineProperty({},
      theme.breakpoints.down(Math.max(theme.breakpoints.values.xs, 360) + 48 * 2), {
        margin: 48 }) },



    /* Styles applied to the `Paper` component if `maxWidth="sm"`. */
    paperWidthSm: {
      maxWidth: theme.breakpoints.values.sm,
      '&$paperScrollBody': defineProperty({},
      theme.breakpoints.down(theme.breakpoints.values.sm + 48 * 2), {
        margin: 48 }) },



    /* Styles applied to the `Paper` component if `maxWidth="md"`. */
    paperWidthMd: {
      maxWidth: theme.breakpoints.values.md,
      '&$paperScrollBody': defineProperty({},
      theme.breakpoints.down(theme.breakpoints.values.md + 48 * 2), {
        margin: 48 }) },



    /* Styles applied to the `Paper` component if `maxWidth="lg"`. */
    paperWidthLg: {
      maxWidth: theme.breakpoints.values.lg,
      '&$paperScrollBody': defineProperty({},
      theme.breakpoints.down(theme.breakpoints.values.lg + 48 * 2), {
        margin: 48 }) },



    /* Styles applied to the `Paper` component if `maxWidth="xl"`. */
    paperWidthXl: {
      maxWidth: theme.breakpoints.values.xl,
      '&$paperScrollBody': defineProperty({},
      theme.breakpoints.down(theme.breakpoints.values.xl + 48 * 2), {
        margin: 48 }) },



    /* Styles applied to the `Paper` component if `fullWidth={true}`. */
    paperFullWidth: {
      width: '100%' },

    /* Styles applied to the `Paper` component if `fullScreen={true}`. */
    paperFullScreen: {
      margin: 0,
      width: '100%',
      maxWidth: '100%',
      height: '100%',
      maxHeight: 'none',
      borderRadius: 0,
      '&$paperScrollBody': {
        margin: 0 } } };};




/**
                            * Dialogs are overlaid modal paper based components with a backdrop.
                            */var
Dialog = /*#__PURE__*/function (_React$Component) {inherits(Dialog, _React$Component);function Dialog() {var _getPrototypeOf2;var _this;classCallCheck(this, Dialog);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Dialog)).call.apply(_getPrototypeOf2, [this].concat(args)));defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleBackdropClick",
    function (event) {
      if (event.target !== event.currentTarget) {
        return;
      }

      if (_this.props.onBackdropClick) {
        _this.props.onBackdropClick(event);
      }

      if (!_this.props.disableBackdropClick && _this.props.onClose) {
        _this.props.onClose(event, 'backdropClick');
      }
    });return _this;}createClass(Dialog, [{ key: "render", value: function render()

    {var _classNames;var _this$props =


























      this.props,BackdropProps = _this$props.BackdropProps,children = _this$props.children,classes = _this$props.classes,className = _this$props.className,disableBackdropClick = _this$props.disableBackdropClick,disableEscapeKeyDown = _this$props.disableEscapeKeyDown,fullScreen = _this$props.fullScreen,fullWidth = _this$props.fullWidth,maxWidth = _this$props.maxWidth,onBackdropClick = _this$props.onBackdropClick,onClose = _this$props.onClose,onEnter = _this$props.onEnter,onEntered = _this$props.onEntered,onEntering = _this$props.onEntering,onEscapeKeyDown = _this$props.onEscapeKeyDown,onExit = _this$props.onExit,onExited = _this$props.onExited,onExiting = _this$props.onExiting,open = _this$props.open,PaperProps = _this$props.PaperProps,scroll = _this$props.scroll,TransitionComponent = _this$props.TransitionComponent,transitionDuration = _this$props.transitionDuration,TransitionProps = _this$props.TransitionProps,other = objectWithoutProperties(_this$props, ["BackdropProps", "children", "classes", "className", "disableBackdropClick", "disableEscapeKeyDown", "fullScreen", "fullWidth", "maxWidth", "onBackdropClick", "onClose", "onEnter", "onEntered", "onEntering", "onEscapeKeyDown", "onExit", "onExited", "onExiting", "open", "PaperProps", "scroll", "TransitionComponent", "transitionDuration", "TransitionProps"]);

      return (
        react.createElement(Modal$1, _extends_1({
          className: classnames(classes.root, className),
          BackdropProps: objectSpread({
            transitionDuration: transitionDuration },
          BackdropProps),

          disableBackdropClick: disableBackdropClick,
          disableEscapeKeyDown: disableEscapeKeyDown,
          onBackdropClick: onBackdropClick,
          onEscapeKeyDown: onEscapeKeyDown,
          onClose: onClose,
          open: open,
          role: "dialog" },
        other),

        react.createElement(TransitionComponent, _extends_1({
          appear: true,
          in: open,
          timeout: transitionDuration,
          onEnter: onEnter,
          onEntering: onEntering,
          onEntered: onEntered,
          onExit: onExit,
          onExiting: onExiting,
          onExited: onExited },
        TransitionProps),

        react.createElement("div", {
          className: classnames(classes.container, classes["scroll".concat(capitalize(scroll))]),
          onClick: this.handleBackdropClick,
          role: "document" },

        react.createElement(Paper$1, _extends_1({
          elevation: 24,
          className: classnames(classes.paper, classes["paperScroll".concat(capitalize(scroll))], (_classNames = {}, defineProperty(_classNames,
          classes["paperWidth".concat(maxWidth ? capitalize(maxWidth) : '')], maxWidth), defineProperty(_classNames,
          classes.paperFullScreen, fullScreen), defineProperty(_classNames,
          classes.paperFullWidth, fullWidth), _classNames)) },

        PaperProps),

        children)))));





    } }]);return Dialog;}(react.Component);


Dialog.propTypes = {
  /**
                      * @ignore
                      */
  BackdropProps: propTypes.object,
  /**
                                    * Dialog children, usually the included sub-components.
                                    */
  children: propTypes.node.isRequired,
  /**
                                        * Override or extend the styles applied to the component.
                                        * See [CSS API](#css-api) below for more details.
                                        */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * If `true`, clicking the backdrop will not fire the `onClose` callback.
                                */
  disableBackdropClick: propTypes.bool,
  /**
                                         * If `true`, hitting escape will not fire the `onClose` callback.
                                         */
  disableEscapeKeyDown: propTypes.bool,
  /**
                                         * If `true`, the dialog will be full-screen
                                         */
  fullScreen: propTypes.bool,
  /**
                               * If `true`, the dialog stretches to `maxWidth`.
                               */
  fullWidth: propTypes.bool,
  /**
                              * Determine the max width of the dialog.
                              * The dialog width grows with the size of the screen, this property is useful
                              * on the desktop where you might need some coherent different width size across your
                              * application. Set to `false` to disable `maxWidth`.
                              */
  maxWidth: propTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl', false]),
  /**
                                                                     * Callback fired when the backdrop is clicked.
                                                                     */
  onBackdropClick: propTypes.func,
  /**
                                    * Callback fired when the component requests to be closed.
                                    *
                                    * @param {object} event The event source of the callback
                                    */
  onClose: propTypes.func,
  /**
                            * Callback fired before the dialog enters.
                            */
  onEnter: propTypes.func,
  /**
                            * Callback fired when the dialog has entered.
                            */
  onEntered: propTypes.func,
  /**
                              * Callback fired when the dialog is entering.
                              */
  onEntering: propTypes.func,
  /**
                               * Callback fired when the escape key is pressed,
                               * `disableKeyboard` is false and the modal is in focus.
                               */
  onEscapeKeyDown: propTypes.func,
  /**
                                    * Callback fired before the dialog exits.
                                    */
  onExit: propTypes.func,
  /**
                           * Callback fired when the dialog has exited.
                           */
  onExited: propTypes.func,
  /**
                             * Callback fired when the dialog is exiting.
                             */
  onExiting: propTypes.func,
  /**
                              * If `true`, the Dialog is open.
                              */
  open: propTypes.bool.isRequired,
  /**
                                    * Properties applied to the [`Paper`](/api/paper/) element.
                                    */
  PaperProps: propTypes.object,
  /**
                                 * Determine the container for scrolling the dialog.
                                 */
  scroll: propTypes.oneOf(['body', 'paper']),
  /**
                                               * Transition component.
                                               */
  TransitionComponent: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                                   * The duration for the transition, in milliseconds.
                                                                                                   * You may specify a single timeout for all transitions, or individually with an object.
                                                                                                   */
  transitionDuration: propTypes.oneOfType([
  propTypes.number,
  propTypes.shape({ enter: propTypes.number, exit: propTypes.number })]),

  /**
                                                                           * Properties applied to the `Transition` element.
                                                                           */
  TransitionProps: propTypes.object };


Dialog.defaultProps = {
  disableBackdropClick: false,
  disableEscapeKeyDown: false,
  fullScreen: false,
  fullWidth: false,
  maxWidth: 'sm',
  scroll: 'paper',
  TransitionComponent: Fade$1,
  transitionDuration: { enter: duration.enteringScreen, exit: duration.leavingScreen } };


withStyles(styles$r, { name: 'MuiDialog' })(Dialog);

var styles$s = {
  /* Styles applied to the root element. */
  root: {
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'flex-end',
    flex: '0 0 auto',
    margin: '8px 4px' },

  /* Styles applied to the children. */
  action: {
    margin: '0 4px' } };



function DialogActions(props) {var
  disableActionSpacing = props.disableActionSpacing,children = props.children,classes = props.classes,className = props.className,other = objectWithoutProperties(props, ["disableActionSpacing", "children", "classes", "className"]);

  return (
    react.createElement("div", _extends_1({ className: classnames(classes.root, className) }, other),
    disableActionSpacing ? children : cloneChildrenWithClassName(children, classes.action)));


}

DialogActions.propTypes = {
  /**
                             * The content of the component.
                             */
  children: propTypes.node,
  /**
                             * Override or extend the styles applied to the component.
                             * See [CSS API](#css-api) below for more details.
                             */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * If `true`, the dialog actions do not have additional margin.
                                */
  disableActionSpacing: propTypes.bool };


DialogActions.defaultProps = {
  disableActionSpacing: false };


withStyles(styles$s, { name: 'MuiDialogActions' })(DialogActions);

var styles$t = {
  /* Styles applied to the root element. */
  root: {
    flex: '1 1 auto',
    overflowY: 'auto',
    WebkitOverflowScrolling: 'touch', // Add iOS momentum scrolling.
    padding: '0 24px 24px',
    '&:first-child': {
      paddingTop: 24 } } };




function DialogContent(props) {var
  classes = props.classes,children = props.children,className = props.className,other = objectWithoutProperties(props, ["classes", "children", "className"]);

  return (
    react.createElement("div", _extends_1({ className: classnames(classes.root, className) }, other),
    children));


}

DialogContent.propTypes = {
  /**
                             * The content of the component.
                             */
  children: propTypes.node,
  /**
                             * Override or extend the styles applied to the component.
                             * See [CSS API](#css-api) below for more details.
                             */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string };


withStyles(styles$t, { name: 'MuiDialogContent' })(DialogContent);

var styles$u = {
  /* Styles applied to the root element. */
  root: {
    // Should use variant="body1" in v4.0.0
    lineHeight: 1.5 } };



function DialogContentText(props) {
  return (
    react.createElement(Typography$1, _extends_1({
      component: "p",
      internalDeprecatedVariant: true,
      variant: "subheading",
      color: "textSecondary" },
    props)));


}

DialogContentText.propTypes = {
  /**
                                 * The content of the component.
                                 */
  children: propTypes.node,
  /**
                             * Override or extend the styles applied to the component.
                             * See [CSS API](#css-api) below for more details.
                             */
  classes: propTypes.object.isRequired };


withStyles(styles$u, { name: 'MuiDialogContentText' })(DialogContentText);

var styles$v = {
  /* Styles applied to the root element. */
  root: {
    margin: 0,
    padding: '24px 24px 20px',
    flex: '0 0 auto' } };



function DialogTitle(props) {var
  children = props.children,classes = props.classes,className = props.className,disableTypography = props.disableTypography,other = objectWithoutProperties(props, ["children", "classes", "className", "disableTypography"]);

  return (
    react.createElement("div", _extends_1({ className: classnames(classes.root, className) }, other),
    disableTypography ?
    children :

    react.createElement(Typography$1, { variant: "title", internalDeprecatedVariant: true },
    children)));




}

DialogTitle.propTypes = {
  /**
                           * The content of the component.
                           */
  children: propTypes.node.isRequired,
  /**
                                        * Override or extend the styles applied to the component.
                                        * See [CSS API](#css-api) below for more details.
                                        */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * If `true`, the children won't be wrapped by a typography component.
                                * For instance, this can be useful to render an h4 instead of the default h2.
                                */
  disableTypography: propTypes.bool };


DialogTitle.defaultProps = {
  disableTypography: false };


withStyles(styles$v, { name: 'MuiDialogTitle' })(DialogTitle);

var styles$w = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: {
      height: 1,
      margin: 0, // Reset browser default style.
      border: 'none',
      flexShrink: 0,
      backgroundColor: theme.palette.divider },

    /* Styles applied to the root element if `absolute={true}`. */
    absolute: {
      position: 'absolute',
      bottom: 0,
      left: 0,
      width: '100%' },

    /* Styles applied to the root element if `variant="inset"`. */
    inset: {
      marginLeft: 72 },

    /* Styles applied to the root element if `light={true}`. */
    light: {
      backgroundColor: fade(theme.palette.divider, 0.08) },

    /* Styles applied to the root element if `variant="middle"`. */
    middle: {
      marginLeft: theme.spacing.unit * 2,
      marginRight: theme.spacing.unit * 2 } };};



function Divider(props) {var _classNames;var

  absolute =







  props.absolute,classes = props.classes,className = props.className,Component = props.component,inset = props.inset,light = props.light,variant = props.variant,other = objectWithoutProperties(props, ["absolute", "classes", "className", "component", "inset", "light", "variant"]);

  return (
    react.createElement(Component, _extends_1({
      className: classnames(
      classes.root, (_classNames = {}, defineProperty(_classNames,

      classes.inset, inset || variant === 'inset'), defineProperty(_classNames,
      classes.middle, variant === 'middle'), defineProperty(_classNames,
      classes.absolute, absolute), defineProperty(_classNames,
      classes.light, light), _classNames),

      className) },

    other)));


}

Divider.propTypes = {
  /**
                       * Absolutely position the element.
                       */
  absolute: propTypes.bool,
  /**
                             * Override or extend the styles applied to the component.
                             * See [CSS API](#css-api) below for more details.
                             */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * The component used for the root node.
                                * Either a string to use a DOM element or a component.
                                */
  component: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                         * If `true`, the divider will be indented.
                                                                                         * __WARNING__: `inset` is deprecated.
                                                                                         * Instead use `variant="inset"`.
                                                                                         */
  inset: chainPropTypes(propTypes.bool, function (props) {
    /* istanbul ignore if */
    if (props.inset) {
      return new Error(
      'Material-UI: you are using the deprecated `inset` property ' +
      'that will be removed in the next major release. The property `variant="inset"` ' +
      'is equivalent and should be used instead.');

    }

    return null;
  }),
  /**
       * If `true`, the divider will have a lighter color.
       */
  light: propTypes.bool,
  /**
                          *  The variant to use.
                          */
  variant: propTypes.oneOf(['fullWidth', 'inset', 'middle']) };


Divider.defaultProps = {
  absolute: false,
  component: 'hr',
  light: false,
  variant: 'fullWidth' };


withStyles(styles$w, { name: 'MuiDivider' })(Divider);

/**
 * Returns a function, that, as long as it continues to be invoked, will not
 * be triggered. The function will be called after it stops being called for
 * N milliseconds. If `immediate` is passed, trigger the function on the
 * leading edge, instead of the trailing. The function also has a property 'clear' 
 * that is a function which will clear the timer to prevent previously scheduled executions. 
 *
 * @source underscore.js
 * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/
 * @param {Function} function to wrap
 * @param {Number} timeout in ms (`100`)
 * @param {Boolean} whether to execute at the beginning (`false`)
 * @api public
 */
function debounce(func, wait, immediate){
  var timeout, args, context, timestamp, result;
  if (null == wait) wait = 100;

  function later() {
    var last = Date.now() - timestamp;

    if (last < wait && last >= 0) {
      timeout = setTimeout(later, wait - last);
    } else {
      timeout = null;
      if (!immediate) {
        result = func.apply(context, args);
        context = args = null;
      }
    }
  }
  var debounced = function(){
    context = this;
    args = arguments;
    timestamp = Date.now();
    var callNow = immediate && !timeout;
    if (!timeout) timeout = setTimeout(later, wait);
    if (callNow) {
      result = func.apply(context, args);
      context = args = null;
    }

    return result;
  };

  debounced.clear = function() {
    if (timeout) {
      clearTimeout(timeout);
      timeout = null;
    }
  };
  
  debounced.flush = function() {
    if (timeout) {
      result = func.apply(context, args);
      context = args = null;
      
      clearTimeout(timeout);
      timeout = null;
    }
  };

  return debounced;
}
// Adds compatibility for ES modules
debounce.debounce = debounce;

var debounce_1 = debounce;

var GUTTER = 24;

// Translate the node so he can't be seen on the screen.
// Later, we gonna translate back the node to his original location
// with `translate3d(0, 0, 0)`.`
function getTranslateValue(props, node) {var
  direction = props.direction;
  var rect = node.getBoundingClientRect();

  var transform;

  if (node.fakeTransform) {
    transform = node.fakeTransform;
  } else {
    var computedStyle = ownerWindow(node).getComputedStyle(node);
    transform =
    computedStyle.getPropertyValue('-webkit-transform') ||
    computedStyle.getPropertyValue('transform');
  }

  var offsetX = 0;
  var offsetY = 0;

  if (transform && transform !== 'none' && typeof transform === 'string') {
    var transformValues = transform.
    split('(')[1].
    split(')')[0].
    split(',');
    offsetX = parseInt(transformValues[4], 10);
    offsetY = parseInt(transformValues[5], 10);
  }

  if (direction === 'left') {
    return "translateX(100vw) translateX(-".concat(rect.left - offsetX, "px)");
  }

  if (direction === 'right') {
    return "translateX(-".concat(rect.left + rect.width + GUTTER - offsetX, "px)");
  }

  if (direction === 'up') {
    return "translateY(100vh) translateY(-".concat(rect.top - offsetY, "px)");
  }

  // direction === 'down'
  return "translateY(-".concat(rect.top + rect.height + GUTTER - offsetY, "px)");
}

function setTranslateValue(props, node) {
  var transform = getTranslateValue(props, node);

  if (transform) {
    node.style.webkitTransform = transform;
    node.style.transform = transform;
  }
}

/**
   * The Slide transition is used by the [Snackbar](/demos/snackbars/) component.
   * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
   */var
Slide = /*#__PURE__*/function (_React$Component) {inherits(Slide, _React$Component);


  function Slide() {var _this;classCallCheck(this, Slide);
    _this = possibleConstructorReturn(this, getPrototypeOf(Slide).call(this));defineProperty(assertThisInitialized(assertThisInitialized(_this)), "mounted", false);defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleEnter",







































    function (node) {
      setTranslateValue(_this.props, node);
      reflow(node);

      if (_this.props.onEnter) {
        _this.props.onEnter(node);
      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleEntering",

    function (node) {var
      theme = _this.props.theme;

      var transitionProps = getTransitionProps(_this.props, {
        mode: 'enter' });

      node.style.webkitTransition = theme.transitions.create('-webkit-transform', objectSpread({},
      transitionProps, {
        easing: theme.transitions.easing.easeOut }));

      node.style.transition = theme.transitions.create('transform', objectSpread({},
      transitionProps, {
        easing: theme.transitions.easing.easeOut }));

      node.style.webkitTransform = 'translate(0, 0)';
      node.style.transform = 'translate(0, 0)';
      if (_this.props.onEntering) {
        _this.props.onEntering(node);
      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleExit",

    function (node) {var
      theme = _this.props.theme;

      var transitionProps = getTransitionProps(_this.props, {
        mode: 'exit' });

      node.style.webkitTransition = theme.transitions.create('-webkit-transform', objectSpread({},
      transitionProps, {
        easing: theme.transitions.easing.sharp }));

      node.style.transition = theme.transitions.create('transform', objectSpread({},
      transitionProps, {
        easing: theme.transitions.easing.sharp }));

      setTranslateValue(_this.props, node);

      if (_this.props.onExit) {
        _this.props.onExit(node);
      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleExited",

    function (node) {
      // No need for transitions when the component is hidden
      node.style.webkitTransition = '';
      node.style.transition = '';

      if (_this.props.onExited) {
        _this.props.onExited(node);
      }
    });if (typeof window !== 'undefined') {_this.handleResize = debounce_1(function () {// Skip configuration where the position is screen size invariant.
        if (_this.props.in || _this.props.direction === 'down' || _this.props.direction === 'right') {return;}if (_this.transitionRef) {setTranslateValue(_this.props, _this.transitionRef);}}, 166); // Corresponds to 10 frames at 60 Hz.
    }return _this;}createClass(Slide, [{ key: "componentDidMount", value: function componentDidMount() {this.mounted = true; // state.mounted handle SSR, once the component is mounted, we need
      // to properly hide it.
      if (!this.props.in) {// We need to set initial translate values of transition element
        // otherwise component will be shown when in=false.
        this.updatePosition();}} }, { key: "componentDidUpdate", value: function componentDidUpdate(prevProps) {if (prevProps.direction !== this.props.direction && !this.props.in) {// We need to update the position of the drawer when the direction change and
        // when it's hidden.
        this.updatePosition();}} }, { key: "componentWillUnmount", value: function componentWillUnmount() {this.handleResize.clear();} }, { key: "updatePosition", value: function updatePosition() {if (this.transitionRef) {this.transitionRef.style.visibility = 'inherit';setTranslateValue(this.props, this.transitionRef);}} }, { key: "render", value: function render()
    {var _this2 = this;var _this$props =









      this.props,children = _this$props.children,onEnter = _this$props.onEnter,onEntering = _this$props.onEntering,onExit = _this$props.onExit,onExited = _this$props.onExited,styleProp = _this$props.style,theme = _this$props.theme,other = objectWithoutProperties(_this$props, ["children", "onEnter", "onEntering", "onExit", "onExited", "style", "theme"]);

      var style = {};

      // We use this state to handle the server-side rendering.
      // We don't know the width of the children ahead of time.
      // We need to render it.
      if (!this.props.in && !this.mounted) {
        style.visibility = 'hidden';
      }

      style = objectSpread({},
      style,
      styleProp,
      react.isValidElement(children) ? children.props.style : {});


      return (
        react.createElement(EventListener, { target: "window", onResize: this.handleResize },
        react.createElement(Transition, _extends_1({
          onEnter: this.handleEnter,
          onEntering: this.handleEntering,
          onExit: this.handleExit,
          onExited: this.handleExited,
          appear: true,
          style: style,
          ref: function ref(_ref) {
            _this2.transitionRef = reactDom.findDOMNode(_ref);
          } },
        other),

        children)));



    } }]);return Slide;}(react.Component);


Slide.propTypes = {
  /**
                     * A single child content element.
                     */
  children: propTypes.oneOfType([propTypes.element, propTypes.func]),
  /**
                                                                       * Direction the child node will enter from.
                                                                       */
  direction: propTypes.oneOf(['left', 'right', 'up', 'down']),
  /**
                                                                * If `true`, show the component; triggers the enter or exit animation.
                                                                */
  in: propTypes.bool,
  /**
                       * @ignore
                       */
  onEnter: propTypes.func,
  /**
                            * @ignore
                            */
  onEntering: propTypes.func,
  /**
                               * @ignore
                               */
  onExit: propTypes.func,
  /**
                           * @ignore
                           */
  onExited: propTypes.func,
  /**
                             * @ignore
                             */
  style: propTypes.object,
  /**
                            * @ignore
                            */
  theme: propTypes.object.isRequired,
  /**
                                       * The duration for the transition, in milliseconds.
                                       * You may specify a single timeout for all transitions, or individually with an object.
                                       */
  timeout: propTypes.oneOfType([
  propTypes.number,
  propTypes.shape({ enter: propTypes.number, exit: propTypes.number })]) };



Slide.defaultProps = {
  direction: 'down',
  timeout: {
    enter: duration.enteringScreen,
    exit: duration.leavingScreen } };



var Slide$1 = withTheme()(Slide);

var oppositeDirection = {
  left: 'right',
  right: 'left',
  top: 'down',
  bottom: 'up' };


function isHorizontal(props) {
  return ['left', 'right'].indexOf(props.anchor) !== -1;
}

function getAnchor(props) {
  return props.theme.direction === 'rtl' && isHorizontal(props) ?
  oppositeDirection[props.anchor] :
  props.anchor;
}

var styles$x = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: {},
    /* Styles applied to the root element if `variant="permanent or persistent"`. */
    docked: {
      flex: '0 0 auto' },

    /* Styles applied to the `Paper` component. */
    paper: {
      overflowY: 'auto',
      display: 'flex',
      flexDirection: 'column',
      height: '100%',
      flex: '1 0 auto',
      zIndex: theme.zIndex.drawer,
      WebkitOverflowScrolling: 'touch', // Add iOS momentum scrolling.
      // temporary style
      position: 'fixed',
      top: 0,
      // We disable the focus ring for mouse, touch and keyboard users.
      // At some point, it would be better to keep it for keyboard users.
      // :focus-ring CSS pseudo-class will help.
      outline: 'none' },

    /* Styles applied to the `Paper` component if `anchor="left"`. */
    paperAnchorLeft: {
      left: 0,
      right: 'auto' },

    /* Styles applied to the `Paper` component if `anchor="right"`. */
    paperAnchorRight: {
      left: 'auto',
      right: 0 },

    /* Styles applied to the `Paper` component if `anchor="top"`. */
    paperAnchorTop: {
      top: 0,
      left: 0,
      bottom: 'auto',
      right: 0,
      height: 'auto',
      maxHeight: '100%' },

    /* Styles applied to the `Paper` component if `anchor="bottom"`. */
    paperAnchorBottom: {
      top: 'auto',
      left: 0,
      bottom: 0,
      right: 0,
      height: 'auto',
      maxHeight: '100%' },

    /* Styles applied to the `Paper` component if `anchor="left"` & `variant` is not "temporary". */
    paperAnchorDockedLeft: {
      borderRight: "1px solid ".concat(theme.palette.divider) },

    /* Styles applied to the `Paper` component if `anchor="top"` & `variant` is not "temporary". */
    paperAnchorDockedTop: {
      borderBottom: "1px solid ".concat(theme.palette.divider) },

    /* Styles applied to the `Paper` component if `anchor="right"` & `variant` is not "temporary". */
    paperAnchorDockedRight: {
      borderLeft: "1px solid ".concat(theme.palette.divider) },

    /* Styles applied to the `Paper` component if `anchor="bottom"` & `variant` is not "temporary". */
    paperAnchorDockedBottom: {
      borderTop: "1px solid ".concat(theme.palette.divider) },

    /* Styles applied to the `Modal` component. */
    modal: {} };};


/**
                    * The properties of the [Modal](/api/modal/) component are available
                    * when `variant="temporary"` is set.
                    */var
Drawer = /*#__PURE__*/function (_React$Component) {inherits(Drawer, _React$Component);function Drawer() {var _getPrototypeOf2;var _this;classCallCheck(this, Drawer);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Drawer)).call.apply(_getPrototypeOf2, [this].concat(args)));defineProperty(assertThisInitialized(assertThisInitialized(_this)), "mounted",



    false);return _this;}createClass(Drawer, [{ key: "componentDidMount", value: function componentDidMount()

    {
      this.mounted = true;
    } }, { key: "render", value: function render()

    {var _this$props =
















      this.props,anchorProp = _this$props.anchor,BackdropProps = _this$props.BackdropProps,children = _this$props.children,classes = _this$props.classes,className = _this$props.className,elevation = _this$props.elevation,_this$props$ModalProp = _this$props.ModalProps;_this$props$ModalProp = _this$props$ModalProp === void 0 ? {} : _this$props$ModalProp;var BackdropPropsProp = _this$props$ModalProp.BackdropProps,ModalProps = objectWithoutProperties(_this$props$ModalProp, ["BackdropProps"]),onClose = _this$props.onClose,open = _this$props.open,PaperProps = _this$props.PaperProps,SlideProps = _this$props.SlideProps,theme = _this$props.theme,transitionDuration = _this$props.transitionDuration,variant = _this$props.variant,other = objectWithoutProperties(_this$props, ["anchor", "BackdropProps", "children", "classes", "className", "elevation", "ModalProps", "onClose", "open", "PaperProps", "SlideProps", "theme", "transitionDuration", "variant"]);

      var anchor = getAnchor(this.props);
      var drawer =
      react.createElement(Paper$1, _extends_1({
        elevation: variant === 'temporary' ? elevation : 0,
        square: true,
        className: classnames(classes.paper, classes["paperAnchor".concat(capitalize(anchor))], defineProperty({},
        classes["paperAnchorDocked".concat(capitalize(anchor))], variant !== 'temporary')) },

      PaperProps),

      children);



      if (variant === 'permanent') {
        return (
          react.createElement("div", _extends_1({ className: classnames(classes.root, classes.docked, className) }, other),
          drawer));


      }

      var slidingDrawer =
      react.createElement(Slide$1, _extends_1({
        in: open,
        direction: oppositeDirection[anchor],
        timeout: transitionDuration,
        appear: this.mounted },
      SlideProps),

      drawer);



      if (variant === 'persistent') {
        return (
          react.createElement("div", _extends_1({ className: classnames(classes.root, classes.docked, className) }, other),
          slidingDrawer));


      }

      // variant === temporary
      return (
        react.createElement(Modal$1, _extends_1({
          BackdropProps: objectSpread({},
          BackdropProps,
          BackdropPropsProp, {
            transitionDuration: transitionDuration }),

          className: classnames(classes.root, classes.modal, className),
          open: open,
          onClose: onClose },
        other,
        ModalProps),

        slidingDrawer));


    } }]);return Drawer;}(react.Component);


Drawer.propTypes = {
  /**
                      * Side from which the drawer will appear.
                      */
  anchor: propTypes.oneOf(['left', 'top', 'right', 'bottom']),
  /**
                                                                * The contents of the drawer.
                                                                */
  children: propTypes.node,
  /**
                             * Override or extend the styles applied to the component.
                             * See [CSS API](#css-api) below for more details.
                             */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * The elevation of the drawer.
                                */
  elevation: propTypes.number,
  /**
                                * Properties applied to the [`Modal`](/api/modal/) element.
                                */
  ModalProps: propTypes.object,
  /**
                                 * Callback fired when the component requests to be closed.
                                 *
                                 * @param {object} event The event source of the callback
                                 */
  onClose: propTypes.func,
  /**
                            * If `true`, the drawer is open.
                            */
  open: propTypes.bool,
  /**
                         * Properties applied to the [`Paper`](/api/paper/) element.
                         */
  PaperProps: propTypes.object,
  /**
                                 * Properties applied to the [`Slide`](/api/slide/) element.
                                 */
  SlideProps: propTypes.object,
  /**
                                 * @ignore
                                 */
  theme: propTypes.object.isRequired,
  /**
                                       * The duration for the transition, in milliseconds.
                                       * You may specify a single timeout for all transitions, or individually with an object.
                                       */
  transitionDuration: propTypes.oneOfType([
  propTypes.number,
  propTypes.shape({ enter: propTypes.number, exit: propTypes.number })]),

  /**
                                                                           * The variant to use.
                                                                           */
  variant: propTypes.oneOf(['permanent', 'persistent', 'temporary']) };


Drawer.defaultProps = {
  anchor: 'left',
  elevation: 16,
  open: false,
  transitionDuration: { enter: duration.enteringScreen, exit: duration.leavingScreen },
  variant: 'temporary' // Mobile first.
};

var Drawer$1 = withStyles(styles$x, { name: 'MuiDrawer', flip: false, withTheme: true })(Drawer);

// Workaround https://github.com/jsdom/jsdom/issues/2026
var edgeFix =
typeof window !== 'undefined' && /jsdom/.test(window.navigator.userAgent) ?
{} :
{
  // Fix a rendering issue on Edge
  '@supports (-ms-ime-align: auto)': {
    borderBottomLeftRadius: 0,
    borderBottomRightRadius: 0 } };



var styles$y = function styles(theme) {
  var transition = {
    duration: theme.transitions.duration.shortest };


  return {
    /* Styles applied to the root element. */
    root: {
      position: 'relative',
      transition: theme.transitions.create(['margin'], transition),
      '&:before': {
        position: 'absolute',
        left: 0,
        top: -1,
        right: 0,
        height: 1,
        content: '""',
        opacity: 1,
        backgroundColor: theme.palette.divider,
        transition: theme.transitions.create(['opacity', 'background-color'], transition) },

      '&:first-child': {
        borderTopLeftRadius: 2,
        borderTopRightRadius: 2,
        '&:before': {
          display: 'none' } },


      '&:last-child': objectSpread({
        borderBottomLeftRadius: 2,
        borderBottomRightRadius: 2 },
      edgeFix),

      '&$expanded + &': {
        '&:before': {
          display: 'none' } } },



    /* Styles applied to the root element if `expanded={true}`. */
    expanded: {
      margin: '16px 0',
      '&:first-child': {
        marginTop: 0 },

      '&:last-child': {
        marginBottom: 0 },

      '&:before': {
        opacity: 0 } },


    /* Styles applied to the root element if `disabled={true}`. */
    disabled: {
      backgroundColor: theme.palette.action.disabledBackground } };


};var

ExpansionPanel = /*#__PURE__*/function (_React$Component) {inherits(ExpansionPanel, _React$Component);
  function ExpansionPanel(props) {var _this;classCallCheck(this, ExpansionPanel);
    _this = possibleConstructorReturn(this, getPrototypeOf(ExpansionPanel).call(this));defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleChange",








    function (event) {
      var expanded = _this.isControlled ? _this.props.expanded : _this.state.expanded;

      if (!_this.isControlled) {
        _this.setState({ expanded: !expanded });
      }

      if (_this.props.onChange) {
        _this.props.onChange(event, !expanded);
      }
    });_this.isControlled = props.expanded != null;_this.state = {};if (!_this.isControlled) {// not controlled, use internal state
      _this.state.expanded = props.defaultExpanded !== undefined ? props.defaultExpanded : false;}return _this;}createClass(ExpansionPanel, [{ key: "render", value: function render()
    {var _classNames,_this2 = this;var _this$props =










      this.props,childrenProp = _this$props.children,classes = _this$props.classes,classNameProp = _this$props.className,CollapsePropsProp = _this$props.CollapseProps,defaultExpanded = _this$props.defaultExpanded,disabled = _this$props.disabled,expandedProp = _this$props.expanded,onChange = _this$props.onChange,other = objectWithoutProperties(_this$props, ["children", "classes", "className", "CollapseProps", "defaultExpanded", "disabled", "expanded", "onChange"]);
      var expanded = this.isControlled ? expandedProp : this.state.expanded;

      var className = classnames(
      classes.root, (_classNames = {}, defineProperty(_classNames,

      classes.expanded, expanded), defineProperty(_classNames,
      classes.disabled, disabled), _classNames),

      classNameProp);


      var summary = null;

      var children = react.Children.map(childrenProp, function (child) {
        if (!react.isValidElement(child)) {
          return null;
        }

        warning_1(
        child.type !== react.Fragment,
        [
        "Material-UI: the ExpansionPanel component doesn't accept a Fragment as a child.",
        'Consider providing an array instead.'].
        join('\n'));


        if (isMuiElement(child, ['ExpansionPanelSummary'])) {
          summary = react.cloneElement(child, {
            disabled: disabled,
            expanded: expanded,
            onChange: _this2.handleChange });

          return null;
        }

        return child;
      });

      var CollapseProps = !expanded ?
      {
        'aria-hidden': 'true' } :

      null;

      return (
        react.createElement(Paper$1, _extends_1({ className: className, elevation: 1, square: true }, other),
        summary,
        react.createElement(Collapse$1, _extends_1({ in: expanded, timeout: "auto" }, CollapseProps, CollapsePropsProp),
        children)));



    } }]);return ExpansionPanel;}(react.Component);


ExpansionPanel.propTypes = {
  /**
                              * The content of the expansion panel.
                              */
  children: propTypes.node.isRequired,
  /**
                                        * Override or extend the styles applied to the component.
                                        * See [CSS API](#css-api) below for more details.
                                        */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * Properties applied to the [`Collapse`](/api/collapse/) element.
                                */
  CollapseProps: propTypes.object,
  /**
                                    * If `true`, expands the panel by default.
                                    */
  defaultExpanded: propTypes.bool,
  /**
                                    * If `true`, the panel will be displayed in a disabled state.
                                    */
  disabled: propTypes.bool,
  /**
                             * If `true`, expands the panel, otherwise collapse it.
                             * Setting this prop enables control over the panel.
                             */
  expanded: propTypes.bool,
  /**
                             * Callback fired when the expand/collapse state is changed.
                             *
                             * @param {object} event The event source of the callback
                             * @param {boolean} expanded The `expanded` state of the panel
                             */
  onChange: propTypes.func };


ExpansionPanel.defaultProps = {
  defaultExpanded: false,
  disabled: false };


withStyles(styles$y, { name: 'MuiExpansionPanel' })(ExpansionPanel);

var styles$z = {
  /* Styles applied to the root element. */
  root: {
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'flex-end',
    padding: '16px 8px' },

  /* Styles applied to the children. */
  action: {
    marginLeft: 8 } };



function ExpansionPanelActions(props) {var
  children = props.children,classes = props.classes,className = props.className,other = objectWithoutProperties(props, ["children", "classes", "className"]);

  return (
    react.createElement("div", _extends_1({ className: classnames(classes.root, className) }, other),
    cloneChildrenWithClassName(children, classes.action)));


}

ExpansionPanelActions.propTypes = {
  /**
                                     * The content of the component.
                                     */
  children: propTypes.node.isRequired,
  /**
                                        * Override or extend the styles applied to the component.
                                        * See [CSS API](#css-api) below for more details.
                                        */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string };


withStyles(styles$z, { name: 'MuiExpansionPanelActions' })(ExpansionPanelActions);

var styles$A = {
  /* Styles applied to the root element. */
  root: {
    display: 'flex',
    padding: '8px 24px 24px' } };



function ExpansionPanelDetails(props) {var
  classes = props.classes,children = props.children,className = props.className,other = objectWithoutProperties(props, ["classes", "children", "className"]);

  return (
    react.createElement("div", _extends_1({ className: classnames(classes.root, className) }, other),
    children));


}

ExpansionPanelDetails.propTypes = {
  /**
                                     * The content of the expansion panel details.
                                     */
  children: propTypes.node.isRequired,
  /**
                                        * Override or extend the styles applied to the component.
                                        * See [CSS API](#css-api) below for more details.
                                        */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string };


withStyles(styles$A, { name: 'MuiExpansionPanelDetails' })(ExpansionPanelDetails);

var styles$B = function styles(theme) {
  var transition = {
    duration: theme.transitions.duration.shortest };

  return {
    /* Styles applied to the root element. */
    root: {
      display: 'flex',
      minHeight: 8 * 6,
      transition: theme.transitions.create(['min-height', 'background-color'], transition),
      padding: '0 24px 0 24px',
      '&:hover:not($disabled)': {
        cursor: 'pointer' },

      '&$expanded': {
        minHeight: 64 },

      '&$focused': {
        backgroundColor: theme.palette.grey[300] },

      '&$disabled': {
        opacity: 0.38 } },


    /* Styles applied to the root element if `expanded={true}`. */
    expanded: {},
    /* Styles applied to the root and children wrapper elements when focused. */
    focused: {},
    /* Styles applied to the root element if `disabled={true}`. */
    disabled: {},
    /* Styles applied to the children wrapper element. */
    content: {
      display: 'flex',
      flexGrow: 1,
      transition: theme.transitions.create(['margin'], transition),
      margin: '12px 0',
      '& > :last-child': {
        paddingRight: 32 },

      '&$expanded': {
        margin: '20px 0' } },


    /* Styles applied to the `IconButton` component when `expandIcon` is supplied. */
    expandIcon: {
      position: 'absolute',
      top: '50%',
      right: 8,
      transform: 'translateY(-50%) rotate(0deg)',
      transition: theme.transitions.create('transform', transition),
      '&:hover': {
        // Disable the hover effect for the IconButton,
        // because a hover effect should apply to the entire Expand button and
        // not only to the IconButton.
        backgroundColor: 'transparent' },

      '&$expanded': {
        transform: 'translateY(-50%) rotate(180deg)' } } };



};var

ExpansionPanelSummary = /*#__PURE__*/function (_React$Component) {inherits(ExpansionPanelSummary, _React$Component);function ExpansionPanelSummary() {var _getPrototypeOf2;var _this;classCallCheck(this, ExpansionPanelSummary);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(ExpansionPanelSummary)).call.apply(_getPrototypeOf2, [this].concat(args)));defineProperty(assertThisInitialized(assertThisInitialized(_this)), "state",
    {
      focused: false });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleFocusVisible",


    function (event) {
      _this.setState({
        focused: true });


      if (_this.props.onFocusVisible) {
        _this.props.onFocusVisible(event);
      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleBlur",

    function (event) {
      _this.setState({
        focused: false });


      if (_this.props.onBlur) {
        _this.props.onBlur(event);
      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleChange",

    function (event) {var _this$props =
      _this.props,onChange = _this$props.onChange,onClick = _this$props.onClick;
      if (onChange) {
        onChange(event);
      }
      if (onClick) {
        onClick(event);
      }
    });return _this;}createClass(ExpansionPanelSummary, [{ key: "render", value: function render()

    {var _classNames;var _this$props2 =













      this.props,children = _this$props2.children,classes = _this$props2.classes,className = _this$props2.className,disabled = _this$props2.disabled,expanded = _this$props2.expanded,expandIcon = _this$props2.expandIcon,IconButtonProps = _this$props2.IconButtonProps,onBlur = _this$props2.onBlur,onChange = _this$props2.onChange,onClick = _this$props2.onClick,onFocusVisible = _this$props2.onFocusVisible,other = objectWithoutProperties(_this$props2, ["children", "classes", "className", "disabled", "expanded", "expandIcon", "IconButtonProps", "onBlur", "onChange", "onClick", "onFocusVisible"]);var
      focused = this.state.focused;

      return (
        react.createElement(ButtonBase$1, _extends_1({
          focusRipple: false,
          disableRipple: true,
          disabled: disabled,
          component: "div",
          "aria-expanded": expanded,
          className: classnames(
          classes.root, (_classNames = {}, defineProperty(_classNames,

          classes.disabled, disabled), defineProperty(_classNames,
          classes.expanded, expanded), defineProperty(_classNames,
          classes.focused, focused), _classNames),

          className),

          onFocusVisible: this.handleFocusVisible,
          onBlur: this.handleBlur,
          onClick: this.handleChange },
        other),

        react.createElement("div", { className: classnames(classes.content, defineProperty({}, classes.expanded, expanded)) },
        children),

        expandIcon &&
        react.createElement(IconButton$1, _extends_1({
          disabled: disabled,
          className: classnames(classes.expandIcon, defineProperty({},
          classes.expanded, expanded)),

          component: "div",
          tabIndex: -1,
          "aria-hidden": "true" },
        IconButtonProps),

        expandIcon)));




    } }]);return ExpansionPanelSummary;}(react.Component);


ExpansionPanelSummary.propTypes = {
  /**
                                     * The content of the expansion panel summary.
                                     */
  children: propTypes.node,
  /**
                             * Override or extend the styles applied to the component.
                             * See [CSS API](#css-api) below for more details.
                             */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * @ignore
                                * If `true`, the summary will be displayed in a disabled state.
                                */
  disabled: propTypes.bool,
  /**
                             * @ignore
                             * If `true`, expands the summary, otherwise collapse it.
                             */
  expanded: propTypes.bool,
  /**
                             * The icon to display as the expand indicator.
                             */
  expandIcon: propTypes.node,
  /**
                               * Properties applied to the `TouchRipple` element wrapping the expand icon.
                               */
  IconButtonProps: propTypes.object,
  /**
                                      * @ignore
                                      */
  onChange: propTypes.func,
  /**
                             * @ignore
                             */
  onClick: propTypes.func };


ExpansionPanelSummary.defaultProps = {
  disabled: false };


ExpansionPanelSummary.muiName = 'ExpansionPanelSummary';

withStyles(styles$B, { name: 'MuiExpansionPanelSummary' })(ExpansionPanelSummary);

var styles$C = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: objectSpread({},
    theme.typography.button, {
      boxSizing: 'border-box',
      minHeight: 36,
      transition: theme.transitions.create(['background-color', 'box-shadow', 'border'], {
        duration: theme.transitions.duration.short }),

      borderRadius: '50%',
      padding: 0,
      minWidth: 0,
      width: 56,
      height: 56,
      boxShadow: theme.shadows[6],
      '&:active': {
        boxShadow: theme.shadows[12] },

      color: theme.palette.getContrastText(theme.palette.grey[300]),
      backgroundColor: theme.palette.grey[300],
      '&$focusVisible': {
        boxShadow: theme.shadows[6] },

      '&:hover': {
        backgroundColor: theme.palette.grey.A100,
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: theme.palette.grey[300] },

        '&$disabled': {
          backgroundColor: theme.palette.action.disabledBackground },

        textDecoration: 'none' },

      '&$disabled': {
        color: theme.palette.action.disabled,
        boxShadow: theme.shadows[0],
        backgroundColor: theme.palette.action.disabledBackground } }),


    /* Styles applied to the span element that wraps the children. */
    label: {
      width: '100%', // assure the correct width for iOS Safari
      display: 'inherit',
      alignItems: 'inherit',
      justifyContent: 'inherit' },

    /* Styles applied to the root element if `color="primary"`. */
    primary: {
      color: theme.palette.primary.contrastText,
      backgroundColor: theme.palette.primary.main,
      '&:hover': {
        backgroundColor: theme.palette.primary.dark,
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: theme.palette.primary.main } } },



    /* Styles applied to the root element if `color="secondary"`. */
    secondary: {
      color: theme.palette.secondary.contrastText,
      backgroundColor: theme.palette.secondary.main,
      '&:hover': {
        backgroundColor: theme.palette.secondary.dark,
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: theme.palette.secondary.main } } },



    /* Styles applied to the root element if `variant="extended"`. */
    extended: {
      borderRadius: 48 / 2,
      padding: '0 16px',
      width: 'auto',
      minWidth: 48,
      height: 48 },

    /* Styles applied to the ButtonBase root element if the button is keyboard focused. */
    focusVisible: {},
    /* Styles applied to the root element if `disabled={true}`. */
    disabled: {},
    /* Styles applied to the root element if `color="inherit"`. */
    colorInherit: {
      color: 'inherit' },

    /* Styles applied to the root element if `size="small"``. */
    sizeSmall: {
      width: 40,
      height: 40 },

    /* Styles applied to the root element if `size="medium"``. */
    sizeMedium: {
      width: 48,
      height: 48 } };};



function Fab(props) {var _classNames;var

  children =









  props.children,classes = props.classes,className = props.className,color = props.color,disabled = props.disabled,disableFocusRipple = props.disableFocusRipple,focusVisibleClassName = props.focusVisibleClassName,size = props.size,variant = props.variant,other = objectWithoutProperties(props, ["children", "classes", "className", "color", "disabled", "disableFocusRipple", "focusVisibleClassName", "size", "variant"]);

  return (
    react.createElement(ButtonBase$1, _extends_1({
      className: classnames(
      classes.root, (_classNames = {}, defineProperty(_classNames,

      classes.extended, variant === 'extended'), defineProperty(_classNames,
      classes.primary, color === 'primary'), defineProperty(_classNames,
      classes.secondary, color === 'secondary'), defineProperty(_classNames,
      classes["size".concat(capitalize(size))], size !== 'large'), defineProperty(_classNames,
      classes.disabled, disabled), defineProperty(_classNames,
      classes.colorInherit, color === 'inherit'), _classNames),

      className),

      disabled: disabled,
      focusRipple: !disableFocusRipple,
      focusVisibleClassName: classnames(classes.focusVisible, focusVisibleClassName) },
    other),

    react.createElement("span", { className: classes.label }, children)));


}

Fab.propTypes = {
  /**
                   * The content of the button.
                   */
  children: propTypes.node.isRequired,
  /**
                                        * Override or extend the styles applied to the component.
                                        * See [CSS API](#css-api) below for more details.
                                        */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * The color of the component. It supports those theme colors that make sense for this component.
                                */
  color: propTypes.oneOf(['default', 'inherit', 'primary', 'secondary']),
  /**
                                                                           * The component used for the root node.
                                                                           * Either a string to use a DOM element or a component.
                                                                           */
  component: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                         * If `true`, the button will be disabled.
                                                                                         */
  disabled: propTypes.bool,
  /**
                             * If `true`, the  keyboard focus ripple will be disabled.
                             * `disableRipple` must also be true.
                             */
  disableFocusRipple: propTypes.bool,
  /**
                                       * If `true`, the ripple effect will be disabled.
                                       */
  disableRipple: propTypes.bool,
  /**
                                  * @ignore
                                  */
  focusVisibleClassName: propTypes.string,
  /**
                                            * The URL to link to when the button is clicked.
                                            * If defined, an `a` element will be used as the root node.
                                            */
  href: propTypes.string,
  /**
                           * The size of the button.
                           * `small` is equivalent to the dense button styling.
                           */
  size: propTypes.oneOf(['small', 'medium', 'large']),
  /**
                                                        * @ignore
                                                        */
  type: propTypes.string,
  /**
                           * The variant to use.
                           */
  variant: propTypes.oneOf(['round', 'extended']) };


Fab.defaultProps = {
  color: 'default',
  component: 'button',
  disabled: false,
  disableFocusRipple: false,
  size: 'large',
  type: 'button',
  variant: 'round' };


withStyles(styles$C, { name: 'MuiFab' })(Fab);

function formControlState(_ref) {var props = _ref.props,states = _ref.states,muiFormControl = _ref.muiFormControl;
  return states.reduce(function (acc, state) {
    acc[state] = props[state];

    if (muiFormControl) {
      if (typeof props[state] === 'undefined') {
        acc[state] = muiFormControl[state];
      }
    }

    return acc;
  }, {});
}

var ROWS_HEIGHT = 19;

var styles$D = {
  /* Styles applied to the root element. */
  root: {
    position: 'relative', // because the shadow has position: 'absolute',
    width: '100%' },

  textarea: {
    width: '100%',
    height: '100%',
    resize: 'none',
    font: 'inherit',
    padding: 0,
    cursor: 'inherit',
    boxSizing: 'border-box',
    lineHeight: 'inherit',
    border: 'none',
    outline: 'none',
    background: 'transparent' },

  shadow: {
    // Overflow also needed to here to remove the extra row
    // added to textareas in Firefox.
    overflow: 'hidden',
    // Visibility needed to hide the extra text area on ipads
    visibility: 'hidden',
    position: 'absolute',
    height: 'auto',
    whiteSpace: 'pre-wrap' } };



/**
                                 * @ignore - internal component.
                                 */var
Textarea = /*#__PURE__*/function (_React$Component) {inherits(Textarea, _React$Component);
  function Textarea(props) {var _this;classCallCheck(this, Textarea);
    _this = possibleConstructorReturn(this, getPrototypeOf(Textarea).call(this));defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleRefInput",



























    function (ref) {
      _this.inputRef = ref;

      setRef(_this.props.textareaRef, ref);
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleRefSinglelineShadow",

    function (ref) {
      _this.singlelineShadowRef = ref;
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleRefShadow",

    function (ref) {
      _this.shadowRef = ref;
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleChange",

    function (event) {
      _this.value = event.target.value;

      if (!_this.isControlled) {
        // The component is not controlled, we need to update the shallow value.
        _this.shadowRef.value = _this.value;
        _this.syncHeightWithShadow();
      }

      if (_this.props.onChange) {
        _this.props.onChange(event);
      }
    });_this.isControlled = props.value != null; // <Input> expects the components it renders to respond to 'value'
    // so that it can check whether they are filled.
    _this.value = props.value || props.defaultValue || '';_this.state = { height: Number(props.rows) * ROWS_HEIGHT };if (typeof window !== 'undefined') {_this.handleResize = debounce_1(function () {_this.syncHeightWithShadow();}, 166); // Corresponds to 10 frames at 60 Hz.
    }return _this;}createClass(Textarea, [{ key: "componentDidMount", value: function componentDidMount() {this.syncHeightWithShadow();} }, { key: "componentDidUpdate", value: function componentDidUpdate() {this.syncHeightWithShadow();} }, { key: "componentWillUnmount", value: function componentWillUnmount() {this.handleResize.clear();} }, { key: "syncHeightWithShadow", value: function syncHeightWithShadow() {var props = this.props;

      // Guarding for **broken** shallow rendering method that call componentDidMount
      // but doesn't handle refs correctly.
      // To remove once the shallow rendering has been fixed.
      if (!this.shadowRef) {
        return;
      }

      if (this.isControlled) {
        // The component is controlled, we need to update the shallow value.
        this.shadowRef.value = props.value == null ? '' : String(props.value);
      }

      var lineHeight = this.singlelineShadowRef.scrollHeight;
      var newHeight = this.shadowRef.scrollHeight;

      // Guarding for jsdom, where scrollHeight isn't present.
      // See https://github.com/tmpvar/jsdom/issues/1013
      if (newHeight === undefined) {
        return;
      }

      if (Number(props.rowsMax) >= Number(props.rows)) {
        newHeight = Math.min(Number(props.rowsMax) * lineHeight, newHeight);
      }

      newHeight = Math.max(newHeight, lineHeight);

      // Need a large enough different to update the height.
      // This prevents infinite rendering loop.
      if (Math.abs(this.state.height - newHeight) > 1) {
        this.setState({
          height: newHeight });

      }
    } }, { key: "render", value: function render()

    {var _this$props =











      this.props,classes = _this$props.classes,className = _this$props.className,defaultValue = _this$props.defaultValue,onChange = _this$props.onChange,rows = _this$props.rows,rowsMax = _this$props.rowsMax,textareaRef = _this$props.textareaRef,value = _this$props.value,style = _this$props.style,other = objectWithoutProperties(_this$props, ["classes", "className", "defaultValue", "onChange", "rows", "rowsMax", "textareaRef", "value", "style"]);

      return (
        react.createElement("div", { className: classes.root },
        react.createElement(EventListener, { target: "window", onResize: this.handleResize }),
        react.createElement("textarea", {
          "aria-hidden": "true",
          className: classnames(classes.textarea, classes.shadow),
          readOnly: true,
          ref: this.handleRefSinglelineShadow,
          rows: "1",
          tabIndex: -1,
          value: "" }),

        react.createElement("textarea", {
          "aria-hidden": "true",
          className: classnames(classes.textarea, classes.shadow),
          defaultValue: defaultValue,
          readOnly: true,
          ref: this.handleRefShadow,
          rows: rows,
          tabIndex: -1,
          value: value }),

        react.createElement("textarea", _extends_1({
          rows: rows,
          className: classnames(classes.textarea, className),
          defaultValue: defaultValue,
          value: value,
          onChange: this.handleChange,
          ref: this.handleRefInput,
          style: objectSpread({ height: this.state.height }, style) },
        other))));



    } }]);return Textarea;}(react.Component);


Textarea.propTypes = {
  /**
                        * Override or extend the styles applied to the component.
                        * See [CSS API](#css-api) below for more details.
                        */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * @ignore
                                */
  defaultValue: propTypes.oneOfType([propTypes.string, propTypes.number]),
  /**
                                                                            * @ignore
                                                                            */
  disabled: propTypes.bool,
  /**
                             * @ignore
                             */
  onChange: propTypes.func,
  /**
                             * Number of rows to display when multiline option is set to true.
                             */
  rows: propTypes.oneOfType([propTypes.string, propTypes.number]),
  /**
                                                                    * Maximum number of rows to display when multiline option is set to true.
                                                                    */
  rowsMax: propTypes.oneOfType([propTypes.string, propTypes.number]),
  /**
                                                                       * Use that property to pass a ref callback to the native textarea element.
                                                                       */
  textareaRef: propTypes.oneOfType([propTypes.func, propTypes.object]),
  /**
                                                                         * @ignore
                                                                         */
  value: propTypes.oneOfType([propTypes.string, propTypes.number]) };


Textarea.defaultProps = {
  rows: 1 };


var Textarea$1 = withStyles(styles$D, { name: 'MuiPrivateTextarea' })(Textarea);

// Supports determination of isControlled().
// Controlled input accepts its current value as a prop.
//
// @see https://facebook.github.io/react/docs/forms.html#controlled-components
// @param value
// @returns {boolean} true if string (including '') or number (including zero)
function hasValue(value) {
  return value != null && !(Array.isArray(value) && value.length === 0);
}

// Determine if field is empty or filled.
// Response determines if label is presented above field or as placeholder.
//
// @param obj
// @param SSR
// @returns {boolean} False when not present or empty string.
//                    True when any number or string with length.
function isFilled(obj) {var SSR = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  return (
    obj && (
    hasValue(obj.value) && obj.value !== '' ||
    SSR && hasValue(obj.defaultValue) && obj.defaultValue !== ''));

}

// Determine if an Input is adorned on start.
// It's corresponding to the left with LTR.
//
// @param obj
// @returns {boolean} False when no adornments.
//                    True when adorned at the start.
function isAdornedStart(obj) {
  return obj.startAdornment;
}

var styles$E = function styles(theme) {
  var light = theme.palette.type === 'light';
  var placeholder = {
    color: 'currentColor',
    opacity: light ? 0.42 : 0.5,
    transition: theme.transitions.create('opacity', {
      duration: theme.transitions.duration.shorter }) };


  var placeholderHidden = {
    opacity: 0 };

  var placeholderVisible = {
    opacity: light ? 0.42 : 0.5 };


  return {
    /* Styles applied to the root element. */
    root: {
      // Mimics the default input display property used by browsers for an input.
      fontFamily: theme.typography.fontFamily,
      color: theme.palette.text.primary,
      fontSize: theme.typography.pxToRem(16),
      lineHeight: '1.1875em', // Reset (19px), match the native input line-height
      cursor: 'text',
      display: 'inline-flex',
      alignItems: 'center',
      '&$disabled': {
        color: theme.palette.text.disabled,
        cursor: 'default' } },


    /* Styles applied to the root element if the component is a descendant of `FormControl`. */
    formControl: {},
    /* Styles applied to the root element if the component is focused. */
    focused: {},
    /* Styles applied to the root element if `disabled={true}`. */
    disabled: {},
    /* Styles applied to the root element if `startAdornment` is provided. */
    adornedStart: {},
    /* Styles applied to the root element if `endAdornment` is provided. */
    adornedEnd: {},
    /* Styles applied to the root element if `error={true}`. */
    error: {},
    /* Styles applied to the `input` element if `margin="dense"`. */
    marginDense: {},
    /* Styles applied to the root element if `multiline={true}`. */
    multiline: {
      padding: "".concat(8 - 2, "px 0 ").concat(8 - 1, "px") },

    /* Styles applied to the root element if `fullWidth={true}`. */
    fullWidth: {
      width: '100%' },

    /* Styles applied to the `input` element. */
    input: {
      font: 'inherit',
      color: 'currentColor',
      padding: "".concat(8 - 2, "px 0 ").concat(8 - 1, "px"),
      border: 0,
      boxSizing: 'content-box',
      background: 'none',
      margin: 0, // Reset for Safari
      // Remove grey highlight
      WebkitTapHighlightColor: 'transparent',
      display: 'block',
      // Make the flex item shrink with Firefox
      minWidth: 0,
      width: '100%', // Fix IE 11 width issue
      '&::-webkit-input-placeholder': placeholder,
      '&::-moz-placeholder': placeholder, // Firefox 19+
      '&:-ms-input-placeholder': placeholder, // IE 11
      '&::-ms-input-placeholder': placeholder, // Edge
      '&:focus': {
        outline: 0 },

      // Reset Firefox invalid required input style
      '&:invalid': {
        boxShadow: 'none' },

      '&::-webkit-search-decoration': {
        // Remove the padding when type=search.
        '-webkit-appearance': 'none' },

      // Show and hide the placeholder logic
      'label[data-shrink=false] + $formControl &': {
        '&::-webkit-input-placeholder': placeholderHidden,
        '&::-moz-placeholder': placeholderHidden, // Firefox 19+
        '&:-ms-input-placeholder': placeholderHidden, // IE 11
        '&::-ms-input-placeholder': placeholderHidden, // Edge
        '&:focus::-webkit-input-placeholder': placeholderVisible,
        '&:focus::-moz-placeholder': placeholderVisible, // Firefox 19+
        '&:focus:-ms-input-placeholder': placeholderVisible, // IE 11
        '&:focus::-ms-input-placeholder': placeholderVisible // Edge
      },
      '&$disabled': {
        opacity: 1 // Reset iOS opacity
      } },

    /* Styles applied to the `input` element if `margin="dense"`. */
    inputMarginDense: {
      paddingTop: 4 - 1 },

    /* Styles applied to the `input` element if `multiline={true}`. */
    inputMultiline: {
      resize: 'none',
      padding: 0 },

    /* Styles applied to the `input` element if `type` is not "text"`. */
    inputType: {
      // type="date" or type="time", etc. have specific styles we need to reset.
      height: '1.1875em' // Reset (19px), match the native input line-height
    },
    /* Styles applied to the `input` element if `type="search"`. */
    inputTypeSearch: {
      // Improve type search style.
      '-moz-appearance': 'textfield',
      '-webkit-appearance': 'textfield' },

    /* Styles applied to the `input` element if `startAdornment` is provided. */
    inputAdornedStart: {},
    /* Styles applied to the `input` element if `endAdornment` is provided. */
    inputAdornedEnd: {} };

};

/**
    * `InputBase` contains as few styles as possible.
    * It aims to be a simple building block for creating an input.
    * It contains a load of style reset and some state logic.
    */var
InputBase = /*#__PURE__*/function (_React$Component) {inherits(InputBase, _React$Component);createClass(InputBase, null, [{ key: "getDerivedStateFromProps", value: function getDerivedStateFromProps(
    props, state) {
      // The blur won't fire when the disabled state is set on a focused input.
      // We need to book keep the focused state manually.
      if (props.disabled && state.focused) {
        return { focused: false };
      }
      return null;
    } }]);

  function InputBase(props, context) {var _this;classCallCheck(this, InputBase);
    _this = possibleConstructorReturn(this, getPrototypeOf(InputBase).call(this, props, context));defineProperty(assertThisInitialized(assertThisInitialized(_this)), "state",






    {
      focused: false });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleFocus",





















    function (event) {var
      muiFormControl = _this.props.muiFormControl;
      // Fix a bug with IE 11 where the focus/blur events are triggered
      // while the input is disabled.
      if (formControlState({ props: _this.props, muiFormControl: muiFormControl, states: ['disabled'] }).disabled) {
        event.stopPropagation();
        return;
      }

      _this.setState({ focused: true });
      if (_this.props.onFocus) {
        _this.props.onFocus(event);
      }

      if (muiFormControl && muiFormControl.onFocus) {
        muiFormControl.onFocus(event);
      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleBlur",

    function (event) {
      _this.setState({ focused: false });
      if (_this.props.onBlur) {
        _this.props.onBlur(event);
      }var

      muiFormControl = _this.props.muiFormControl;
      if (muiFormControl && muiFormControl.onBlur) {
        muiFormControl.onBlur(event);
      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleChange",

    function () {
      if (!_this.isControlled) {
        _this.checkDirty(_this.inputRef);
      }

      // Perform in the willUpdate
      if (_this.props.onChange) {var _this$props;
        (_this$props = _this.props).onChange.apply(_this$props, arguments);
      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleRefInput",

    function (ref) {
      _this.inputRef = ref;

      var refProp;

      if (_this.props.inputRef) {
        refProp = _this.props.inputRef;
      } else if (_this.props.inputProps && _this.props.inputProps.ref) {
        refProp = _this.props.inputProps.ref;
      }

      setRef(refProp, ref);
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleClick",

    function (event) {
      if (_this.inputRef && event.currentTarget === event.target) {
        _this.inputRef.focus();
      }

      if (_this.props.onClick) {
        _this.props.onClick(event);
      }
    });_this.isControlled = props.value != null;if (_this.isControlled) {_this.checkDirty(props);}return _this;}createClass(InputBase, [{ key: "componentDidMount", value: function componentDidMount() {if (!this.isControlled) {this.checkDirty(this.inputRef);}} }, { key: "componentDidUpdate", value: function componentDidUpdate(prevProps) {// Book keep the focused state.
      if (!prevProps.disabled && this.props.disabled) {var muiFormControl = this.props.muiFormControl;if (muiFormControl && muiFormControl.onBlur) {muiFormControl.onBlur();}}if (this.isControlled) {this.checkDirty(this.props);} // else performed in the onChange
    } }, { key: "checkDirty", value: function checkDirty(obj) {var
      muiFormControl = this.props.muiFormControl;

      if (isFilled(obj)) {
        if (muiFormControl && muiFormControl.onFilled) {
          muiFormControl.onFilled();
        }
        if (this.props.onFilled) {
          this.props.onFilled();
        }
        return;
      }

      if (muiFormControl && muiFormControl.onEmpty) {
        muiFormControl.onEmpty();
      }
      if (this.props.onEmpty) {
        this.props.onEmpty();
      }
    } }, { key: "render", value: function render()

    {var _classNames, _classNames2;var _this$props2 =



































      this.props,autoComplete = _this$props2.autoComplete,autoFocus = _this$props2.autoFocus,classes = _this$props2.classes,classNameProp = _this$props2.className,defaultValue = _this$props2.defaultValue,disabled = _this$props2.disabled,endAdornment = _this$props2.endAdornment,error = _this$props2.error,fullWidth = _this$props2.fullWidth,id = _this$props2.id,inputComponent = _this$props2.inputComponent,_this$props2$inputPro = _this$props2.inputProps;_this$props2$inputPro = _this$props2$inputPro === void 0 ? {} : _this$props2$inputPro;var inputPropsClassName = _this$props2$inputPro.className,inputPropsProp = objectWithoutProperties(_this$props2$inputPro, ["className"]),inputRef = _this$props2.inputRef,margin = _this$props2.margin,muiFormControl = _this$props2.muiFormControl,multiline = _this$props2.multiline,name = _this$props2.name,onBlur = _this$props2.onBlur,onChange = _this$props2.onChange,onClick = _this$props2.onClick,onEmpty = _this$props2.onEmpty,onFilled = _this$props2.onFilled,onFocus = _this$props2.onFocus,onKeyDown = _this$props2.onKeyDown,onKeyUp = _this$props2.onKeyUp,placeholder = _this$props2.placeholder,readOnly = _this$props2.readOnly,renderPrefix = _this$props2.renderPrefix,rows = _this$props2.rows,rowsMax = _this$props2.rowsMax,startAdornment = _this$props2.startAdornment,type = _this$props2.type,value = _this$props2.value,other = objectWithoutProperties(_this$props2, ["autoComplete", "autoFocus", "classes", "className", "defaultValue", "disabled", "endAdornment", "error", "fullWidth", "id", "inputComponent", "inputProps", "inputRef", "margin", "muiFormControl", "multiline", "name", "onBlur", "onChange", "onClick", "onEmpty", "onFilled", "onFocus", "onKeyDown", "onKeyUp", "placeholder", "readOnly", "renderPrefix", "rows", "rowsMax", "startAdornment", "type", "value"]);

      var fcs = formControlState({
        props: this.props,
        muiFormControl: muiFormControl,
        states: ['disabled', 'error', 'margin', 'required', 'filled'] });


      var focused = muiFormControl ? muiFormControl.focused : this.state.focused;

      var className = classnames(
      classes.root, (_classNames = {}, defineProperty(_classNames,

      classes.disabled, fcs.disabled), defineProperty(_classNames,
      classes.error, fcs.error), defineProperty(_classNames,
      classes.fullWidth, fullWidth), defineProperty(_classNames,
      classes.focused, focused), defineProperty(_classNames,
      classes.formControl, muiFormControl), defineProperty(_classNames,
      classes.marginDense, fcs.margin === 'dense'), defineProperty(_classNames,
      classes.multiline, multiline), defineProperty(_classNames,
      classes.adornedStart, startAdornment), defineProperty(_classNames,
      classes.adornedEnd, endAdornment), _classNames),

      classNameProp);


      var inputClassName = classnames(
      classes.input, (_classNames2 = {}, defineProperty(_classNames2,

      classes.disabled, fcs.disabled), defineProperty(_classNames2,
      classes.inputType, type !== 'text'), defineProperty(_classNames2,
      classes.inputTypeSearch, type === 'search'), defineProperty(_classNames2,
      classes.inputMultiline, multiline), defineProperty(_classNames2,
      classes.inputMarginDense, fcs.margin === 'dense'), defineProperty(_classNames2,
      classes.inputAdornedStart, startAdornment), defineProperty(_classNames2,
      classes.inputAdornedEnd, endAdornment), _classNames2),

      inputPropsClassName);


      var InputComponent = inputComponent;
      var inputProps = objectSpread({},
      inputPropsProp, {
        ref: this.handleRefInput });


      if (typeof InputComponent !== 'string') {
        inputProps = objectSpread({
          // Rename ref to inputRef as we don't know the
          // provided `inputComponent` structure.
          inputRef: this.handleRefInput,
          type: type },
        inputProps, {
          ref: null });

      } else if (multiline) {
        if (rows && !rowsMax) {
          InputComponent = 'textarea';
        } else {
          inputProps = objectSpread({
            rowsMax: rowsMax,
            textareaRef: this.handleRefInput },
          inputProps, {
            ref: null });

          InputComponent = Textarea$1;
        }
      } else {
        inputProps = objectSpread({
          type: type },
        inputProps);

      }

      return (
        react.createElement(FormControlContext.Provider, { value: null },
        react.createElement("div", _extends_1({ className: className, onClick: this.handleClick }, other),
        renderPrefix ?
        renderPrefix(objectSpread({},
        fcs, {
          startAdornment: startAdornment,
          focused: focused })) :

        null,
        startAdornment,
        react.createElement(InputComponent, _extends_1({
          "aria-invalid": fcs.error,
          autoComplete: autoComplete,
          autoFocus: autoFocus,
          className: inputClassName,
          defaultValue: defaultValue,
          disabled: fcs.disabled,
          id: id,
          name: name,
          onBlur: this.handleBlur,
          onChange: this.handleChange,
          onFocus: this.handleFocus,
          onKeyDown: onKeyDown,
          onKeyUp: onKeyUp,
          placeholder: placeholder,
          readOnly: readOnly,
          required: fcs.required,
          rows: rows,
          value: value },
        inputProps)),

        endAdornment)));



    } }]);return InputBase;}(react.Component);


InputBase.propTypes = {
  /**
                         * This property helps users to fill forms faster, especially on mobile devices.
                         * The name can be confusing, as it's more like an autofill.
                         * You can learn more about it here:
                         * https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill
                         */
  autoComplete: propTypes.string,
  /**
                                   * If `true`, the input will be focused during the first mount.
                                   */
  autoFocus: propTypes.bool,
  /**
                              * Override or extend the styles applied to the component.
                              * See [CSS API](#css-api) below for more details.
                              */
  classes: propTypes.object.isRequired,
  /**
                                         * The CSS class name of the wrapper element.
                                         */
  className: propTypes.string,
  /**
                                * The default input value, useful when not controlling the component.
                                */
  defaultValue: propTypes.oneOfType([
  propTypes.string,
  propTypes.number,
  propTypes.bool,
  propTypes.object,
  propTypes.arrayOf(
  propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.bool, propTypes.object]))]),


  /**
                                                                                                   * If `true`, the input will be disabled.
                                                                                                   */
  disabled: propTypes.bool,
  /**
                             * End `InputAdornment` for this component.
                             */
  endAdornment: propTypes.node,
  /**
                                 * If `true`, the input will indicate an error. This is normally obtained via context from
                                 * FormControl.
                                 */
  error: propTypes.bool,
  /**
                          * If `true`, the input will take up the full width of its container.
                          */
  fullWidth: propTypes.bool,
  /**
                              * The id of the `input` element.
                              */
  id: propTypes.string,
  /**
                         * The component used for the native input.
                         * Either a string to use a DOM element or a component.
                         */
  inputComponent: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                              * Attributes applied to the `input` element.
                                                                                              */
  inputProps: propTypes.object,
  /**
                                 * Use that property to pass a ref callback to the native input component.
                                 */
  inputRef: propTypes.oneOfType([propTypes.func, propTypes.object]),
  /**
                                                                      * If `dense`, will adjust vertical spacing. This is normally obtained via context from
                                                                      * FormControl.
                                                                      */
  margin: propTypes.oneOf(['dense', 'none']),
  /**
                                               * @ignore
                                               */
  muiFormControl: propTypes.object,
  /**
                                     * If `true`, a textarea element will be rendered.
                                     */
  multiline: propTypes.bool,
  /**
                              * Name attribute of the `input` element.
                              */
  name: propTypes.string,
  /**
                           * @ignore
                           */
  onBlur: propTypes.func,
  /**
                           * Callback fired when the value is changed.
                           *
                           * @param {object} event The event source of the callback.
                           * You can pull out the new value by accessing `event.target.value`.
                           */
  onChange: propTypes.func,
  /**
                             * @ignore
                             */
  onEmpty: propTypes.func,
  /**
                            * @ignore
                            */
  onFilled: propTypes.func,
  /**
                             * @ignore
                             */
  onFocus: propTypes.func,
  /**
                            * @ignore
                            */
  onKeyDown: propTypes.func,
  /**
                              * @ignore
                              */
  onKeyUp: propTypes.func,
  /**
                            * The short hint displayed in the input before the user enters a value.
                            */
  placeholder: propTypes.string,
  /**
                                  * It prevents the user from changing the value of the field
                                  * (not from interacting with the field).
                                  */
  readOnly: propTypes.bool,
  /**
                             * @ignore
                             */
  renderPrefix: propTypes.func,
  /**
                                 * If `true`, the input will be required.
                                 */
  required: propTypes.bool,
  /**
                             * Number of rows to display when multiline option is set to true.
                             */
  rows: propTypes.oneOfType([propTypes.string, propTypes.number]),
  /**
                                                                    * Maximum number of rows to display when multiline option is set to true.
                                                                    */
  rowsMax: propTypes.oneOfType([propTypes.string, propTypes.number]),
  /**
                                                                       * Start `InputAdornment` for this component.
                                                                       */
  startAdornment: propTypes.node,
  /**
                                   * Type of the input element. It should be a valid HTML5 input type.
                                   */
  type: propTypes.string,
  /**
                           * The input value, required for a controlled component.
                           */
  value: propTypes.oneOfType([
  propTypes.string,
  propTypes.number,
  propTypes.bool,
  propTypes.object,
  propTypes.arrayOf(
  propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.bool, propTypes.object]))]) };




InputBase.defaultProps = {
  fullWidth: false,
  inputComponent: 'input',
  multiline: false,
  type: 'text' };


var InputBase$1 = withStyles(styles$E, { name: 'MuiInputBase' })(withFormControlContext(InputBase));

var styles$F = function styles(theme) {
  var light = theme.palette.type === 'light';
  var bottomLineColor = light ? 'rgba(0, 0, 0, 0.42)' : 'rgba(255, 255, 255, 0.7)';
  var backgroundColor = light ? 'rgba(0, 0, 0, 0.09)' : 'rgba(255, 255, 255, 0.09)';

  return {
    /* Styles applied to the root element. */
    root: {
      position: 'relative',
      backgroundColor: backgroundColor,
      borderTopLeftRadius: theme.shape.borderRadius,
      borderTopRightRadius: theme.shape.borderRadius,
      transition: theme.transitions.create('background-color', {
        duration: theme.transitions.duration.shorter,
        easing: theme.transitions.easing.easeOut }),

      '&:hover': {
        backgroundColor: light ? 'rgba(0, 0, 0, 0.13)' : 'rgba(255, 255, 255, 0.13)',
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: backgroundColor } },


      '&$focused': {
        backgroundColor: light ? 'rgba(0, 0, 0, 0.09)' : 'rgba(255, 255, 255, 0.09)' },

      '&$disabled': {
        backgroundColor: light ? 'rgba(0, 0, 0, 0.12)' : 'rgba(255, 255, 255, 0.12)' } },


    /* Styles applied to the root element if `disableUnderline={false}`. */
    underline: {
      '&:after': {
        borderBottom: "2px solid ".concat(theme.palette.primary[light ? 'dark' : 'light']),
        left: 0,
        bottom: 0,
        // Doing the other way around crash on IE 11 "''" https://github.com/cssinjs/jss/issues/242
        content: '""',
        position: 'absolute',
        right: 0,
        transform: 'scaleX(0)',
        transition: theme.transitions.create('transform', {
          duration: theme.transitions.duration.shorter,
          easing: theme.transitions.easing.easeOut }),

        pointerEvents: 'none' // Transparent to the hover style.
      },
      '&$focused:after': {
        transform: 'scaleX(1)' },

      '&$error:after': {
        borderBottomColor: theme.palette.error.main,
        transform: 'scaleX(1)' // error is always underlined in red
      },
      '&:before': {
        borderBottom: "1px solid ".concat(bottomLineColor),
        left: 0,
        bottom: 0,
        // Doing the other way around crash on IE 11 "''" https://github.com/cssinjs/jss/issues/242
        content: '"\\00a0"',
        position: 'absolute',
        right: 0,
        transition: theme.transitions.create('border-bottom-color', {
          duration: theme.transitions.duration.shorter }),

        pointerEvents: 'none' // Transparent to the hover style.
      },
      '&:hover:not($disabled):not($focused):not($error):before': {
        borderBottom: "1px solid ".concat(theme.palette.text.primary) },

      '&$disabled:before': {
        borderBottom: "1px dotted ".concat(bottomLineColor) } },


    /* Styles applied to the root element if the component is focused. */
    focused: {},
    /* Styles applied to the root element if `disabled={true}`. */
    disabled: {},
    /* Styles applied to the root element if `startAdornment` is provided. */
    adornedStart: {
      paddingLeft: 12 },

    /* Styles applied to the root element if `endAdornment` is provided. */
    adornedEnd: {
      paddingRight: 12 },

    /* Styles applied to the root element if `error={true}`. */
    error: {},
    /* Styles applied to the root element if `multiline={true}`. */
    multiline: {
      padding: '27px 12px 10px',
      boxSizing: 'border-box' // Prevent padding issue with fullWidth.
    },
    /* Styles applied to the `input` element. */
    input: {
      padding: '27px 12px 10px' },

    /* Styles applied to the `input` element if `margin="dense"`. */
    inputMarginDense: {
      paddingTop: 24,
      paddingBottom: 6 },

    /* Styles applied to the `input` element if `multiline={true}`. */
    inputMultiline: {
      padding: 0 },

    /* Styles applied to the `input` element if `startAdornment` is provided. */
    inputAdornedStart: {
      paddingLeft: 0 },

    /* Styles applied to the `input` element if `endAdornment` is provided. */
    inputAdornedEnd: {
      paddingRight: 0 } };


};

function FilledInput(props) {var
  disableUnderline = props.disableUnderline,classes = props.classes,other = objectWithoutProperties(props, ["disableUnderline", "classes"]);

  return (
    react.createElement(InputBase$1, _extends_1({
      classes: objectSpread({},
      classes, {
        root: classnames(classes.root, defineProperty({},
        classes.underline, !disableUnderline)),

        underline: null }) },

    other)));


}

FilledInput.propTypes = {
  /**
                           * This property helps users to fill forms faster, especially on mobile devices.
                           * The name can be confusing, as it's more like an autofill.
                           * You can learn more about it here:
                           * https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill
                           */
  autoComplete: propTypes.string,
  /**
                                   * If `true`, the input will be focused during the first mount.
                                   */
  autoFocus: propTypes.bool,
  /**
                              * Override or extend the styles applied to the component.
                              * See [CSS API](#css-api) below for more details.
                              */
  classes: propTypes.object.isRequired,
  /**
                                         * The CSS class name of the wrapper element.
                                         */
  className: propTypes.string,
  /**
                                * The default input value, useful when not controlling the component.
                                */
  defaultValue: propTypes.oneOfType([propTypes.string, propTypes.number]),
  /**
                                                                            * If `true`, the input will be disabled.
                                                                            */
  disabled: propTypes.bool,
  /**
                             * If `true`, the input will not have an underline.
                             */
  disableUnderline: propTypes.bool,
  /**
                                     * End `InputAdornment` for this component.
                                     */
  endAdornment: propTypes.node,
  /**
                                 * If `true`, the input will indicate an error. This is normally obtained via context from
                                 * FormControl.
                                 */
  error: propTypes.bool,
  /**
                          * If `true`, the input will take up the full width of its container.
                          */
  fullWidth: propTypes.bool,
  /**
                              * The id of the `input` element.
                              */
  id: propTypes.string,
  /**
                         * The component used for the native input.
                         * Either a string to use a DOM element or a component.
                         */
  inputComponent: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                              * Attributes applied to the `input` element.
                                                                                              */
  inputProps: propTypes.object,
  /**
                                 * Use that property to pass a ref callback to the native input component.
                                 */
  inputRef: propTypes.oneOfType([propTypes.func, propTypes.object]),
  /**
                                                                      * If `dense`, will adjust vertical spacing. This is normally obtained via context from
                                                                      * FormControl.
                                                                      */
  margin: propTypes.oneOf(['dense', 'none']),
  /**
                                               * If `true`, a textarea element will be rendered.
                                               */
  multiline: propTypes.bool,
  /**
                              * Name attribute of the `input` element.
                              */
  name: propTypes.string,
  /**
                           * Callback fired when the value is changed.
                           *
                           * @param {object} event The event source of the callback.
                           * You can pull out the new value by accessing `event.target.value`.
                           */
  onChange: propTypes.func,
  /**
                             * The short hint displayed in the input before the user enters a value.
                             */
  placeholder: propTypes.string,
  /**
                                  * It prevents the user from changing the value of the field
                                  * (not from interacting with the field).
                                  */
  readOnly: propTypes.bool,
  /**
                             * If `true`, the input will be required.
                             */
  required: propTypes.bool,
  /**
                             * Number of rows to display when multiline option is set to true.
                             */
  rows: propTypes.oneOfType([propTypes.string, propTypes.number]),
  /**
                                                                    * Maximum number of rows to display when multiline option is set to true.
                                                                    */
  rowsMax: propTypes.oneOfType([propTypes.string, propTypes.number]),
  /**
                                                                       * Start `InputAdornment` for this component.
                                                                       */
  startAdornment: propTypes.node,
  /**
                                   * Type of the input element. It should be a valid HTML5 input type.
                                   */
  type: propTypes.string,
  /**
                           * The input value, required for a controlled component.
                           */
  value: propTypes.oneOfType([
  propTypes.string,
  propTypes.number,
  propTypes.bool,
  propTypes.arrayOf(propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.bool]))]) };



InputBase$1.defaultProps = {
  fullWidth: false,
  inputComponent: 'input',
  multiline: false,
  type: 'text' };


FilledInput.muiName = 'Input';

var FilledInput$1 = withStyles(styles$F, { name: 'MuiFilledInput' })(FilledInput);

var styles$G = {
  /* Styles applied to the root element. */
  root: {
    display: 'inline-flex',
    flexDirection: 'column',
    position: 'relative',
    // Reset fieldset default style.
    minWidth: 0,
    padding: 0,
    margin: 0,
    border: 0,
    verticalAlign: 'top' // Fix alignment issue on Safari.
  },
  /* Styles applied to the root element if `margin="normal"`. */
  marginNormal: {
    marginTop: 16,
    marginBottom: 8 },

  /* Styles applied to the root element if `margin="dense"`. */
  marginDense: {
    marginTop: 8,
    marginBottom: 4 },

  /* Styles applied to the root element if `fullWidth={true}`. */
  fullWidth: {
    width: '100%' } };



/**
                        * Provides context such as filled/focused/error/required for form inputs.
                        * Relying on the context provides high flexibilty and ensures that the state always stays
                        * consistent across the children of the `FormControl`.
                        * This context is used by the following components:
                        *  - FormLabel
                        *  - FormHelperText
                        *  - Input
                        *  - InputLabel
                        *
                        * ⚠️ Only one input can be used within a FormControl.
                        */var
FormControl = /*#__PURE__*/function (_React$Component) {inherits(FormControl, _React$Component);createClass(FormControl, null, [{ key: "getDerivedStateFromProps", value: function getDerivedStateFromProps(
    props, state) {
      if (props.disabled && state.focused) {
        return { focused: false };
      }
      return null;
    } }]);

  function FormControl(props) {var _this;classCallCheck(this, FormControl);
    _this = possibleConstructorReturn(this, getPrototypeOf(FormControl).call(this));defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleFocus",





























    function () {
      _this.setState(function (state) {return !state.focused ? { focused: true } : null;});
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleBlur",

    function () {
      _this.setState(function (state) {return state.focused ? { focused: false } : null;});
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleDirty",

    function () {
      if (!_this.state.filled) {
        _this.setState({ filled: true });
      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleClean",

    function () {
      if (_this.state.filled) {
        _this.setState({ filled: false });
      }
    });_this.state = { adornedStart: false, filled: false, focused: false }; // We need to iterate through the children and find the Input in order
    // to fully support server side rendering.
    var children = props.children;if (children) {react.Children.forEach(children, function (child) {if (!isMuiElement(child, ['Input', 'Select'])) {return;}if (isFilled(child.props, true)) {_this.state.filled = true;}var input = isMuiElement(child, ['Select']) ? child.props.input : child;if (input && isAdornedStart(input.props)) {_this.state.adornedStart = true;}});}return _this;}createClass(FormControl, [{ key: "render", value: function render() {var _classNames;var _this$props =











      this.props,classes = _this$props.classes,className = _this$props.className,Component = _this$props.component,disabled = _this$props.disabled,error = _this$props.error,fullWidth = _this$props.fullWidth,margin = _this$props.margin,required = _this$props.required,variant = _this$props.variant,other = objectWithoutProperties(_this$props, ["classes", "className", "component", "disabled", "error", "fullWidth", "margin", "required", "variant"]);var _this$state =
      this.state,adornedStart = _this$state.adornedStart,filled = _this$state.filled,focused = _this$state.focused;

      var childContext = {
        adornedStart: adornedStart,
        disabled: disabled,
        error: error,
        filled: filled,
        focused: focused,
        margin: margin,
        onBlur: this.handleBlur,
        onEmpty: this.handleClean,
        onFilled: this.handleDirty,
        onFocus: this.handleFocus,
        required: required,
        variant: variant };


      return (
        react.createElement(FormControlContext.Provider, { value: childContext },
        react.createElement(Component, _extends_1({
          className: classnames(
          classes.root, (_classNames = {}, defineProperty(_classNames,

          classes["margin".concat(capitalize(margin))], margin !== 'none'), defineProperty(_classNames,
          classes.fullWidth, fullWidth), _classNames),

          className) },

        other))));



    } }]);return FormControl;}(react.Component);


FormControl.propTypes = {
  /**
                           * The contents of the form control.
                           */
  children: propTypes.node,
  /**
                             * Override or extend the styles applied to the component.
                             * See [CSS API](#css-api) below for more details.
                             */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * The component used for the root node.
                                * Either a string to use a DOM element or a component.
                                */
  component: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                         * If `true`, the label, input and helper text should be displayed in a disabled state.
                                                                                         */
  disabled: propTypes.bool,
  /**
                             * If `true`, the label should be displayed in an error state.
                             */
  error: propTypes.bool,
  /**
                          * If `true`, the component will take up the full width of its container.
                          */
  fullWidth: propTypes.bool,
  /**
                              * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
                              */
  margin: propTypes.oneOf(['none', 'dense', 'normal']),
  /**
                                                         * If `true`, the label will indicate that the input is required.
                                                         */
  required: propTypes.bool,
  /**
                             * The variant to use.
                             */
  variant: propTypes.oneOf(['standard', 'outlined', 'filled']) };


FormControl.defaultProps = {
  component: 'div',
  disabled: false,
  error: false,
  fullWidth: false,
  margin: 'none',
  required: false,
  variant: 'standard' };


var FormControl$1 = withStyles(styles$G, { name: 'MuiFormControl' })(FormControl);

var styles$H = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: {
      display: 'inline-flex',
      alignItems: 'center',
      cursor: 'pointer',
      // For correct alignment with the text.
      verticalAlign: 'middle',
      // Remove grey highlight
      WebkitTapHighlightColor: 'transparent',
      marginLeft: -14,
      marginRight: 16, // used for row presentation of radio/checkbox
      '&$disabled': {
        cursor: 'default' } },


    /* Styles applied to the root element if `labelPlacement="start"`. */
    labelPlacementStart: {
      flexDirection: 'row-reverse',
      marginLeft: 16, // used for row presentation of radio/checkbox
      marginRight: -14 },

    /* Styles applied to the root element if `labelPlacement="top"`. */
    labelPlacementTop: {
      flexDirection: 'column-reverse',
      marginLeft: 16 },

    /* Styles applied to the root element if `labelPlacement="bottom"`. */
    labelPlacementBottom: {
      flexDirection: 'column',
      marginLeft: 16 },

    /* Styles applied to the root element if `disabled={true}`. */
    disabled: {},
    /* Styles applied to the label's Typography component. */
    label: {
      '&$disabled': {
        color: theme.palette.text.disabled } } };};




/**
                                                     * Drop in replacement of the `Radio`, `Switch` and `Checkbox` component.
                                                     * Use this component if you want to display an extra label.
                                                     */
function FormControlLabel(props) {var _classNames;var

  checked =












  props.checked,classes = props.classes,classNameProp = props.className,control = props.control,disabledProp = props.disabled,inputRef = props.inputRef,label = props.label,labelPlacement = props.labelPlacement,muiFormControl = props.muiFormControl,name = props.name,onChange = props.onChange,value = props.value,other = objectWithoutProperties(props, ["checked", "classes", "className", "control", "disabled", "inputRef", "label", "labelPlacement", "muiFormControl", "name", "onChange", "value"]);

  var disabled = disabledProp;
  if (typeof disabled === 'undefined' && typeof control.props.disabled !== 'undefined') {
    disabled = control.props.disabled;
  }
  if (typeof disabled === 'undefined' && muiFormControl) {
    disabled = muiFormControl.disabled;
  }

  var controlProps = {
    disabled: disabled };

  ['checked', 'name', 'onChange', 'value', 'inputRef'].forEach(function (key) {
    if (typeof control.props[key] === 'undefined' && typeof props[key] !== 'undefined') {
      controlProps[key] = props[key];
    }
  });

  return (
    react.createElement("label", _extends_1({
      className: classnames(
      classes.root, (_classNames = {}, defineProperty(_classNames,

      classes["labelPlacement".concat(capitalize(labelPlacement))], labelPlacement !== 'end'), defineProperty(_classNames,
      classes.disabled, disabled), _classNames),

      classNameProp) },

    other),

    react.cloneElement(control, controlProps),
    react.createElement(Typography$1, {
      component: "span",
      className: classnames(classes.label, defineProperty({}, classes.disabled, disabled)) },

    label)));



}

FormControlLabel.propTypes = {
  /**
                                * If `true`, the component appears selected.
                                */
  checked: propTypes.oneOfType([propTypes.bool, propTypes.string]),
  /**
                                                                     * Override or extend the styles applied to the component.
                                                                     * See [CSS API](#css-api) below for more details.
                                                                     */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * A control element. For instance, it can be be a `Radio`, a `Switch` or a `Checkbox`.
                                */
  control: propTypes.element,
  /**
                               * If `true`, the control will be disabled.
                               */
  disabled: propTypes.bool,
  /**
                             * Use that property to pass a ref callback to the native input component.
                             */
  inputRef: propTypes.oneOfType([propTypes.func, propTypes.object]),
  /**
                                                                      * The text to be used in an enclosing label element.
                                                                      */
  label: propTypes.node,
  /**
                          * The position of the label.
                          */
  labelPlacement: propTypes.oneOf(['end', 'start', 'top', 'bottom']),
  /**
                                                                       * @ignore
                                                                       */
  muiFormControl: propTypes.object,
  /*
                                     * @ignore
                                     */
  name: propTypes.string,
  /**
                           * Callback fired when the state is changed.
                           *
                           * @param {object} event The event source of the callback.
                           * You can pull out the new value by accessing `event.target.checked`.
                           * @param {boolean} checked The `checked` value of the switch
                           */
  onChange: propTypes.func,
  /**
                             * The value of the component.
                             */
  value: propTypes.string };


FormControlLabel.defaultProps = {
  labelPlacement: 'end' };


withStyles(styles$H, { name: 'MuiFormControlLabel' })(
withFormControlContext(FormControlLabel));

var styles$I = {
  /* Styles applied to the root element. */
  root: {
    display: 'flex',
    flexDirection: 'column',
    flexWrap: 'wrap' },

  /* Styles applied to the root element if `row={true}`. */
  row: {
    flexDirection: 'row' } };



/**
                               * `FormGroup` wraps controls such as `Checkbox` and `Switch`.
                               * It provides compact row layout.
                               * For the `Radio`, you should be using the `RadioGroup` component instead of this one.
                               */
function FormGroup(props) {var
  classes = props.classes,className = props.className,children = props.children,row = props.row,other = objectWithoutProperties(props, ["classes", "className", "children", "row"]);

  return (
    react.createElement("div", _extends_1({
      className: classnames(
      classes.root, defineProperty({},

      classes.row, row),

      className) },

    other),

    children));


}

FormGroup.propTypes = {
  /**
                         * The content of the component.
                         */
  children: propTypes.node,
  /**
                             * Override or extend the styles applied to the component.
                             * See [CSS API](#css-api) below for more details.
                             */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * Display group of elements in a compact row.
                                */
  row: propTypes.bool };


FormGroup.defaultProps = {
  row: false };


var FormGroup$1 = withStyles(styles$I, { name: 'MuiFormGroup' })(FormGroup);

var styles$J = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: {
      color: theme.palette.text.secondary,
      fontFamily: theme.typography.fontFamily,
      fontSize: theme.typography.pxToRem(12),
      textAlign: 'left',
      marginTop: 8,
      lineHeight: '1em',
      minHeight: '1em',
      margin: 0,
      '&$disabled': {
        color: theme.palette.text.disabled },

      '&$error': {
        color: theme.palette.error.main } },


    /* Styles applied to the root element if `error={true}`. */
    error: {},
    /* Styles applied to the root element if `disabled={true}`. */
    disabled: {},
    /* Styles applied to the root element if `margin="dense"`. */
    marginDense: {
      marginTop: 4 },

    /* Styles applied to the root element if `variant="filled"` or `variant="outlined"`. */
    contained: {
      margin: '8px 12px 0' },

    /* Styles applied to the root element if `focused={true}`. */
    focused: {},
    /* Styles applied to the root element if `filled={true}`. */
    filled: {},
    /* Styles applied to the root element if `required={true}`. */
    required: {} };};


function FormHelperText(props) {var _classNames;var

  classes =











  props.classes,classNameProp = props.className,Component = props.component,disabled = props.disabled,error = props.error,filled = props.filled,focused = props.focused,margin = props.margin,muiFormControl = props.muiFormControl,required = props.required,variant = props.variant,other = objectWithoutProperties(props, ["classes", "className", "component", "disabled", "error", "filled", "focused", "margin", "muiFormControl", "required", "variant"]);

  var fcs = formControlState({
    props: props,
    muiFormControl: muiFormControl,
    states: ['variant', 'margin', 'disabled', 'error', 'filled', 'focused', 'required'] });


  return (
    react.createElement(Component, _extends_1({
      className: classnames(
      classes.root, (_classNames = {}, defineProperty(_classNames,

      classes.contained, fcs.variant === 'filled' || fcs.variant === 'outlined'), defineProperty(_classNames,
      classes.marginDense, fcs.margin === 'dense'), defineProperty(_classNames,
      classes.disabled, fcs.disabled), defineProperty(_classNames,
      classes.error, fcs.error), defineProperty(_classNames,
      classes.filled, fcs.filled), defineProperty(_classNames,
      classes.focused, fcs.focused), defineProperty(_classNames,
      classes.required, fcs.required), _classNames),

      classNameProp) },

    other)));


}

FormHelperText.propTypes = {
  /**
                              * The content of the component.
                              */
  children: propTypes.node,
  /**
                             * Override or extend the styles applied to the component.
                             * See [CSS API](#css-api) below for more details.
                             */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * The component used for the root node.
                                * Either a string to use a DOM element or a component.
                                */
  component: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                         * If `true`, the helper text should be displayed in a disabled state.
                                                                                         */
  disabled: propTypes.bool,
  /**
                             * If `true`, helper text should be displayed in an error state.
                             */
  error: propTypes.bool,
  /**
                          * If `true`, the helper text should use filled classes key.
                          */
  filled: propTypes.bool,
  /**
                           * If `true`, the helper text should use focused classes key.
                           */
  focused: propTypes.bool,
  /**
                            * If `dense`, will adjust vertical spacing. This is normally obtained via context from
                            * FormControl.
                            */
  margin: propTypes.oneOf(['dense']),
  /**
                                       * @ignore
                                       */
  muiFormControl: propTypes.object,
  /**
                                     * If `true`, the helper text should use required classes key.
                                     */
  required: propTypes.bool,
  /**
                             * The variant to use.
                             */
  variant: propTypes.oneOf(['standard', 'outlined', 'filled']) };


FormHelperText.defaultProps = {
  component: 'p' };


var FormHelperText$1 = withStyles(styles$J, { name: 'MuiFormHelperText' })(
withFormControlContext(FormHelperText));

var styles$K = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: {
      fontFamily: theme.typography.fontFamily,
      color: theme.palette.text.secondary,
      fontSize: theme.typography.pxToRem(16),
      lineHeight: 1,
      padding: 0,
      '&$focused': {
        color: theme.palette.primary[theme.palette.type === 'light' ? 'dark' : 'light'] },

      '&$disabled': {
        color: theme.palette.text.disabled },

      '&$error': {
        color: theme.palette.error.main } },


    /* Styles applied to the root element if `focused={true}`. */
    focused: {},
    /* Styles applied to the root element if `disabled={true}`. */
    disabled: {},
    /* Styles applied to the root element if `error={true}`. */
    error: {},
    /* Styles applied to the root element if `filled={true}`. */
    filled: {},
    /* Styles applied to the root element if `required={true}`. */
    required: {},
    asterisk: {
      '&$error': {
        color: theme.palette.error.main } } };};




function FormLabel(props) {var _classNames;var

  children =










  props.children,classes = props.classes,classNameProp = props.className,Component = props.component,disabled = props.disabled,error = props.error,filled = props.filled,focused = props.focused,muiFormControl = props.muiFormControl,required = props.required,other = objectWithoutProperties(props, ["children", "classes", "className", "component", "disabled", "error", "filled", "focused", "muiFormControl", "required"]);

  var fcs = formControlState({
    props: props,
    muiFormControl: muiFormControl,
    states: ['required', 'focused', 'disabled', 'error', 'filled'] });


  return (
    react.createElement(Component, _extends_1({
      className: classnames(
      classes.root, (_classNames = {}, defineProperty(_classNames,

      classes.disabled, fcs.disabled), defineProperty(_classNames,
      classes.error, fcs.error), defineProperty(_classNames,
      classes.filled, fcs.filled), defineProperty(_classNames,
      classes.focused, fcs.focused), defineProperty(_classNames,
      classes.required, fcs.required), _classNames),

      classNameProp) },

    other),

    children,
    fcs.required &&
    react.createElement("span", {
      className: classnames(classes.asterisk, defineProperty({},
      classes.error, fcs.error)),

      "data-mui-test": "FormLabelAsterisk" },

    "\u2009*")));




}

FormLabel.propTypes = {
  /**
                         * The content of the component.
                         */
  children: propTypes.node,
  /**
                             * Override or extend the styles applied to the component.
                             * See [CSS API](#css-api) below for more details.
                             */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * The component used for the root node.
                                * Either a string to use a DOM element or a component.
                                */
  component: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                         * If `true`, the label should be displayed in a disabled state.
                                                                                         */
  disabled: propTypes.bool,
  /**
                             * If `true`, the label should be displayed in an error state.
                             */
  error: propTypes.bool,
  /**
                          * If `true`, the label should use filled classes key.
                          */
  filled: propTypes.bool,
  /**
                           * If `true`, the input of this label is focused (used by `FormGroup` components).
                           */
  focused: propTypes.bool,
  /**
                            * @ignore
                            */
  muiFormControl: propTypes.object,
  /**
                                     * If `true`, the label will indicate that the input is required.
                                     */
  required: propTypes.bool };


FormLabel.defaultProps = {
  component: 'label' };


var FormLabel$1 = withStyles(styles$K, { name: 'MuiFormLabel' })(withFormControlContext(FormLabel));

var GUTTERS = [0, 8, 16, 24, 32, 40];
var GRID_SIZES = ['auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];

function generateGrid(globalStyles, theme, breakpoint) {
  var styles = {};

  GRID_SIZES.forEach(function (size) {
    var key = "grid-".concat(breakpoint, "-").concat(size);

    if (size === true) {
      // For the auto layouting
      styles[key] = {
        flexBasis: 0,
        flexGrow: 1,
        maxWidth: '100%' };

      return;
    }

    if (size === 'auto') {
      styles[key] = {
        flexBasis: 'auto',
        flexGrow: 0,
        maxWidth: 'none' };

      return;
    }

    // Keep 7 significant numbers.
    var width = "".concat(Math.round(size / 12 * 10e7) / 10e5, "%");

    // Close to the bootstrap implementation:
    // https://github.com/twbs/bootstrap/blob/8fccaa2439e97ec72a4b7dc42ccc1f649790adb0/scss/mixins/_grid.scss#L41
    styles[key] = {
      flexBasis: width,
      flexGrow: 0,
      maxWidth: width };

  });

  // No need for a media query for the first size.
  if (breakpoint === 'xs') {
    Object.assign(globalStyles, styles);
  } else {
    globalStyles[theme.breakpoints.up(breakpoint)] = styles;
  }
}

function generateGutter(theme, breakpoint) {
  var styles = {};

  GUTTERS.forEach(function (spacing, index) {
    if (index === 0) {
      // Skip the default style.
      return;
    }

    styles["spacing-".concat(breakpoint, "-").concat(spacing)] = {
      margin: -spacing / 2,
      width: "calc(100% + ".concat(spacing, "px)"),
      '& > $item': {
        padding: spacing / 2 } };


  });

  return styles;
}

// Default CSS values
// flex: '0 1 auto',
// flexDirection: 'row',
// alignItems: 'flex-start',
// flexWrap: 'nowrap',
// justifyContent: 'flex-start',
var styles$L = function styles(theme) {return objectSpread({
    /* Styles applied to the root element if `container={true}`. */
    container: {
      boxSizing: 'border-box',
      display: 'flex',
      flexWrap: 'wrap',
      width: '100%' },

    /* Styles applied to the root element if `item={true}`. */
    item: {
      boxSizing: 'border-box',
      margin: '0' // For instance, it's useful when used with a `figure` element.
    },
    /* Styles applied to the root element if `zeroMinWidth={true}`. */
    zeroMinWidth: {
      minWidth: 0 },

    /* Styles applied to the root element if `direction="column"`. */
    'direction-xs-column': {
      flexDirection: 'column' },

    /* Styles applied to the root element if `direction="column-reverse"`. */
    'direction-xs-column-reverse': {
      flexDirection: 'column-reverse' },

    /* Styles applied to the root element if `direction="rwo-reverse"`. */
    'direction-xs-row-reverse': {
      flexDirection: 'row-reverse' },

    /* Styles applied to the root element if `wrap="nowrap"`. */
    'wrap-xs-nowrap': {
      flexWrap: 'nowrap' },

    /* Styles applied to the root element if `wrap="reverse"`. */
    'wrap-xs-wrap-reverse': {
      flexWrap: 'wrap-reverse' },

    /* Styles applied to the root element if `alignItems="center"`. */
    'align-items-xs-center': {
      alignItems: 'center' },

    /* Styles applied to the root element if `alignItems="flex-start"`. */
    'align-items-xs-flex-start': {
      alignItems: 'flex-start' },

    /* Styles applied to the root element if `alignItems="flex-end"`. */
    'align-items-xs-flex-end': {
      alignItems: 'flex-end' },

    /* Styles applied to the root element if `alignItems="baseline"`. */
    'align-items-xs-baseline': {
      alignItems: 'baseline' },

    /* Styles applied to the root element if `alignContent="center"`. */
    'align-content-xs-center': {
      alignContent: 'center' },

    /* Styles applied to the root element if `alignContent="flex-start"`. */
    'align-content-xs-flex-start': {
      alignContent: 'flex-start' },

    /* Styles applied to the root element if `alignContent="flex-end"`. */
    'align-content-xs-flex-end': {
      alignContent: 'flex-end' },

    /* Styles applied to the root element if `alignContent="space-between"`. */
    'align-content-xs-space-between': {
      alignContent: 'space-between' },

    /* Styles applied to the root element if `alignContent="space-around"`. */
    'align-content-xs-space-around': {
      alignContent: 'space-around' },

    /* Styles applied to the root element if `justify="center"`. */
    'justify-xs-center': {
      justifyContent: 'center' },

    /* Styles applied to the root element if `justify="flex-end"`. */
    'justify-xs-flex-end': {
      justifyContent: 'flex-end' },

    /* Styles applied to the root element if `justify="space-between"`. */
    'justify-xs-space-between': {
      justifyContent: 'space-between' },

    /* Styles applied to the root element if `justify="space-around"`. */
    'justify-xs-space-around': {
      justifyContent: 'space-around' },

    /* Styles applied to the root element if `justify="space-evenly"`. */
    'justify-xs-space-evenly': {
      justifyContent: 'space-evenly' } },

  generateGutter(theme, 'xs'),
  keys.reduce(function (accumulator, key) {
    // Use side effect over immutability for better performance.
    generateGrid(accumulator, theme, key);
    return accumulator;
  }, {}));};


function Grid(props) {var _classNames;var

  alignContent =

















  props.alignContent,alignItems = props.alignItems,classes = props.classes,classNameProp = props.className,Component = props.component,container = props.container,direction = props.direction,item = props.item,justify = props.justify,lg = props.lg,md = props.md,sm = props.sm,spacing = props.spacing,wrap = props.wrap,xl = props.xl,xs = props.xs,zeroMinWidth = props.zeroMinWidth,other = objectWithoutProperties(props, ["alignContent", "alignItems", "classes", "className", "component", "container", "direction", "item", "justify", "lg", "md", "sm", "spacing", "wrap", "xl", "xs", "zeroMinWidth"]);

  var className = classnames((_classNames = {}, defineProperty(_classNames,

  classes.container, container), defineProperty(_classNames,
  classes.item, item), defineProperty(_classNames,
  classes.zeroMinWidth, zeroMinWidth), defineProperty(_classNames,
  classes["spacing-xs-".concat(String(spacing))], container && spacing !== 0), defineProperty(_classNames,
  classes["direction-xs-".concat(String(direction))], direction !== Grid.defaultProps.direction), defineProperty(_classNames,
  classes["wrap-xs-".concat(String(wrap))], wrap !== Grid.defaultProps.wrap), defineProperty(_classNames,
  classes["align-items-xs-".concat(String(alignItems))],
  alignItems !== Grid.defaultProps.alignItems), defineProperty(_classNames,
  classes["align-content-xs-".concat(String(alignContent))],
  alignContent !== Grid.defaultProps.alignContent), defineProperty(_classNames,
  classes["justify-xs-".concat(String(justify))], justify !== Grid.defaultProps.justify), defineProperty(_classNames,
  classes["grid-xs-".concat(String(xs))], xs !== false), defineProperty(_classNames,
  classes["grid-sm-".concat(String(sm))], sm !== false), defineProperty(_classNames,
  classes["grid-md-".concat(String(md))], md !== false), defineProperty(_classNames,
  classes["grid-lg-".concat(String(lg))], lg !== false), defineProperty(_classNames,
  classes["grid-xl-".concat(String(xl))], xl !== false), _classNames),

  classNameProp);


  return react.createElement(Component, _extends_1({ className: className }, other));
}

Grid.propTypes = {
  /**
                    * Defines the `align-content` style property.
                    * It's applied for all screen sizes.
                    */
  alignContent: propTypes.oneOf([
  'stretch',
  'center',
  'flex-start',
  'flex-end',
  'space-between',
  'space-around']),

  /**
                     * Defines the `align-items` style property.
                     * It's applied for all screen sizes.
                     */
  alignItems: propTypes.oneOf(['flex-start', 'center', 'flex-end', 'stretch', 'baseline']),
  /**
                                                                                             * The content of the component.
                                                                                             */
  children: propTypes.node,
  /**
                             * Override or extend the styles applied to the component.
                             * See [CSS API](#css-api) below for more details.
                             */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * The component used for the root node.
                                * Either a string to use a DOM element or a component.
                                */
  component: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                         * If `true`, the component will have the flex *container* behavior.
                                                                                         * You should be wrapping *items* with a *container*.
                                                                                         */
  container: propTypes.bool,
  /**
                              * Defines the `flex-direction` style property.
                              * It is applied for all screen sizes.
                              */
  direction: propTypes.oneOf(['row', 'row-reverse', 'column', 'column-reverse']),
  /**
                                                                                   * If `true`, the component will have the flex *item* behavior.
                                                                                   * You should be wrapping *items* with a *container*.
                                                                                   */
  item: propTypes.bool,
  /**
                         * Defines the `justify-content` style property.
                         * It is applied for all screen sizes.
                         */
  justify: propTypes.oneOf([
  'flex-start',
  'center',
  'flex-end',
  'space-between',
  'space-around',
  'space-evenly']),

  /**
                     * Defines the number of grids the component is going to use.
                     * It's applied for the `lg` breakpoint and wider screens if not overridden.
                     */
  lg: propTypes.oneOf([false, 'auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),
  /**
                                                                                      * Defines the number of grids the component is going to use.
                                                                                      * It's applied for the `md` breakpoint and wider screens if not overridden.
                                                                                      */
  md: propTypes.oneOf([false, 'auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),
  /**
                                                                                      * Defines the number of grids the component is going to use.
                                                                                      * It's applied for the `sm` breakpoint and wider screens if not overridden.
                                                                                      */
  sm: propTypes.oneOf([false, 'auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),
  /**
                                                                                      * Defines the space between the type `item` component.
                                                                                      * It can only be used on a type `container` component.
                                                                                      */
  spacing: propTypes.oneOf(GUTTERS),
  /**
                                      * Defines the `flex-wrap` style property.
                                      * It's applied for all screen sizes.
                                      */
  wrap: propTypes.oneOf(['nowrap', 'wrap', 'wrap-reverse']),
  /**
                                                              * Defines the number of grids the component is going to use.
                                                              * It's applied for the `xl` breakpoint and wider screens.
                                                              */
  xl: propTypes.oneOf([false, 'auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),
  /**
                                                                                      * Defines the number of grids the component is going to use.
                                                                                      * It's applied for all the screen sizes with the lowest priority.
                                                                                      */
  xs: propTypes.oneOf([false, 'auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),
  /**
                                                                                      * If `true`, it sets `min-width: 0` on the item.
                                                                                      * Refer to the limitations section of the documentation to better understand the use case.
                                                                                      */
  zeroMinWidth: propTypes.bool };


Grid.defaultProps = {
  alignContent: 'stretch',
  alignItems: 'stretch',
  component: 'div',
  container: false,
  direction: 'row',
  item: false,
  justify: 'flex-start',
  lg: false,
  md: false,
  sm: false,
  spacing: 0,
  wrap: 'wrap',
  xl: false,
  xs: false,
  zeroMinWidth: false };


var StyledGrid = withStyles(styles$L, { name: 'MuiGrid' })(Grid);

var styles$M = {
  /* Styles applied to the root element. */
  root: {
    display: 'flex',
    flexWrap: 'wrap',
    overflowY: 'auto',
    listStyle: 'none',
    padding: 0,
    WebkitOverflowScrolling: 'touch' // Add iOS momentum scrolling.
  } };


function GridList(props) {var

  cellHeight =








  props.cellHeight,children = props.children,classes = props.classes,classNameProp = props.className,cols = props.cols,Component = props.component,spacing = props.spacing,style = props.style,other = objectWithoutProperties(props, ["cellHeight", "children", "classes", "className", "cols", "component", "spacing", "style"]);

  return (
    react.createElement(Component, _extends_1({
      className: classnames(classes.root, classNameProp),
      style: objectSpread({ margin: -spacing / 2 }, style) },
    other),

    react.Children.map(children, function (child) {
      if (!react.isValidElement(child)) {
        return null;
      }

      warning_1(
      child.type !== react.Fragment,
      [
      "Material-UI: the GridList component doesn't accept a Fragment as a child.",
      'Consider providing an array instead.'].
      join('\n'));


      var childCols = child.props.cols || 1;
      var childRows = child.props.rows || 1;

      return react.cloneElement(child, {
        style: Object.assign(
        {
          width: "".concat(100 / cols * childCols, "%"),
          height: cellHeight === 'auto' ? 'auto' : cellHeight * childRows + spacing,
          padding: spacing / 2 },

        child.props.style) });


    })));


}

GridList.propTypes = {
  /**
                        * Number of px for one cell height.
                        * You can set `'auto'` if you want to let the children determine the height.
                        */
  cellHeight: propTypes.oneOfType([propTypes.number, propTypes.oneOf(['auto'])]),
  /**
                                                                                   * Grid Tiles that will be in Grid List.
                                                                                   */
  children: propTypes.node.isRequired,
  /**
                                        * Override or extend the styles applied to the component.
                                        * See [CSS API](#css-api) below for more details.
                                        */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * Number of columns.
                                */
  cols: propTypes.number,
  /**
                           * The component used for the root node.
                           * Either a string to use a DOM element or a component.
                           */
  component: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                         * Number of px for the spacing between tiles.
                                                                                         */
  spacing: propTypes.number,
  /**
                              * @ignore
                              */
  style: propTypes.object };


GridList.defaultProps = {
  cellHeight: 180,
  cols: 2,
  component: 'ul',
  spacing: 4 };


withStyles(styles$M, { name: 'MuiGridList' })(GridList);

var styles$N = {
  /* Styles applied to the root element. */
  root: {
    boxSizing: 'border-box',
    flexShrink: 0 },

  /* Styles applied to the `div` element that wraps the children. */
  tile: {
    position: 'relative',
    display: 'block', // In case it's not rendered with a div.
    height: '100%',
    overflow: 'hidden' },

  /* Styles applied to an `img` element child, if needed to ensure it covers the tile. */
  imgFullHeight: {
    height: '100%',
    transform: 'translateX(-50%)',
    position: 'relative',
    left: '50%' },

  /* Styles applied to an `img` element child, if needed to ensure it covers the tile. */
  imgFullWidth: {
    width: '100%',
    position: 'relative',
    transform: 'translateY(-50%)',
    top: '50%' } };var



GridListTile = /*#__PURE__*/function (_React$Component) {inherits(GridListTile, _React$Component);
  function GridListTile() {var _this;classCallCheck(this, GridListTile);
    _this = possibleConstructorReturn(this, getPrototypeOf(GridListTile).call(this));defineProperty(assertThisInitialized(assertThisInitialized(_this)), "fit",




















    function () {
      var imgElement = _this.imgElement;

      if (!imgElement || !imgElement.complete) {
        return;
      }

      if (
      imgElement.width / imgElement.height >
      imgElement.parentNode.offsetWidth / imgElement.parentNode.offsetHeight)
      {var _imgElement$classList, _imgElement$classList2;
        (_imgElement$classList = imgElement.classList).remove.apply(_imgElement$classList, toConsumableArray(_this.props.classes.imgFullWidth.split(' ')));
        (_imgElement$classList2 = imgElement.classList).add.apply(_imgElement$classList2, toConsumableArray(_this.props.classes.imgFullHeight.split(' ')));
      } else {var _imgElement$classList3, _imgElement$classList4;
        (_imgElement$classList3 = imgElement.classList).remove.apply(_imgElement$classList3, toConsumableArray(_this.props.classes.imgFullHeight.split(' ')));
        (_imgElement$classList4 = imgElement.classList).add.apply(_imgElement$classList4, toConsumableArray(_this.props.classes.imgFullWidth.split(' ')));
      }

      imgElement.removeEventListener('load', _this.fit);
    });if (typeof window !== 'undefined') {_this.handleResize = debounce_1(function () {_this.fit();}, 166); // Corresponds to 10 frames at 60 Hz.
    }return _this;}createClass(GridListTile, [{ key: "componentDidMount", value: function componentDidMount() {this.ensureImageCover();} }, { key: "componentDidUpdate", value: function componentDidUpdate() {this.ensureImageCover();} }, { key: "componentWillUnmount", value: function componentWillUnmount() {this.handleResize.clear();} }, { key: "ensureImageCover", value: function ensureImageCover()
    {
      if (!this.imgElement) {
        return;
      }

      if (this.imgElement.complete) {
        this.fit();
      } else {
        this.imgElement.addEventListener('load', this.fit);
      }
    } }, { key: "render", value: function render()

    {var _this2 = this;var _this$props =
      this.props,children = _this$props.children,classes = _this$props.classes,className = _this$props.className,cols = _this$props.cols,Component = _this$props.component,rows = _this$props.rows,other = objectWithoutProperties(_this$props, ["children", "classes", "className", "cols", "component", "rows"]);

      return (
        react.createElement(Component, _extends_1({ className: classnames(classes.root, className) }, other),
        react.createElement(EventListener, { target: "window", onResize: this.handleResize }),
        react.createElement("div", { className: classes.tile },
        react.Children.map(children, function (child) {
          if (!react.isValidElement(child)) {
            return null;
          }

          if (child.type === 'img') {
            return react.cloneElement(child, {
              ref: function ref(node) {
                _this2.imgElement = node;
              } });

          }

          return child;
        }))));



    } }]);return GridListTile;}(react.Component);


GridListTile.propTypes = {
  /**
                            * Theoretically you can pass any node as children, but the main use case is to pass an img,
                            * in which case GridListTile takes care of making the image "cover" available space
                            * (similar to `background-size: cover` or to `object-fit: cover`).
                            */
  children: propTypes.node,
  /**
                             * Override or extend the styles applied to the component.
                             * See [CSS API](#css-api) below for more details.
                             */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * Width of the tile in number of grid cells.
                                */
  cols: propTypes.number,
  /**
                           * The component used for the root node.
                           * Either a string to use a DOM element or a component.
                           */
  component: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                         * Height of the tile in number of grid cells.
                                                                                         */
  rows: propTypes.number };


GridListTile.defaultProps = {
  cols: 1,
  component: 'li',
  rows: 1 };


withStyles(styles$N, { name: 'MuiGridListTile' })(GridListTile);

var styles$O = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: {
      position: 'absolute',
      left: 0,
      right: 0,
      height: 48,
      background: 'rgba(0, 0, 0, 0.5)',
      display: 'flex',
      alignItems: 'center',
      fontFamily: theme.typography.fontFamily },

    /* Styles applied to the root element if `titlePosition="bottom"`. */
    titlePositionBottom: {
      bottom: 0 },

    /* Styles applied to the root element if `titlePosition="top"`. */
    titlePositionTop: {
      top: 0 },

    /* Styles applied to the root element if a `subtitle` is provided. */
    rootSubtitle: {
      height: 68 },

    /* Styles applied to the title and subtitle container element. */
    titleWrap: {
      flexGrow: 1,
      marginLeft: theme.mixins.gutters().paddingLeft,
      marginRight: theme.mixins.gutters().paddingRight,
      color: theme.palette.common.white,
      overflow: 'hidden' },

    /* Styles applied to the container element if `actionPosition="left"`. */
    titleWrapActionPosLeft: {
      marginLeft: 0 },

    /* Styles applied to the container element if `actionPosition="right"`. */
    titleWrapActionPosRight: {
      marginRight: 0 },

    /* Styles applied to the title container element. */
    title: {
      fontSize: theme.typography.pxToRem(16),
      lineHeight: '24px',
      textOverflow: 'ellipsis',
      overflow: 'hidden',
      whiteSpace: 'nowrap' },

    /* Styles applied to the subtitle container element. */
    subtitle: {
      fontSize: theme.typography.pxToRem(12),
      lineHeight: 1,
      textOverflow: 'ellipsis',
      overflow: 'hidden',
      whiteSpace: 'nowrap' },

    /* Styles applied to the actionIcon if supplied. */
    actionIcon: {},
    /* Styles applied to the actionIcon if `actionPosition="left"`. */
    actionIconActionPosLeft: {
      order: -1 } };};



function GridListTileBar(props) {var _classNames, _classNames2;var

  actionIcon =







  props.actionIcon,actionPosition = props.actionPosition,classes = props.classes,classNameProp = props.className,subtitle = props.subtitle,title = props.title,titlePosition = props.titlePosition,other = objectWithoutProperties(props, ["actionIcon", "actionPosition", "classes", "className", "subtitle", "title", "titlePosition"]);

  var actionPos = actionIcon && actionPosition;
  var className = classnames(
  classes.root, (_classNames = {}, defineProperty(_classNames,

  classes.titlePositionBottom, titlePosition === 'bottom'), defineProperty(_classNames,
  classes.titlePositionTop, titlePosition === 'top'), defineProperty(_classNames,
  classes.rootSubtitle, subtitle), _classNames),

  classNameProp);


  // Remove the margin between the title / subtitle wrapper, and the Action Icon
  var titleWrapClassName = classnames(classes.titleWrap, (_classNames2 = {}, defineProperty(_classNames2,
  classes.titleWrapActionPosLeft, actionPos === 'left'), defineProperty(_classNames2,
  classes.titleWrapActionPosRight, actionPos === 'right'), _classNames2));


  return (
    react.createElement("div", _extends_1({ className: className }, other),
    react.createElement("div", { className: titleWrapClassName },
    react.createElement("div", { className: classes.title }, title),
    subtitle ? react.createElement("div", { className: classes.subtitle }, subtitle) : null),

    actionIcon ?
    react.createElement("div", {
      className: classnames(classes.actionIcon, defineProperty({},
      classes.actionIconActionPosLeft, actionPos === 'left')) },


    actionIcon) :

    null));


}

GridListTileBar.propTypes = {
  /**
                               * An IconButton element to be used as secondary action target
                               * (primary action target is the tile itself).
                               */
  actionIcon: propTypes.node,
  /**
                               * Position of secondary action IconButton.
                               */
  actionPosition: propTypes.oneOf(['left', 'right']),
  /**
                                                       * Override or extend the styles applied to the component.
                                                       * See [CSS API](#css-api) below for more details.
                                                       */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * String or element serving as subtitle (support text).
                                */
  subtitle: propTypes.node,
  /**
                             * Title to be displayed on tile.
                             */
  title: propTypes.node,
  /**
                          * Position of the title bar.
                          */
  titlePosition: propTypes.oneOf(['top', 'bottom']) };


GridListTileBar.defaultProps = {
  actionPosition: 'right',
  titlePosition: 'bottom' };


withStyles(styles$O, { name: 'MuiGridListTileBar' })(GridListTileBar);

function getScale(value) {
  return "scale(".concat(value, ", ").concat(Math.pow(value, 2), ")");
}

var styles$P = {
  entering: {
    opacity: 1,
    transform: getScale(1) },

  entered: {
    opacity: 1,
    // Use translateZ to scrolling issue on Chrome.
    transform: "".concat(getScale(1), " translateZ(0)") } };



/**
                                                              * The Grow transition is used by the [Tooltip](/demos/tooltips/) and
                                                              * [Popover](/utils/popover/) components.
                                                              * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
                                                              */var
Grow = /*#__PURE__*/function (_React$Component) {inherits(Grow, _React$Component);function Grow() {var _getPrototypeOf2;var _this;classCallCheck(this, Grow);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Grow)).call.apply(_getPrototypeOf2, [this].concat(args)));defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleEnter",




    function (node) {var _this$props =
      _this.props,theme = _this$props.theme,timeout = _this$props.timeout;
      reflow(node); // So the animation always start from the start.
      var _getTransitionProps =
      getTransitionProps(_this.props, {
        mode: 'enter' }),transitionDuration = _getTransitionProps.duration,delay = _getTransitionProps.delay;

      var duration = 0;
      if (timeout === 'auto') {
        duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
        _this.autoTimeout = duration;
      } else {
        duration = transitionDuration;
      }

      node.style.transition = [
      theme.transitions.create('opacity', {
        duration: duration,
        delay: delay }),

      theme.transitions.create('transform', {
        duration: duration * 0.666,
        delay: delay })].

      join(',');

      if (_this.props.onEnter) {
        _this.props.onEnter(node);
      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleExit",

    function (node) {var _this$props2 =
      _this.props,theme = _this$props2.theme,timeout = _this$props2.timeout;
      var duration = 0;var _getTransitionProps2 =

      getTransitionProps(_this.props, {
        mode: 'exit' }),transitionDuration = _getTransitionProps2.duration,delay = _getTransitionProps2.delay;

      if (timeout === 'auto') {
        duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
        _this.autoTimeout = duration;
      } else {
        duration = transitionDuration;
      }

      node.style.transition = [
      theme.transitions.create('opacity', {
        duration: duration,
        delay: delay }),

      theme.transitions.create('transform', {
        duration: duration * 0.666,
        delay: delay || duration * 0.333 })].

      join(',');

      node.style.opacity = '0';
      node.style.transform = getScale(0.75);

      if (_this.props.onExit) {
        _this.props.onExit(node);
      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "addEndListener",

    function (_, next) {
      if (_this.props.timeout === 'auto') {
        _this.timer = setTimeout(next, _this.autoTimeout || 0);
      }
    });return _this;}createClass(Grow, [{ key: "componentWillUnmount", value: function componentWillUnmount() {clearTimeout(this.timer);} }, { key: "render", value: function render()

    {var _this$props3 =
      this.props,children = _this$props3.children,onEnter = _this$props3.onEnter,onExit = _this$props3.onExit,styleProp = _this$props3.style,theme = _this$props3.theme,timeout = _this$props3.timeout,other = objectWithoutProperties(_this$props3, ["children", "onEnter", "onExit", "style", "theme", "timeout"]);

      var style = objectSpread({},
      styleProp,
      react.isValidElement(children) ? children.props.style : {});


      return (
        react.createElement(Transition, _extends_1({
          appear: true,
          onEnter: this.handleEnter,
          onExit: this.handleExit,
          addEndListener: this.addEndListener,
          timeout: timeout === 'auto' ? null : timeout },
        other),

        function (state, childProps) {
          return react.cloneElement(children, objectSpread({
            style: objectSpread({
              opacity: 0,
              transform: getScale(0.75) },
            styles$P[state],
            style) },

          childProps));

        }));


    } }]);return Grow;}(react.Component);


Grow.propTypes = {
  /**
                    * A single child content element.
                    */
  children: propTypes.oneOfType([propTypes.element, propTypes.func]),
  /**
                                                                       * If `true`, show the component; triggers the enter or exit animation.
                                                                       */
  in: propTypes.bool,
  /**
                       * @ignore
                       */
  onEnter: propTypes.func,
  /**
                            * @ignore
                            */
  onExit: propTypes.func,
  /**
                           * @ignore
                           */
  style: propTypes.object,
  /**
                            * @ignore
                            */
  theme: propTypes.object.isRequired,
  /**
                                       * The duration for the transition, in milliseconds.
                                       * You may specify a single timeout for all transitions, or individually with an object.
                                       *
                                       * Set to 'auto' to automatically calculate transition time based on height.
                                       */
  timeout: propTypes.oneOfType([
  propTypes.number,
  propTypes.shape({ enter: propTypes.number, exit: propTypes.number }),
  propTypes.oneOf(['auto'])]) };



Grow.defaultProps = {
  timeout: 'auto' };


Grow.muiSupportAuto = true;

var Grow$1 = withTheme()(Grow);

// By default, returns true if screen width is the same or greater than the given breakpoint.
var isWidthUp = function isWidthUp(breakpoint, width) {var inclusive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  if (inclusive) {
    return keys.indexOf(breakpoint) <= keys.indexOf(width);
  }
  return keys.indexOf(breakpoint) < keys.indexOf(width);
};

// By default, returns true if screen width is the same or less than the given breakpoint.
var isWidthDown = function isWidthDown(breakpoint, width) {var inclusive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  if (inclusive) {
    return keys.indexOf(width) <= keys.indexOf(breakpoint);
  }
  return keys.indexOf(width) < keys.indexOf(breakpoint);
};

var withWidth = function withWidth() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};return function (Component) {var _options$withTheme =





    options.withTheme,withThemeOption = _options$withTheme === void 0 ? false : _options$withTheme,_options$noSSR = options.noSSR,noSSR = _options$noSSR === void 0 ? false : _options$noSSR,initialWidthOption = options.initialWidth,_options$resizeInterv = options.resizeInterval,resizeInterval = _options$resizeInterv === void 0 ? 166 : _options$resizeInterv;var

    WithWidth = /*#__PURE__*/function (_React$Component) {inherits(WithWidth, _React$Component);
      function WithWidth(props) {var _this;classCallCheck(this, WithWidth);
        _this = possibleConstructorReturn(this, getPrototypeOf(WithWidth).call(this, props));

        _this.state = {
          width: noSSR ? _this.getWidth() : undefined };


        if (typeof window !== 'undefined') {
          _this.handleResize = debounce_1(function () {
            var width2 = _this.getWidth();
            if (width2 !== _this.state.width) {
              _this.setState({
                width: width2 });

            }
          }, resizeInterval);
        }return _this;
      }createClass(WithWidth, [{ key: "componentDidMount", value: function componentDidMount()

        {
          var width = this.getWidth();
          if (width !== this.state.width) {
            this.setState({
              width: width });

          }
        } }, { key: "componentWillUnmount", value: function componentWillUnmount()

        {
          this.handleResize.clear();
        } }, { key: "getWidth", value: function getWidth()

        {var innerWidth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.innerWidth;
          var breakpoints = this.props.theme.breakpoints;
          var width = null;

          /**
                             * Start with the slowest value as low end devices often have a small screen.
                             *
                             * innerWidth |xs      sm      md      lg      xl
                             *            |-------|-------|-------|-------|------>
                             * width      |  xs   |  sm   |  md   |  lg   |  xl
                             */
          var index = 1;
          while (width === null && index < keys.length) {
            var currentWidth = keys[index];

            // @media are inclusive, so reproduce the behavior here.
            if (innerWidth < breakpoints.values[currentWidth]) {
              width = keys[index - 1];
              break;
            }

            index += 1;
          }

          width = width || 'xl';
          return width;
        } }, { key: "render", value: function render()

        {var _getThemeProps =
          getThemeProps({
            theme: this.props.theme,
            name: 'MuiWithWidth',
            props: objectSpread({}, this.props) }),initialWidth = _getThemeProps.initialWidth,theme = _getThemeProps.theme,width = _getThemeProps.width,other = objectWithoutProperties(_getThemeProps, ["initialWidth", "theme", "width"]);


          var more = objectSpread({
            width: width || this.state.width || initialWidth || initialWidthOption },
          other);


          // When rendering the component on the server,
          // we have no idea about the client browser screen width.
          // In order to prevent blinks and help the reconciliation of the React tree
          // we are not rendering the child component.
          //
          // An alternative is to use the `initialWidth` property.
          if (more.width === undefined) {
            return null;
          }

          if (withThemeOption) {
            more.theme = theme;
          }

          return (
            react.createElement(react.Fragment, null,
            react.createElement(Component, more),
            react.createElement(EventListener, { target: "window", onResize: this.handleResize })));


        } }]);return WithWidth;}(react.Component);


    WithWidth.propTypes = {
      /**
                             * As `window.innerWidth` is unavailable on the server,
                             * we default to rendering an empty component during the first mount.
                             * In some situation, you might want to use an heuristic to approximate
                             * the screen width of the client browser screen width.
                             *
                             * For instance, you could be using the user-agent or the client-hints.
                             * https://caniuse.com/#search=client%20hint
                             */
      initialWidth: propTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),
      /**
                                                                      * @ignore
                                                                      */
      theme: propTypes.object.isRequired,
      /**
                                           * Bypass the width calculation logic.
                                           */
      width: propTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']) };

    hoistNonReactStatics_cjs(WithWidth, Component);

    return withTheme()(WithWidth);
  };};

/**
                                                 * @ignore - internal component.
                                                 */
function HiddenJs(props) {var
  children = props.children,only = props.only,width = props.width;

  var visible = true;

  // `only` check is faster to get out sooner if used.
  if (only) {
    if (Array.isArray(only)) {
      for (var i = 0; i < only.length; i += 1) {
        var breakpoint = only[i];
        if (width === breakpoint) {
          visible = false;
          break;
        }
      }
    } else if (only && width === only) {
      visible = false;
    }
  }

  // Allow `only` to be combined with other props. If already hidden, no need to check others.
  if (visible) {
    // determine visibility based on the smallest size up
    for (var _i = 0; _i < keys.length; _i += 1) {
      var _breakpoint = keys[_i];
      var breakpointUp = props["".concat(_breakpoint, "Up")];
      var breakpointDown = props["".concat(_breakpoint, "Down")];
      if (
      breakpointUp && isWidthUp(_breakpoint, width) ||
      breakpointDown && isWidthDown(_breakpoint, width))
      {
        visible = false;
        break;
      }
    }
  }

  if (!visible) {
    return null;
  }

  return children;
}

HiddenJs.propTypes = {
  /**
                        * The content of the component.
                        */
  children: propTypes.node,
  /**
                             * @ignore
                             */
  className: propTypes.string,
  /**
                                * Specify which implementation to use.  'js' is the default, 'css' works better for server
                                * side rendering.
                                */
  implementation: propTypes.oneOf(['js', 'css']),
  /**
                                                   * You can use this property when choosing the `js` implementation with server side rendering.
                                                   *
                                                   * As `window.innerWidth` is unavailable on the server,
                                                   * we default to rendering an empty componenent during the first mount.
                                                   * In some situation you might want to use an heristic to approximate
                                                   * the screen width of the client browser screen width.
                                                   *
                                                   * For instance, you could be using the user-agent or the client-hints.
                                                   * https://caniuse.com/#search=client%20hint
                                                   */
  initialWidth: propTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),
  /**
                                                                  * If true, screens this size and down will be hidden.
                                                                  */
  lgDown: propTypes.bool,
  /**
                           * If true, screens this size and up will be hidden.
                           */
  lgUp: propTypes.bool,
  /**
                         * If true, screens this size and down will be hidden.
                         */
  mdDown: propTypes.bool,
  /**
                           * If true, screens this size and up will be hidden.
                           */
  mdUp: propTypes.bool,
  /**
                         * Hide the given breakpoint(s).
                         */
  only: propTypes.oneOfType([
  propTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),
  propTypes.arrayOf(propTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']))]),

  /**
                                                                         * If true, screens this size and down will be hidden.
                                                                         */
  smDown: propTypes.bool,
  /**
                           * If true, screens this size and up will be hidden.
                           */
  smUp: propTypes.bool,
  /**
                         * @ignore
                         * width prop provided by withWidth decorator.
                         */
  width: propTypes.string.isRequired,
  /**
                                       * If true, screens this size and down will be hidden.
                                       */
  xlDown: propTypes.bool,
  /**
                           * If true, screens this size and up will be hidden.
                           */
  xlUp: propTypes.bool,
  /**
                         * If true, screens this size and down will be hidden.
                         */
  xsDown: propTypes.bool,
  /**
                           * If true, screens this size and up will be hidden.
                           */
  xsUp: propTypes.bool };


HiddenJs.propTypes = exactProp(HiddenJs.propTypes);

var HiddenJs$1 = withWidth()(HiddenJs);

var styles$Q = function styles(theme) {
  var hidden = {
    display: 'none' };


  return keys.reduce(function (acc, key) {
    acc["only".concat(capitalize(key))] = defineProperty({},
    theme.breakpoints.only(key), hidden);

    acc["".concat(key, "Up")] = defineProperty({},
    theme.breakpoints.up(key), hidden);

    acc["".concat(key, "Down")] = defineProperty({},
    theme.breakpoints.down(key), hidden);


    return acc;
  }, {});
};

/**
    * @ignore - internal component.
    */
function HiddenCss(props) {var

  children =














  props.children,classes = props.classes,className = props.className,lgDown = props.lgDown,lgUp = props.lgUp,mdDown = props.mdDown,mdUp = props.mdUp,only = props.only,smDown = props.smDown,smUp = props.smUp,xlDown = props.xlDown,xlUp = props.xlUp,xsDown = props.xsDown,xsUp = props.xsUp,other = objectWithoutProperties(props, ["children", "classes", "className", "lgDown", "lgUp", "mdDown", "mdUp", "only", "smDown", "smUp", "xlDown", "xlUp", "xsDown", "xsUp"]);

  warning_1(
  Object.keys(other).length === 0 ||
  Object.keys(other).length === 1 && other.hasOwnProperty('ref'), "Material-UI: unsupported properties received ".concat(
  Object.keys(other).join(
  ', '), " by `<Hidden />`."));



  var classNames = [];

  if (className) {
    classNames.push(className);
  }

  for (var i = 0; i < keys.length; i += 1) {
    var breakpoint = keys[i];
    var breakpointUp = props["".concat(breakpoint, "Up")];
    var breakpointDown = props["".concat(breakpoint, "Down")];

    if (breakpointUp) {
      classNames.push(classes["".concat(breakpoint, "Up")]);
    }
    if (breakpointDown) {
      classNames.push(classes["".concat(breakpoint, "Down")]);
    }
  }

  if (only) {
    var onlyBreakpoints = Array.isArray(only) ? only : [only];
    onlyBreakpoints.forEach(function (breakpoint) {
      classNames.push(classes["only".concat(capitalize(breakpoint))]);
    });
  }

  return react.createElement("div", { className: classNames.join(' ') }, children);
}

HiddenCss.propTypes = {
  /**
                         * The content of the component.
                         */
  children: propTypes.node,
  /**
                             * Override or extend the styles applied to the component.
                             * See [CSS API](#css-api) below for more details.
                             */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * Specify which implementation to use.  'js' is the default, 'css' works better for server
                                * side rendering.
                                */
  implementation: propTypes.oneOf(['js', 'css']),
  /**
                                                   * If true, screens this size and down will be hidden.
                                                   */
  lgDown: propTypes.bool,
  /**
                           * If true, screens this size and up will be hidden.
                           */
  lgUp: propTypes.bool,
  /**
                         * If true, screens this size and down will be hidden.
                         */
  mdDown: propTypes.bool,
  /**
                           * If true, screens this size and up will be hidden.
                           */
  mdUp: propTypes.bool,
  /**
                         * Hide the given breakpoint(s).
                         */
  only: propTypes.oneOfType([
  propTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),
  propTypes.arrayOf(propTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']))]),

  /**
                                                                         * If true, screens this size and down will be hidden.
                                                                         */
  smDown: propTypes.bool,
  /**
                           * If true, screens this size and up will be hidden.
                           */
  smUp: propTypes.bool,
  /**
                         * If true, screens this size and down will be hidden.
                         */
  xlDown: propTypes.bool,
  /**
                           * If true, screens this size and up will be hidden.
                           */
  xlUp: propTypes.bool,
  /**
                         * If true, screens this size and down will be hidden.
                         */
  xsDown: propTypes.bool,
  /**
                           * If true, screens this size and up will be hidden.
                           */
  xsUp: propTypes.bool };


var HiddenCss$1 = withStyles(styles$Q, { name: 'MuiPrivateHiddenCss' })(HiddenCss);

/**
                                      * Responsively hides children based on the selected implementation.
                                      */
function Hidden(props) {var
  implementation = props.implementation,other = objectWithoutProperties(props, ["implementation"]);

  if (implementation === 'js') {
    return react.createElement(HiddenJs$1, other);
  }

  return react.createElement(HiddenCss$1, other);
}

Hidden.propTypes = {
  /**
                      * The content of the component.
                      */
  children: propTypes.node,
  /**
                             * @ignore
                             */
  className: propTypes.string,
  /**
                                * Specify which implementation to use.  'js' is the default, 'css' works better for server
                                * side rendering.
                                */
  implementation: propTypes.oneOf(['js', 'css']),
  /**
                                                   * You can use this property when choosing the `js` implementation with server side rendering.
                                                   *
                                                   * As `window.innerWidth` is unavailable on the server,
                                                   * we default to rendering an empty componenent during the first mount.
                                                   * In some situation you might want to use an heristic to approximate
                                                   * the screen width of the client browser screen width.
                                                   *
                                                   * For instance, you could be using the user-agent or the client-hints.
                                                   * https://caniuse.com/#search=client%20hint
                                                   */
  initialWidth: propTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),
  /**
                                                                  * If true, screens this size and down will be hidden.
                                                                  */
  lgDown: propTypes.bool,
  /**
                           * If true, screens this size and up will be hidden.
                           */
  lgUp: propTypes.bool,
  /**
                         * If true, screens this size and down will be hidden.
                         */
  mdDown: propTypes.bool,
  /**
                           * If true, screens this size and up will be hidden.
                           */
  mdUp: propTypes.bool,
  /**
                         * Hide the given breakpoint(s).
                         */
  only: propTypes.oneOfType([
  propTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),
  propTypes.arrayOf(propTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']))]),

  /**
                                                                         * If true, screens this size and down will be hidden.
                                                                         */
  smDown: propTypes.bool,
  /**
                           * If true, screens this size and up will be hidden.
                           */
  smUp: propTypes.bool,
  /**
                         * If true, screens this size and down will be hidden.
                         */
  xlDown: propTypes.bool,
  /**
                           * If true, screens this size and up will be hidden.
                           */
  xlUp: propTypes.bool,
  /**
                         * If true, screens this size and down will be hidden.
                         */
  xsDown: propTypes.bool,
  /**
                           * If true, screens this size and up will be hidden.
                           */
  xsUp: propTypes.bool };


Hidden.defaultProps = {
  implementation: 'js',
  lgDown: false,
  lgUp: false,
  mdDown: false,
  mdUp: false,
  smDown: false,
  smUp: false,
  xlDown: false,
  xlUp: false,
  xsDown: false,
  xsUp: false };

var styles$R = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: {
      userSelect: 'none',
      fontSize: 24,
      width: '1em',
      height: '1em',
      // Chrome fix for https://bugs.chromium.org/p/chromium/issues/detail?id=820541
      // To remove at some point.
      overflow: 'hidden',
      flexShrink: 0 },

    /* Styles applied to the root element if `color="primary"`. */
    colorPrimary: {
      color: theme.palette.primary.main },

    /* Styles applied to the root element if `color="secondary"`. */
    colorSecondary: {
      color: theme.palette.secondary.main },

    /* Styles applied to the root element if `color="action"`. */
    colorAction: {
      color: theme.palette.action.active },

    /* Styles applied to the root element if `color="error"`. */
    colorError: {
      color: theme.palette.error.main },

    /* Styles applied to the root element if `color="disabled"`. */
    colorDisabled: {
      color: theme.palette.action.disabled },

    fontSizeInherit: {
      fontSize: 'inherit' },

    /* Styles applied to the root element if `fontSize="small"`. */
    fontSizeSmall: {
      fontSize: 20 },

    /* Styles applied to the root element if `fontSize="large"`. */
    fontSizeLarge: {
      fontSize: 36 } };};



function Icon(props) {var _classNames;var
  children = props.children,classes = props.classes,className = props.className,color = props.color,Component = props.component,fontSize = props.fontSize,other = objectWithoutProperties(props, ["children", "classes", "className", "color", "component", "fontSize"]);

  return (
    react.createElement(Component, _extends_1({
      className: classnames(
      'material-icons',
      classes.root, (_classNames = {}, defineProperty(_classNames,

      classes["color".concat(capitalize(color))], color !== 'inherit'), defineProperty(_classNames,
      classes["fontSize".concat(capitalize(fontSize))], fontSize !== 'default'), _classNames),

      className),

      "aria-hidden": "true" },
    other),

    children));


}

Icon.propTypes = {
  /**
                    * The name of the icon font ligature.
                    */
  children: propTypes.node,
  /**
                             * Override or extend the styles applied to the component.
                             * See [CSS API](#css-api) below for more details.
                             */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * The color of the component. It supports those theme colors that make sense for this component.
                                */
  color: propTypes.oneOf(['inherit', 'primary', 'secondary', 'action', 'error', 'disabled']),
  /**
                                                                                               * The component used for the root node.
                                                                                               * Either a string to use a DOM element or a component.
                                                                                               */
  component: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                         * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
                                                                                         */
  fontSize: propTypes.oneOf(['inherit', 'default', 'small', 'large']) };


Icon.defaultProps = {
  color: 'inherit',
  component: 'span',
  fontSize: 'default' };


Icon.muiName = 'Icon';

withStyles(styles$R, { name: 'MuiIcon' })(Icon);

var styles$S = function styles(theme) {
  var light = theme.palette.type === 'light';
  var bottomLineColor = light ? 'rgba(0, 0, 0, 0.42)' : 'rgba(255, 255, 255, 0.7)';

  return {
    /* Styles applied to the root element. */
    root: {
      position: 'relative' },

    /* Styles applied to the root element if the component is a descendant of `FormControl`. */
    formControl: {
      'label + &': {
        marginTop: 16 } },


    /* Styles applied to the root element if the component is focused. */
    focused: {},
    /* Styles applied to the root element if `disabled={true}`. */
    disabled: {},
    /* Styles applied to the root element if `disableUnderline={false}`. */
    underline: {
      '&:after': {
        borderBottom: "2px solid ".concat(theme.palette.primary[light ? 'dark' : 'light']),
        left: 0,
        bottom: 0,
        // Doing the other way around crash on IE 11 "''" https://github.com/cssinjs/jss/issues/242
        content: '""',
        position: 'absolute',
        right: 0,
        transform: 'scaleX(0)',
        transition: theme.transitions.create('transform', {
          duration: theme.transitions.duration.shorter,
          easing: theme.transitions.easing.easeOut }),

        pointerEvents: 'none' // Transparent to the hover style.
      },
      '&$focused:after': {
        transform: 'scaleX(1)' },

      '&$error:after': {
        borderBottomColor: theme.palette.error.main,
        transform: 'scaleX(1)' // error is always underlined in red
      },
      '&:before': {
        borderBottom: "1px solid ".concat(bottomLineColor),
        left: 0,
        bottom: 0,
        // Doing the other way around crash on IE 11 "''" https://github.com/cssinjs/jss/issues/242
        content: '"\\00a0"',
        position: 'absolute',
        right: 0,
        transition: theme.transitions.create('border-bottom-color', {
          duration: theme.transitions.duration.shorter }),

        pointerEvents: 'none' // Transparent to the hover style.
      },
      '&:hover:not($disabled):not($focused):not($error):before': {
        borderBottom: "2px solid ".concat(theme.palette.text.primary),
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          borderBottom: "1px solid ".concat(bottomLineColor) } },


      '&$disabled:before': {
        borderBottom: "1px dotted ".concat(bottomLineColor) } },


    /* Styles applied to the root element if `error={true}`. */
    error: {},
    /* Styles applied to the root element if `multiline={true}`. */
    multiline: {},
    /* Styles applied to the root element if `fullWidth={true}`. */
    fullWidth: {},
    /* Styles applied to the `input` element. */
    input: {},
    /* Styles applied to the `input` element if `margin="dense"`. */
    inputMarginDense: {},
    /* Styles applied to the `input` element if `multiline={true}`. */
    inputMultiline: {},
    /* Styles applied to the `input` element if `type` is not "text"`. */
    inputType: {},
    /* Styles applied to the `input` element if `type="search"`. */
    inputTypeSearch: {} };

};

function Input(props) {var
  disableUnderline = props.disableUnderline,classes = props.classes,other = objectWithoutProperties(props, ["disableUnderline", "classes"]);

  return (
    react.createElement(InputBase$1, _extends_1({
      classes: objectSpread({},
      classes, {
        root: classnames(classes.root, defineProperty({},
        classes.underline, !disableUnderline)),

        underline: null }) },

    other)));


}

Input.propTypes = {
  /**
                     * This property helps users to fill forms faster, especially on mobile devices.
                     * The name can be confusing, as it's more like an autofill.
                     * You can learn more about it here:
                     * https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill
                     */
  autoComplete: propTypes.string,
  /**
                                   * If `true`, the input will be focused during the first mount.
                                   */
  autoFocus: propTypes.bool,
  /**
                              * Override or extend the styles applied to the component.
                              * See [CSS API](#css-api) below for more details.
                              */
  classes: propTypes.object.isRequired,
  /**
                                         * The CSS class name of the wrapper element.
                                         */
  className: propTypes.string,
  /**
                                * The default input value, useful when not controlling the component.
                                */
  defaultValue: propTypes.oneOfType([
  propTypes.string,
  propTypes.number,
  propTypes.bool,
  propTypes.object,
  propTypes.arrayOf(
  propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.bool, propTypes.object]))]),


  /**
                                                                                                   * If `true`, the input will be disabled.
                                                                                                   */
  disabled: propTypes.bool,
  /**
                             * If `true`, the input will not have an underline.
                             */
  disableUnderline: propTypes.bool,
  /**
                                     * End `InputAdornment` for this component.
                                     */
  endAdornment: propTypes.node,
  /**
                                 * If `true`, the input will indicate an error. This is normally obtained via context from
                                 * FormControl.
                                 */
  error: propTypes.bool,
  /**
                          * If `true`, the input will take up the full width of its container.
                          */
  fullWidth: propTypes.bool,
  /**
                              * The id of the `input` element.
                              */
  id: propTypes.string,
  /**
                         * The component used for the native input.
                         * Either a string to use a DOM element or a component.
                         */
  inputComponent: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                              * Attributes applied to the `input` element.
                                                                                              */
  inputProps: propTypes.object,
  /**
                                 * Use that property to pass a ref callback to the native input component.
                                 */
  inputRef: propTypes.oneOfType([propTypes.func, propTypes.object]),
  /**
                                                                      * If `dense`, will adjust vertical spacing. This is normally obtained via context from
                                                                      * FormControl.
                                                                      */
  margin: propTypes.oneOf(['dense', 'none']),
  /**
                                               * If `true`, a textarea element will be rendered.
                                               */
  multiline: propTypes.bool,
  /**
                              * Name attribute of the `input` element.
                              */
  name: propTypes.string,
  /**
                           * Callback fired when the value is changed.
                           *
                           * @param {object} event The event source of the callback.
                           * You can pull out the new value by accessing `event.target.value`.
                           */
  onChange: propTypes.func,
  /**
                             * The short hint displayed in the input before the user enters a value.
                             */
  placeholder: propTypes.string,
  /**
                                  * It prevents the user from changing the value of the field
                                  * (not from interacting with the field).
                                  */
  readOnly: propTypes.bool,
  /**
                             * If `true`, the input will be required.
                             */
  required: propTypes.bool,
  /**
                             * Number of rows to display when multiline option is set to true.
                             */
  rows: propTypes.oneOfType([propTypes.string, propTypes.number]),
  /**
                                                                    * Maximum number of rows to display when multiline option is set to true.
                                                                    */
  rowsMax: propTypes.oneOfType([propTypes.string, propTypes.number]),
  /**
                                                                       * Start `InputAdornment` for this component.
                                                                       */
  startAdornment: propTypes.node,
  /**
                                   * Type of the input element. It should be a valid HTML5 input type.
                                   */
  type: propTypes.string,
  /**
                           * The input value, required for a controlled component.
                           */
  value: propTypes.oneOfType([
  propTypes.string,
  propTypes.number,
  propTypes.bool,
  propTypes.object,
  propTypes.arrayOf(
  propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.bool, propTypes.object]))]) };




InputBase$1.defaultProps = {
  fullWidth: false,
  inputComponent: 'input',
  multiline: false,
  type: 'text' };


Input.muiName = 'Input';

var Input$1 = withStyles(styles$S, { name: 'MuiInput' })(Input);

var styles$T = {
  /* Styles applied to the root element. */
  root: {
    display: 'flex',
    height: '0.01em', // Fix IE 11 flexbox alignment. To remove at some point.
    maxHeight: '2em',
    alignItems: 'center' },

  /* Styles applied to the root element if `variant="filled"` */
  filled: {
    '&$positionStart': {
      marginTop: 16 } },


  /* Styles applied to the root element if `position="start"`. */
  positionStart: {
    marginRight: 8 },

  /* Styles applied to the root element if `position="end"`. */
  positionEnd: {
    marginLeft: 8 } };



function InputAdornment(props) {var _classNames;var

  children =







  props.children,Component = props.component,classes = props.classes,className = props.className,disableTypography = props.disableTypography,position = props.position,variant = props.variant,other = objectWithoutProperties(props, ["children", "component", "classes", "className", "disableTypography", "position", "variant"]);

  return (
    react.createElement(Component, _extends_1({
      className: classnames(
      classes.root, (_classNames = {}, defineProperty(_classNames,

      classes.filled, variant === 'filled'), defineProperty(_classNames,
      classes.positionStart, position === 'start'), defineProperty(_classNames,
      classes.positionEnd, position === 'end'), _classNames),

      className) },

    other),

    typeof children === 'string' && !disableTypography ?
    react.createElement(Typography$1, { color: "textSecondary" }, children) :

    children));



}

InputAdornment.propTypes = {
  /**
                              * The content of the component, normally an `IconButton` or string.
                              */
  children: propTypes.node.isRequired,
  /**
                                        * Override or extend the styles applied to the component.
                                        * See [CSS API](#css-api) below for more details.
                                        */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * The component used for the root node.
                                * Either a string to use a DOM element or a component.
                                */
  component: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                         * If children is a string then disable wrapping in a Typography component.
                                                                                         */
  disableTypography: propTypes.bool,
  /**
                                      * The position this adornment should appear relative to the `Input`.
                                      */
  position: propTypes.oneOf(['start', 'end']),
  /**
                                                * The variant to use.
                                                */
  variant: propTypes.oneOf(['standard', 'outlined', 'filled']) };


InputAdornment.defaultProps = {
  component: 'div',
  disableTypography: false };


withStyles(styles$T, { name: 'MuiInputAdornment' })(InputAdornment);

var styles$U = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: {
      transformOrigin: 'top left' },

    /* Styles applied to the root element if `focused={true}`. */
    focused: {},
    /* Styles applied to the root element if `disabled={true}`. */
    disabled: {},
    /* Styles applied to the root element if `error={true}`. */
    error: {},
    /* Styles applied to the root element if `required={true}`. */
    required: {},
    /* Styles applied to the root element if the component is a descendant of `FormControl`. */
    formControl: {
      position: 'absolute',
      left: 0,
      top: 0,
      // slight alteration to spec spacing to match visual spec result
      transform: 'translate(0, 24px) scale(1)' },

    /* Styles applied to the root element if `margin="dense"`. */
    marginDense: {
      // Compensation for the `Input.inputDense` style.
      transform: 'translate(0, 21px) scale(1)' },

    /* Styles applied to the `input` element if `shrink={true}`. */
    shrink: {
      transform: 'translate(0, 1.5px) scale(0.75)',
      transformOrigin: 'top left' },

    /* Styles applied to the `input` element if `disableAnimation={false}`. */
    animated: {
      transition: theme.transitions.create(['color', 'transform'], {
        duration: theme.transitions.duration.shorter,
        easing: theme.transitions.easing.easeOut }) },


    /* Styles applied to the root element if `variant="filled"`. */
    filled: {
      // Chrome's autofill feature gives the input field a yellow background.
      // Since the input field is behind the label in the HTML tree,
      // the input field is drawn last and hides the label with an opaque background color.
      // zIndex: 1 will raise the label above opaque background-colors of input.
      zIndex: 1,
      pointerEvents: 'none',
      transform: 'translate(12px, 22px) scale(1)',
      '&$marginDense': {
        transform: 'translate(12px, 19px) scale(1)' },

      '&$shrink': {
        transform: 'translate(12px, 10px) scale(0.75)',
        '&$marginDense': {
          transform: 'translate(12px, 7px) scale(0.75)' } } },



    /* Styles applied to the root element if `variant="outlined"`. */
    outlined: {
      // see comment above on filled.zIndex
      zIndex: 1,
      pointerEvents: 'none',
      transform: 'translate(14px, 22px) scale(1)',
      '&$marginDense': {
        transform: 'translate(14px, 17.5px) scale(1)' },

      '&$shrink': {
        transform: 'translate(14px, -6px) scale(0.75)' } } };};




function InputLabel(props) {var _classNames;var

  children =









  props.children,classes = props.classes,classNameProp = props.className,disableAnimation = props.disableAnimation,FormLabelClasses = props.FormLabelClasses,margin = props.margin,muiFormControl = props.muiFormControl,shrinkProp = props.shrink,variant = props.variant,other = objectWithoutProperties(props, ["children", "classes", "className", "disableAnimation", "FormLabelClasses", "margin", "muiFormControl", "shrink", "variant"]);

  var shrink = shrinkProp;
  if (typeof shrink === 'undefined' && muiFormControl) {
    shrink = muiFormControl.filled || muiFormControl.focused || muiFormControl.adornedStart;
  }

  var fcs = formControlState({
    props: props,
    muiFormControl: muiFormControl,
    states: ['margin', 'variant'] });


  var className = classnames(
  classes.root, (_classNames = {}, defineProperty(_classNames,

  classes.formControl, muiFormControl), defineProperty(_classNames,
  classes.animated, !disableAnimation), defineProperty(_classNames,
  classes.shrink, shrink), defineProperty(_classNames,
  classes.marginDense, fcs.margin === 'dense'), defineProperty(_classNames,
  classes.filled, fcs.variant === 'filled'), defineProperty(_classNames,
  classes.outlined, fcs.variant === 'outlined'), _classNames),

  classNameProp);


  return (
    react.createElement(FormLabel$1, _extends_1({
      "data-shrink": shrink,
      className: className,
      classes: objectSpread({
        focused: classes.focused,
        disabled: classes.disabled,
        error: classes.error,
        required: classes.required },
      FormLabelClasses) },

    other),

    children));


}

InputLabel.propTypes = {
  /**
                          * The contents of the `InputLabel`.
                          */
  children: propTypes.node,
  /**
                             * Override or extend the styles applied to the component.
                             * See [CSS API](#css-api) below for more details.
                             */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * If `true`, the transition animation is disabled.
                                */
  disableAnimation: propTypes.bool,
  /**
                                     * If `true`, apply disabled class.
                                     */
  disabled: propTypes.bool,
  /**
                             * If `true`, the label will be displayed in an error state.
                             */
  error: propTypes.bool,
  /**
                          * If `true`, the input of this label is focused.
                          */
  focused: propTypes.bool,
  /**
                            * `classes` property applied to the [`FormLabel`](/api/form-label/) element.
                            */
  FormLabelClasses: propTypes.object,
  /**
                                       * If `dense`, will adjust vertical spacing. This is normally obtained via context from
                                       * FormControl.
                                       */
  margin: propTypes.oneOf(['dense']),
  /**
                                       * @ignore
                                       */
  muiFormControl: propTypes.object,
  /**
                                     * if `true`, the label will indicate that the input is required.
                                     */
  required: propTypes.bool,
  /**
                             * If `true`, the label is shrunk.
                             */
  shrink: propTypes.bool,
  /**
                           * The variant to use.
                           */
  variant: propTypes.oneOf(['standard', 'outlined', 'filled']) };


InputLabel.defaultProps = {
  disableAnimation: false };


var InputLabel$1 = withStyles(styles$U, { name: 'MuiInputLabel' })(withFormControlContext(InputLabel));

var TRANSITION_DURATION = 4; // seconds

var styles$V = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: {
      position: 'relative',
      overflow: 'hidden',
      height: 5 },

    /* Styles applied to the root & bar2 element if `color="primary"`; bar2 if `variant-"buffer"`. */
    colorPrimary: {
      backgroundColor: lighten(theme.palette.primary.light, 0.6) },

    // eslint-disable-next-line max-len
    /* Styles applied to the root & bar2 elements if `color="secondary"`; bar2 if `variant="buffer"`. */
    colorSecondary: {
      backgroundColor: lighten(theme.palette.secondary.light, 0.4) },

    /* Styles applied to the root element if `variant="buffer"`. */
    buffer: {
      backgroundColor: 'transparent' },

    /* Styles applied to the root element if `variant="query"`. */
    query: {
      transform: 'rotate(180deg)' },

    /* Styles applied to the additional bar element if `variant="buffer"`. */
    dashed: {
      position: 'absolute',
      marginTop: 0,
      height: '100%',
      width: '100%',
      animation: 'buffer 3s infinite linear' },

    /* Styles applied to the additional bar element if `variant="buffer"` & `color="primary"`. */
    dashedColorPrimary: {
      backgroundImage: "radial-gradient(".concat(lighten(theme.palette.primary.light, 0.6), " 0%, ").concat(lighten(
      theme.palette.primary.light,
      0.6), " 16%, transparent 42%)"),

      backgroundSize: '10px 10px',
      backgroundPosition: '0px -23px' },

    /* Styles applied to the additional bar element if `variant="buffer"` & `color="secondary"`. */
    dashedColorSecondary: {
      backgroundImage: "radial-gradient(".concat(lighten(theme.palette.secondary.light, 0.4), " 0%, ").concat(lighten(
      theme.palette.secondary.light,
      0.6), " 16%, transparent 42%)"),

      backgroundSize: '10px 10px',
      backgroundPosition: '0px -23px' },

    /* Styles applied to the layered bar1 & bar2 elements. */
    bar: {
      width: '100%',
      position: 'absolute',
      left: 0,
      bottom: 0,
      top: 0,
      transition: 'transform 0.2s linear',
      transformOrigin: 'left' },

    /* Styles applied to the bar elements if `color="primary"`; bar2 if `variant` not "buffer". */
    barColorPrimary: {
      backgroundColor: theme.palette.primary.main },

    /* Styles applied to the bar elements if `color="secondary"`; bar2 if `variant` not "buffer". */
    barColorSecondary: {
      backgroundColor: theme.palette.secondary.main },

    /* Styles applied to the bar1 element if `variant="indeterminate or query"`. */
    bar1Indeterminate: {
      width: 'auto',
      willChange: 'left, right',
      animation: 'mui-indeterminate1 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite' },

    /* Styles applied to the bar1 element if `variant="determinate"`. */
    bar1Determinate: {
      willChange: 'transform',
      transition: "transform .".concat(TRANSITION_DURATION, "s linear") },

    /* Styles applied to the bar1 element if `variant="buffer"`. */
    bar1Buffer: {
      zIndex: 1,
      transition: "transform .".concat(TRANSITION_DURATION, "s linear") },

    /* Styles applied to the bar2 element if `variant="indeterminate or query"`. */
    bar2Indeterminate: {
      width: 'auto',
      willChange: 'left, right',
      animation: 'mui-indeterminate2 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) infinite',
      animationDelay: '1.15s' },

    /* Styles applied to the bar2 element if `variant="determinate"`. */
    bar2Determinate: {},
    /* Styles applied to the bar2 element if `variant="buffer"`. */
    bar2Buffer: {
      transition: "transform .".concat(TRANSITION_DURATION, "s linear") },

    // Legends:
    // || represents the viewport
    // -  represents a light background
    // x  represents a dark background
    '@keyframes mui-indeterminate1': {
      //  |-----|---x-||-----||-----|
      '0%': {
        left: '-35%',
        right: '100%' },

      //  |-----|-----||-----||xxxx-|
      '60%': {
        left: '100%',
        right: '-90%' },

      '100%': {
        left: '100%',
        right: '-90%' } },


    '@keyframes mui-indeterminate2': {
      //  |xxxxx|xxxxx||-----||-----|
      '0%': {
        left: '-200%',
        right: '100%' },

      //  |-----|-----||-----||-x----|
      '60%': {
        left: '107%',
        right: '-8%' },

      '100%': {
        left: '107%',
        right: '-8%' } },


    '@keyframes buffer': {
      '0%': {
        opacity: 1,
        backgroundPosition: '0px -23px' },

      '50%': {
        opacity: 0,
        backgroundPosition: '0px -23px' },

      '100%': {
        opacity: 1,
        backgroundPosition: '-200px -23px' } } };};




/**
                                                     * ## ARIA
                                                     *
                                                     * If the progress bar is describing the loading progress of a particular region of a page,
                                                     * you should use `aria-describedby` to point to the progress bar, and set the `aria-busy`
                                                     * attribute to `true` on that region until it has finished loading.
                                                     */
function LinearProgress(props) {var _classNames, _classNames2, _classNames3, _classNames4;var
  classes = props.classes,classNameProp = props.className,color = props.color,value = props.value,valueBuffer = props.valueBuffer,variant = props.variant,other = objectWithoutProperties(props, ["classes", "className", "color", "value", "valueBuffer", "variant"]);

  var className = classnames(
  classes.root, (_classNames = {}, defineProperty(_classNames,

  classes.colorPrimary, color === 'primary'), defineProperty(_classNames,
  classes.colorSecondary, color === 'secondary'), defineProperty(_classNames,
  classes.buffer, variant === 'buffer'), defineProperty(_classNames,
  classes.query, variant === 'query'), _classNames),

  classNameProp);

  var dashedClass = classnames(classes.dashed, (_classNames2 = {}, defineProperty(_classNames2,
  classes.dashedColorPrimary, color === 'primary'), defineProperty(_classNames2,
  classes.dashedColorSecondary, color === 'secondary'), _classNames2));

  var bar1ClassName = classnames(classes.bar, (_classNames3 = {}, defineProperty(_classNames3,
  classes.barColorPrimary, color === 'primary'), defineProperty(_classNames3,
  classes.barColorSecondary, color === 'secondary'), defineProperty(_classNames3,
  classes.bar1Indeterminate, variant === 'indeterminate' || variant === 'query'), defineProperty(_classNames3,
  classes.bar1Determinate, variant === 'determinate'), defineProperty(_classNames3,
  classes.bar1Buffer, variant === 'buffer'), _classNames3));

  var bar2ClassName = classnames(classes.bar, (_classNames4 = {}, defineProperty(_classNames4,
  classes.barColorPrimary, color === 'primary' && variant !== 'buffer'), defineProperty(_classNames4,
  classes.colorPrimary, color === 'primary' && variant === 'buffer'), defineProperty(_classNames4,
  classes.barColorSecondary, color === 'secondary' && variant !== 'buffer'), defineProperty(_classNames4,
  classes.colorSecondary, color === 'secondary' && variant === 'buffer'), defineProperty(_classNames4,
  classes.bar2Indeterminate, variant === 'indeterminate' || variant === 'query'), defineProperty(_classNames4,
  classes.bar2Determinate, variant === 'determinate'), defineProperty(_classNames4,
  classes.bar2Buffer, variant === 'buffer'), _classNames4));

  var rootProps = {};
  var inlineStyles = { bar1: {}, bar2: {} };

  if (variant === 'determinate' || variant === 'buffer') {
    if (value !== undefined) {
      rootProps['aria-valuenow'] = Math.round(value);
      inlineStyles.bar1.transform = "scaleX(".concat(value / 100, ")");
    } else {
      warning_1(
      false,
      'Material-UI: you need to provide a value property ' +
      'when using the determinate or buffer variant of LinearProgress .');

    }
  }
  if (variant === 'buffer') {
    if (valueBuffer !== undefined) {
      inlineStyles.bar2.transform = "scaleX(".concat((valueBuffer || 0) / 100, ")");
    } else {
      warning_1(
      false,
      'Material-UI: you need to provide a valueBuffer property ' +
      'when using the buffer variant of LinearProgress.');

    }
  }

  return (
    react.createElement("div", _extends_1({ className: className, role: "progressbar" }, rootProps, other),
    variant === 'buffer' ? react.createElement("div", { className: dashedClass }) : null,
    react.createElement("div", { className: bar1ClassName, style: inlineStyles.bar1 }),
    variant === 'determinate' ? null :
    react.createElement("div", { className: bar2ClassName, style: inlineStyles.bar2 })));



}

LinearProgress.propTypes = {
  /**
                              * Override or extend the styles applied to the component.
                              * See [CSS API](#css-api) below for more details.
                              */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * The color of the component. It supports those theme colors that make sense for this component.
                                */
  color: propTypes.oneOf(['primary', 'secondary']),
  /**
                                                     * The value of the progress indicator for the determinate and buffer variants.
                                                     * Value between 0 and 100.
                                                     */
  value: propTypes.number,
  /**
                            * The value for the buffer variant.
                            * Value between 0 and 100.
                            */
  valueBuffer: propTypes.number,
  /**
                                  * The variant to use.
                                  * Use indeterminate or query when there is no progress value.
                                  */
  variant: propTypes.oneOf(['determinate', 'indeterminate', 'buffer', 'query']) };


LinearProgress.defaultProps = {
  color: 'primary',
  variant: 'indeterminate' };


var LinearProgress$1 = withStyles(styles$V, { name: 'MuiLinearProgress' })(LinearProgress);

/**
                            * @ignore - internal component.
                            */
var ListContext = react.createContext({});

var styles$W = {
  /* Styles applied to the root element. */
  root: {
    listStyle: 'none',
    margin: 0,
    padding: 0,
    position: 'relative' },

  /* Styles applied to the root element if `disablePadding={false}`. */
  padding: {
    paddingTop: 8,
    paddingBottom: 8 },

  /* Styles applied to the root element if `dense={true}` & `disablePadding={false}`. */
  dense: {
    paddingTop: 4,
    paddingBottom: 4 },

  /* Styles applied to the root element if a `subheader` is provided. */
  subheader: {
    paddingTop: 0 } };



function List(props) {var _classNames;var

  children =







  props.children,classes = props.classes,className = props.className,Component = props.component,dense = props.dense,disablePadding = props.disablePadding,subheader = props.subheader,other = objectWithoutProperties(props, ["children", "classes", "className", "component", "dense", "disablePadding", "subheader"]);

  return (
    react.createElement(Component, _extends_1({
      className: classnames(
      classes.root, (_classNames = {}, defineProperty(_classNames,

      classes.dense, dense && !disablePadding), defineProperty(_classNames,
      classes.padding, !disablePadding), defineProperty(_classNames,
      classes.subheader, subheader), _classNames),

      className) },

    other),

    react.createElement(ListContext.Provider, { value: { dense: dense } },
    subheader,
    children)));



}

List.propTypes = {
  /**
                    * The content of the component.
                    */
  children: propTypes.node,
  /**
                             * Override or extend the styles applied to the component.
                             * See [CSS API](#css-api) below for more details.
                             */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * The component used for the root node.
                                * Either a string to use a DOM element or a component.
                                */
  component: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                         * If `true`, compact vertical padding designed for keyboard and mouse input will be used for
                                                                                         * the list and list items. The property is available to descendant components as the
                                                                                         * `dense` context.
                                                                                         */
  dense: propTypes.bool,
  /**
                          * If `true`, vertical padding will be removed from the list.
                          */
  disablePadding: propTypes.bool,
  /**
                                   * The content of the subheader, normally `ListSubheader`.
                                   */
  subheader: propTypes.node };


List.defaultProps = {
  component: 'ul',
  dense: false,
  disablePadding: false };


var List$1 = withStyles(styles$W, { name: 'MuiList' })(List);

/**
                                                * @ignore - internal component.
                                                *
                                                * Consumes a context and passes that context merged with its props.
                                                */
function MergeListContext(props) {var
  alignItems = props.alignItems,children = props.children,dense = props.dense;
  return (
    react.createElement(ListContext.Consumer, null,
    function (context) {
      var childContext = {
        dense: dense || context.dense || false,
        alignItems: alignItems };


      return (
        react.createElement(ListContext.Provider, { value: childContext }, children(childContext)));

    }));


}

MergeListContext.propTypes = {
  alignItems: propTypes.oneOf(['flex-start', 'center']).isRequired,
  children: propTypes.func.isRequired,
  dense: propTypes.bool.isRequired };

var styles$X = function styles(theme) {return {
    /* Styles applied to the (normally root) `component` element. May be wrapped by a `container`. */
    root: {
      display: 'flex',
      justifyContent: 'flex-start',
      alignItems: 'center',
      position: 'relative',
      textDecoration: 'none',
      width: '100%',
      boxSizing: 'border-box',
      textAlign: 'left',
      paddingTop: 11, // To use 10px in v4.0.0
      paddingBottom: 11, // To use 10px in v4.0.0
      '&$selected, &$selected:hover': {
        backgroundColor: theme.palette.action.selected } },


    /* Styles applied to the `container` element if `children` includes `ListItemSecondaryAction`. */
    container: {
      position: 'relative' },

    // TODO: Sanity check this - why is focusVisibleClassName prop apparently applied to a div?
    /* Styles applied to the `component`'s `focusVisibleClassName` property if `button={true}`. */
    focusVisible: {
      backgroundColor: theme.palette.action.hover },

    /* Legacy styles applied to the root element. Use `root` instead. */
    default: {},
    /* Styles applied to the `component` element if `dense={true}` or `children` includes `Avatar`. */
    dense: {
      paddingTop: 8,
      paddingBottom: 8 },

    /* Styles applied to the `component` element if `alignItems="flex-start"`. */
    alignItemsFlexStart: {
      alignItems: 'flex-start' },

    /* Styles applied to the inner `component` element if `disabled={true}`. */
    disabled: {
      opacity: 0.5 },

    /* Styles applied to the inner `component` element if `divider={true}`. */
    divider: {
      borderBottom: "1px solid ".concat(theme.palette.divider),
      backgroundClip: 'padding-box' },

    /* Styles applied to the inner `component` element if `disableGutters={false}`. */
    gutters: theme.mixins.gutters(),
    /* Styles applied to the inner `component` element if `button={true}`. */
    button: {
      transition: theme.transitions.create('background-color', {
        duration: theme.transitions.duration.shortest }),

      '&:hover': {
        textDecoration: 'none',
        backgroundColor: theme.palette.action.hover,
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          backgroundColor: 'transparent' } } },



    /* Styles applied to the `component` element if `children` includes `ListItemSecondaryAction`. */
    secondaryAction: {
      // Add some space to avoid collision as `ListItemSecondaryAction`
      // is absolutely positionned.
      paddingRight: 32 },

    /* Styles applied to the root element if `selected={true}`. */
    selected: {} };};


function ListItem(props) {var

  alignItems =














  props.alignItems,button = props.button,childrenProp = props.children,classes = props.classes,classNameProp = props.className,componentProp = props.component,ContainerComponent = props.ContainerComponent,_props$ContainerProps = props.ContainerProps;_props$ContainerProps = _props$ContainerProps === void 0 ? {} : _props$ContainerProps;var ContainerClassName = _props$ContainerProps.className,ContainerProps = objectWithoutProperties(_props$ContainerProps, ["className"]),denseProp = props.dense,disabled = props.disabled,disableGutters = props.disableGutters,divider = props.divider,focusVisibleClassName = props.focusVisibleClassName,selected = props.selected,other = objectWithoutProperties(props, ["alignItems", "button", "children", "classes", "className", "component", "ContainerComponent", "ContainerProps", "dense", "disabled", "disableGutters", "divider", "focusVisibleClassName", "selected"]);

  return (
    react.createElement(MergeListContext, { dense: denseProp, alignItems: alignItems },
    function (_ref) {var _classNames;var dense = _ref.dense;
      var children = react.Children.toArray(childrenProp);
      var hasAvatar = children.some(function (value) {return isMuiElement(value, ['ListItemAvatar']);});
      var hasSecondaryAction =
      children.length &&
      isMuiElement(children[children.length - 1], ['ListItemSecondaryAction']);

      var className = classnames(
      classes.root,
      classes.default, (_classNames = {}, defineProperty(_classNames,

      classes.dense, dense || hasAvatar), defineProperty(_classNames,
      classes.gutters, !disableGutters), defineProperty(_classNames,
      classes.divider, divider), defineProperty(_classNames,
      classes.disabled, disabled), defineProperty(_classNames,
      classes.button, button), defineProperty(_classNames,
      classes.alignItemsFlexStart, alignItems === 'flex-start'), defineProperty(_classNames,
      classes.secondaryAction, hasSecondaryAction), defineProperty(_classNames,
      classes.selected, selected), _classNames),

      classNameProp);


      var componentProps = objectSpread({ className: className, disabled: disabled }, other);
      var Component = componentProp || 'li';

      if (button) {
        componentProps.component = componentProp || 'div';
        componentProps.focusVisibleClassName = classnames(
        classes.focusVisible,
        focusVisibleClassName);

        Component = ButtonBase$1;
      }

      if (hasSecondaryAction) {
        // Use div by default.
        Component = !componentProps.component && !componentProp ? 'div' : Component;

        // Avoid nesting of li > li.
        if (ContainerComponent === 'li') {
          if (Component === 'li') {
            Component = 'div';
          } else if (componentProps.component === 'li') {
            componentProps.component = 'div';
          }
        }

        return (
          react.createElement(ContainerComponent, _extends_1({
            className: classnames(classes.container, ContainerClassName) },
          ContainerProps),

          react.createElement(Component, componentProps, children),
          children.pop()));


      }

      return react.createElement(Component, componentProps, children);
    }));


}

ListItem.propTypes = {
  /**
                        * Defines the `align-items` style property.
                        */
  alignItems: propTypes.oneOf(['flex-start', 'center']),
  /**
                                                          * If `true`, the list item will be a button (using `ButtonBase`).
                                                          */
  button: propTypes.bool,
  /**
                           * The content of the component.
                           */
  children: propTypes.node,
  /**
                             * Override or extend the styles applied to the component.
                             * See [CSS API](#css-api) below for more details.
                             */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * The component used for the root node.
                                * Either a string to use a DOM element or a component.
                                * By default, it's a `li` when `button` is `false` and a `div` when `button` is `true`.
                                */
  component: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                         * The container component used when a `ListItemSecondaryAction` is rendered.
                                                                                         */
  ContainerComponent: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                                  * Properties applied to the container element when the component
                                                                                                  * is used to display a `ListItemSecondaryAction`.
                                                                                                  */
  ContainerProps: propTypes.object,
  /**
                                     * If `true`, compact vertical padding designed for keyboard and mouse input will be used.
                                     */
  dense: propTypes.bool,
  /**
                          * If `true`, the list item will be disabled.
                          */
  disabled: propTypes.bool,
  /**
                             * If `true`, the left and right padding is removed.
                             */
  disableGutters: propTypes.bool,
  /**
                                   * If `true`, a 1px light border is added to the bottom of the list item.
                                   */
  divider: propTypes.bool,
  /**
                            * @ignore
                            */
  focusVisibleClassName: propTypes.string,
  /**
                                            * Use to apply selected styling.
                                            */
  selected: propTypes.bool };


ListItem.defaultProps = {
  alignItems: 'center',
  button: false,
  ContainerComponent: 'li',
  dense: false,
  disabled: false,
  disableGutters: false,
  divider: false,
  selected: false };


var ListItem$1 = withStyles(styles$X, { name: 'MuiListItem' })(ListItem);

var styles$Y = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: {
      width: 36,
      height: 36,
      fontSize: theme.typography.pxToRem(18),
      marginRight: 4 },

    /* Styles applied to the root element when. */
    alignItemsFlexStart: {
      marginTop: 4 },

    /* Styles applied to the children – typically the `Avatar` component. */
    icon: {
      width: 20,
      height: 20,
      fontSize: theme.typography.pxToRem(20) } };};



/**
                                                     * This is a simple wrapper to apply the `dense`
                                                     * and `align-items="flex-start"` mode styles to `Avatar`.
                                                     */
function ListItemAvatar(props) {var
  children = props.children,classes = props.classes,className = props.className,other = objectWithoutProperties(props, ["children", "classes", "className"]);

  return (
    react.createElement(ListContext.Consumer, null,
    function (context) {var _classNames;
      return react.cloneElement(children, objectSpread({
        className: classnames((_classNames = {}, defineProperty(_classNames,

        classes.root, context.dense), defineProperty(_classNames,
        classes.alignItemsFlexStart, context.alignItems === 'flex-start'), _classNames),

        className,
        children.props.className),

        childrenClassName: classnames(defineProperty({},
        classes.icon, context.dense),
        children.props.childrenClassName) },

      other));

    }));


}

ListItemAvatar.propTypes = {
  /**
                              * The content of the component – normally `Avatar`.
                              */
  children: propTypes.element.isRequired,
  /**
                                           * Override or extend the styles applied to the component.
                                           * See [CSS API](#css-api) below for more details.
                                           */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string };


ListItemAvatar.muiName = 'ListItemAvatar';

withStyles(styles$Y, { name: 'MuiListItemAvatar' })(ListItemAvatar);

var styles$Z = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: {
      marginRight: 16,
      color: theme.palette.action.active,
      flexShrink: 0,
      display: 'inline-flex' } };};



/**
                                     * A simple wrapper to apply `List` styles to an `Icon` or `SvgIcon`.
                                     */
function ListItemIcon(props) {var
  children = props.children,classes = props.classes,classNameProp = props.className,other = objectWithoutProperties(props, ["children", "classes", "className"]);

  return (
    react.createElement("div", _extends_1({ className: classnames(classes.root, classNameProp) }, other),
    children));


}

ListItemIcon.propTypes = {
  /**
                            * The content of the component, normally `Icon`, `SvgIcon`,
                            * or a `@material-ui/icons` SVG icon element.
                            */
  children: propTypes.element.isRequired,
  /**
                                           * Override or extend the styles applied to the component.
                                           * See [CSS API](#css-api) below for more details.
                                           */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string };


withStyles(styles$Z, { name: 'MuiListItemIcon' })(ListItemIcon);

var styles$_ = {
  /* Styles applied to the root element. */
  root: {
    position: 'absolute',
    right: 4,
    top: '50%',
    transform: 'translateY(-50%)' } };



function ListItemSecondaryAction(props) {var
  children = props.children,classes = props.classes,className = props.className,other = objectWithoutProperties(props, ["children", "classes", "className"]);

  return (
    react.createElement("div", _extends_1({ className: classnames(classes.root, className) }, other),
    children));


}

ListItemSecondaryAction.propTypes = {
  /**
                                       * The content of the component, normally an `IconButton` or selection control.
                                       */
  children: propTypes.node,
  /**
                             * Override or extend the styles applied to the component.
                             * See [CSS API](#css-api) below for more details.
                             */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string };


ListItemSecondaryAction.muiName = 'ListItemSecondaryAction';

withStyles(styles$_, { name: 'MuiListItemSecondaryAction' })(ListItemSecondaryAction);

var styles$10 = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: {
      flex: '1 1 auto',
      minWidth: 0,
      padding: '0 16px',
      '&:first-child': {
        paddingLeft: 0 } },


    /* Styles applied to the root element if `inset={true}`. */
    inset: {
      '&:first-child': {
        paddingLeft: 56 } },


    /* Styles applied to the root element if `context.dense` is `true`. */
    dense: {
      fontSize: theme.typography.pxToRem(13) },

    /* Styles applied to the primary `Typography` component. */
    primary: {
      '&$textDense': {
        fontSize: 'inherit' } },


    /* Styles applied to the secondary `Typography` component. */
    secondary: {
      '&$textDense': {
        fontSize: 'inherit' } },


    /* Styles applied to the `Typography` components if `context.dense` is `true`. */
    textDense: {} };};


function ListItemText(props) {var

  children =









  props.children,classes = props.classes,classNameProp = props.className,disableTypography = props.disableTypography,inset = props.inset,primaryProp = props.primary,primaryTypographyProps = props.primaryTypographyProps,secondaryProp = props.secondary,secondaryTypographyProps = props.secondaryTypographyProps,other = objectWithoutProperties(props, ["children", "classes", "className", "disableTypography", "inset", "primary", "primaryTypographyProps", "secondary", "secondaryTypographyProps"]);

  return (
    react.createElement(ListContext.Consumer, null,
    function (_ref) {var _classNames3;var dense = _ref.dense;
      var primary = primaryProp != null ? primaryProp : children;
      if (primary != null && primary.type !== Typography$1 && !disableTypography) {
        primary =
        react.createElement(Typography$1, _extends_1({
          variant: "subheading",
          internalDeprecatedVariant: true,
          className: classnames(classes.primary, defineProperty({}, classes.textDense, dense)),
          component: "span" },
        primaryTypographyProps),

        primary);


      }

      var secondary = secondaryProp;
      if (secondary != null && secondary.type !== Typography$1 && !disableTypography) {
        secondary =
        react.createElement(Typography$1, _extends_1({
          className: classnames(classes.secondary, defineProperty({},
          classes.textDense, dense)),

          color: "textSecondary" },
        secondaryTypographyProps),

        secondary);


      }

      return (
        react.createElement("div", _extends_1({
          className: classnames(
          classes.root, (_classNames3 = {}, defineProperty(_classNames3,

          classes.dense, dense), defineProperty(_classNames3,
          classes.inset, inset), _classNames3),

          classNameProp) },

        other),

        primary,
        secondary));


    }));


}

ListItemText.propTypes = {
  /**
                            * Alias for the `primary` property.
                            */
  children: propTypes.node,
  /**
                             * Override or extend the styles applied to the component.
                             * See [CSS API](#css-api) below for more details.
                             */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * If `true`, the children won't be wrapped by a Typography component.
                                * This can be useful to render an alternative Typography variant by wrapping
                                * the `children` (or `primary`) text, and optional `secondary` text
                                * with the Typography component.
                                */
  disableTypography: propTypes.bool,
  /**
                                      * If `true`, the children will be indented.
                                      * This should be used if there is no left avatar or left icon.
                                      */
  inset: propTypes.bool,
  /**
                          * The main content element.
                          */
  primary: propTypes.node,
  /**
                            * These props will be forwarded to the primary typography component
                            * (as long as disableTypography is not `true`).
                            */
  primaryTypographyProps: propTypes.object,
  /**
                                             * The secondary content element.
                                             */
  secondary: propTypes.node,
  /**
                              * These props will be forwarded to the secondary typography component
                              * (as long as disableTypography is not `true`).
                              */
  secondaryTypographyProps: propTypes.object };


ListItemText.defaultProps = {
  disableTypography: false,
  inset: false };


withStyles(styles$10, { name: 'MuiListItemText' })(ListItemText);

var styles$11 = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: {
      boxSizing: 'border-box',
      lineHeight: '48px',
      listStyle: 'none',
      color: theme.palette.text.secondary,
      fontFamily: theme.typography.fontFamily,
      fontWeight: theme.typography.fontWeightMedium,
      fontSize: theme.typography.pxToRem(14) },

    /* Styles applied to the root element if `color="primary"`. */
    colorPrimary: {
      color: theme.palette.primary.main },

    /* Styles applied to the root element if `color="inherit"`. */
    colorInherit: {
      color: 'inherit' },

    /* Styles applied to the inner `component` element if `disableGutters={false}`. */
    gutters: theme.mixins.gutters(),
    /* Styles applied to the root element if `inset={true}`. */
    inset: {
      paddingLeft: 72 },

    /* Styles applied to the root element if `disableSticky={false}`. */
    sticky: {
      position: 'sticky',
      top: 0,
      zIndex: 1,
      backgroundColor: 'inherit' } };};



function ListSubheader(props) {var _classNames;var

  classes =







  props.classes,className = props.className,color = props.color,Component = props.component,disableGutters = props.disableGutters,disableSticky = props.disableSticky,inset = props.inset,other = objectWithoutProperties(props, ["classes", "className", "color", "component", "disableGutters", "disableSticky", "inset"]);

  return (
    react.createElement(Component, _extends_1({
      className: classnames(
      classes.root, (_classNames = {}, defineProperty(_classNames,

      classes["color".concat(capitalize(color))], color !== 'default'), defineProperty(_classNames,
      classes.inset, inset), defineProperty(_classNames,
      classes.sticky, !disableSticky), defineProperty(_classNames,
      classes.gutters, !disableGutters), _classNames),

      className) },

    other)));


}

ListSubheader.propTypes = {
  /**
                             * The content of the component.
                             */
  children: propTypes.node,
  /**
                             * Override or extend the styles applied to the component.
                             * See [CSS API](#css-api) below for more details.
                             */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * The color of the component. It supports those theme colors that make sense for this component.
                                */
  color: propTypes.oneOf(['default', 'primary', 'inherit']),
  /**
                                                              * The component used for the root node.
                                                              * Either a string to use a DOM element or a component.
                                                              */
  component: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                         * If `true`, the List Subheader will not have gutters.
                                                                                         */
  disableGutters: propTypes.bool,
  /**
                                   * If `true`, the List Subheader will not stick to the top during scroll.
                                   */
  disableSticky: propTypes.bool,
  /**
                                  * If `true`, the List Subheader will be indented.
                                  */
  inset: propTypes.bool };


ListSubheader.defaultProps = {
  color: 'default',
  component: 'li',
  disableGutters: false,
  disableSticky: false,
  inset: false };


ListSubheader.muiName = 'ListSubheader';

withStyles(styles$11, { name: 'MuiListSubheader' })(ListSubheader);

function getOffsetTop(rect, vertical) {
  var offset = 0;

  if (typeof vertical === 'number') {
    offset = vertical;
  } else if (vertical === 'center') {
    offset = rect.height / 2;
  } else if (vertical === 'bottom') {
    offset = rect.height;
  }

  return offset;
}

function getOffsetLeft(rect, horizontal) {
  var offset = 0;

  if (typeof horizontal === 'number') {
    offset = horizontal;
  } else if (horizontal === 'center') {
    offset = rect.width / 2;
  } else if (horizontal === 'right') {
    offset = rect.width;
  }

  return offset;
}

function getTransformOriginValue(transformOrigin) {
  return [transformOrigin.horizontal, transformOrigin.vertical].
  map(function (n) {
    return typeof n === 'number' ? "".concat(n, "px") : n;
  }).
  join(' ');
}

// Sum the scrollTop between two elements.
function getScrollParent(parent, child) {
  var element = child;
  var scrollTop = 0;

  while (element && element !== parent) {
    element = element.parentNode;
    scrollTop += element.scrollTop;
  }
  return scrollTop;
}

function getAnchorEl(anchorEl) {
  return typeof anchorEl === 'function' ? anchorEl() : anchorEl;
}

var styles$12 = {
  /* Styles applied to the `Paper` component. */
  paper: {
    position: 'absolute',
    overflowY: 'auto',
    overflowX: 'hidden',
    // So we see the popover when it's empty.
    // It's most likely on issue on userland.
    minWidth: 16,
    minHeight: 16,
    maxWidth: 'calc(100% - 32px)',
    maxHeight: 'calc(100% - 32px)',
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 'none' } };var



Popover = /*#__PURE__*/function (_React$Component) {inherits(Popover, _React$Component);




  function Popover() {var _this;classCallCheck(this, Popover);
    _this = possibleConstructorReturn(this, getPrototypeOf(Popover).call(this));defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleGetOffsetTop", getOffsetTop);defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleGetOffsetLeft", getOffsetLeft);defineProperty(assertThisInitialized(assertThisInitialized(_this)), "componentWillUnmount",
















    function () {
      _this.handleResize.clear();
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "setPositioningStyles",

    function (element) {
      var positioning = _this.getPositioningStyle(element);
      if (positioning.top !== null) {
        element.style.top = positioning.top;
      }
      if (positioning.left !== null) {
        element.style.left = positioning.left;
      }
      element.style.transformOrigin = positioning.transformOrigin;
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "getPositioningStyle",

    function (element) {var _this$props =
      _this.props,anchorEl = _this$props.anchorEl,anchorReference = _this$props.anchorReference,marginThreshold = _this$props.marginThreshold;

      // Check if the parent has requested anchoring on an inner content node
      var contentAnchorOffset = _this.getContentAnchorOffset(element);
      var elemRect = {
        width: element.offsetWidth,
        height: element.offsetHeight };


      // Get the transform origin point on the element itself
      var transformOrigin = _this.getTransformOrigin(elemRect, contentAnchorOffset);

      if (anchorReference === 'none') {
        return {
          top: null,
          left: null,
          transformOrigin: getTransformOriginValue(transformOrigin) };

      }

      // Get the offset of of the anchoring element
      var anchorOffset = _this.getAnchorOffset(contentAnchorOffset);

      // Calculate element positioning
      var top = anchorOffset.top - transformOrigin.vertical;
      var left = anchorOffset.left - transformOrigin.horizontal;
      var bottom = top + elemRect.height;
      var right = left + elemRect.width;

      // Use the parent window of the anchorEl if provided
      var containerWindow = ownerWindow(getAnchorEl(anchorEl));

      // Window thresholds taking required margin into account
      var heightThreshold = containerWindow.innerHeight - marginThreshold;
      var widthThreshold = containerWindow.innerWidth - marginThreshold;

      // Check if the vertical axis needs shifting
      if (top < marginThreshold) {
        var diff = top - marginThreshold;
        top -= diff;
        transformOrigin.vertical += diff;
      } else if (bottom > heightThreshold) {
        var _diff = bottom - heightThreshold;
        top -= _diff;
        transformOrigin.vertical += _diff;
      }

      warning_1(
      elemRect.height < heightThreshold || !elemRect.height || !heightThreshold,
      [
      'Material-UI: the popover component is too tall.', "Some part of it can not be seen on the screen (".concat(
      elemRect.height - heightThreshold, "px)."),
      'Please consider adding a `max-height` to improve the user-experience.'].
      join('\n'));


      // Check if the horizontal axis needs shifting
      if (left < marginThreshold) {
        var _diff2 = left - marginThreshold;
        left -= _diff2;
        transformOrigin.horizontal += _diff2;
      } else if (right > widthThreshold) {
        var _diff3 = right - widthThreshold;
        left -= _diff3;
        transformOrigin.horizontal += _diff3;
      }

      return {
        top: "".concat(top, "px"),
        left: "".concat(left, "px"),
        transformOrigin: getTransformOriginValue(transformOrigin) };

    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleEntering",


































































    function (element) {
      if (_this.props.onEntering) {
        _this.props.onEntering(element);
      }

      _this.setPositioningStyles(element);
    });if (typeof window !== 'undefined') {_this.handleResize = debounce_1(function () {_this.setPositioningStyles(_this.paperRef);}, 166); // Corresponds to 10 frames at 60 Hz.
    }return _this;}createClass(Popover, [{ key: "componentDidMount", value: function componentDidMount() {if (this.props.action) {this.props.action({ updatePosition: this.handleResize });}} }, { key: "getAnchorOffset", // Returns the top/left offset of the position
    // to attach to on the anchor element (or body if none is provided)
    value: function getAnchorOffset(contentAnchorOffset) {var _this$props2 = this.props,anchorEl = _this$props2.anchorEl,anchorOrigin = _this$props2.anchorOrigin,anchorReference = _this$props2.anchorReference,anchorPosition = _this$props2.anchorPosition;if (anchorReference === 'anchorPosition') {warning_1(anchorPosition, 'Material-UI: you need to provide a `anchorPosition` property when using ' + '<Popover anchorReference="anchorPosition" />.');return anchorPosition;} // If an anchor element wasn't provided, just use the parent body element of this Popover
      var anchorElement = getAnchorEl(anchorEl) || ownerDocument(this.paperRef).body;var anchorRect = anchorElement.getBoundingClientRect();var anchorVertical = contentAnchorOffset === 0 ? anchorOrigin.vertical : 'center';return { top: anchorRect.top + this.handleGetOffsetTop(anchorRect, anchorVertical), left: anchorRect.left + this.handleGetOffsetLeft(anchorRect, anchorOrigin.horizontal) };} // Returns the vertical offset of inner content to anchor the transform on if provided
  }, { key: "getContentAnchorOffset", value: function getContentAnchorOffset(element) {var _this$props3 = this.props,getContentAnchorEl = _this$props3.getContentAnchorEl,anchorReference = _this$props3.anchorReference;var contentAnchorOffset = 0;if (getContentAnchorEl && anchorReference === 'anchorEl') {var contentAnchorEl = getContentAnchorEl(element);if (contentAnchorEl && element.contains(contentAnchorEl)) {var scrollTop = getScrollParent(element, contentAnchorEl);contentAnchorOffset = contentAnchorEl.offsetTop + contentAnchorEl.clientHeight / 2 - scrollTop || 0;} // != the default value
        warning_1(this.props.anchorOrigin.vertical === 'top', ['Material-UI: you can not change the default `anchorOrigin.vertical` value ', 'when also providing the `getContentAnchorEl` property to the popover component.', 'Only use one of the two properties.', 'Set `getContentAnchorEl` to `null | undefined`' + ' or leave `anchorOrigin.vertical` unchanged.'].join('\n'));}return contentAnchorOffset;} // Return the base transform origin using the element
    // and taking the content anchor offset into account if in use
  }, { key: "getTransformOrigin", value: function getTransformOrigin(elemRect) {var contentAnchorOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;var transformOrigin = this.props.transformOrigin;return { vertical: this.handleGetOffsetTop(elemRect, transformOrigin.vertical) + contentAnchorOffset, horizontal: this.handleGetOffsetLeft(elemRect, transformOrigin.horizontal) };} }, { key: "render", value: function render() {var _this2 = this;var _this$props4 =





















      this.props,action = _this$props4.action,anchorEl = _this$props4.anchorEl,anchorOrigin = _this$props4.anchorOrigin,anchorPosition = _this$props4.anchorPosition,anchorReference = _this$props4.anchorReference,children = _this$props4.children,classes = _this$props4.classes,containerProp = _this$props4.container,elevation = _this$props4.elevation,getContentAnchorEl = _this$props4.getContentAnchorEl,marginThreshold = _this$props4.marginThreshold,ModalClasses = _this$props4.ModalClasses,onEnter = _this$props4.onEnter,onEntered = _this$props4.onEntered,onEntering = _this$props4.onEntering,onExit = _this$props4.onExit,onExited = _this$props4.onExited,onExiting = _this$props4.onExiting,open = _this$props4.open,PaperProps = _this$props4.PaperProps,role = _this$props4.role,transformOrigin = _this$props4.transformOrigin,TransitionComponent = _this$props4.TransitionComponent,transitionDurationProp = _this$props4.transitionDuration,TransitionProps = _this$props4.TransitionProps,other = objectWithoutProperties(_this$props4, ["action", "anchorEl", "anchorOrigin", "anchorPosition", "anchorReference", "children", "classes", "container", "elevation", "getContentAnchorEl", "marginThreshold", "ModalClasses", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "open", "PaperProps", "role", "transformOrigin", "TransitionComponent", "transitionDuration", "TransitionProps"]);

      var transitionDuration = transitionDurationProp;

      if (transitionDurationProp === 'auto' && !TransitionComponent.muiSupportAuto) {
        transitionDuration = undefined;
      }

      // If the container prop is provided, use that
      // If the anchorEl prop is provided, use its parent body element as the container
      // If neither are provided let the Modal take care of choosing the container
      var container =
      containerProp || (anchorEl ? ownerDocument(getAnchorEl(anchorEl)).body : undefined);

      return (
        react.createElement(Modal$1, _extends_1({
          classes: ModalClasses,
          container: container,
          open: open,
          BackdropProps: { invisible: true } },
        other),

        react.createElement(TransitionComponent, _extends_1({
          appear: true,
          in: open,
          onEnter: onEnter,
          onEntered: onEntered,
          onEntering: this.handleEntering,
          onExit: onExit,
          onExited: onExited,
          onExiting: onExiting,
          role: role,
          timeout: transitionDuration },
        TransitionProps),

        react.createElement(Paper$1, _extends_1({
          className: classes.paper,
          "data-mui-test": "Popover",
          elevation: elevation,
          ref: function ref(_ref) {
            _this2.paperRef = reactDom.findDOMNode(_ref);
          } },
        PaperProps),

        react.createElement(EventListener, { target: "window", onResize: this.handleResize }),
        children))));




    } }]);return Popover;}(react.Component);


Popover.propTypes = {
  /**
                       * This is callback property. It's called by the component on mount.
                       * This is useful when you want to trigger an action programmatically.
                       * It currently only supports updatePosition() action.
                       *
                       * @param {object} actions This object contains all posible actions
                       * that can be triggered programmatically.
                       */
  action: propTypes.func,
  /**
                           * This is the DOM element, or a function that returns the DOM element,
                           * that may be used to set the position of the popover.
                           */
  anchorEl: propTypes.oneOfType([propTypes.object, propTypes.func]),
  /**
                                                                      * This is the point on the anchor where the popover's
                                                                      * `anchorEl` will attach to. This is not used when the
                                                                      * anchorReference is 'anchorPosition'.
                                                                      *
                                                                      * Options:
                                                                      * vertical: [top, center, bottom];
                                                                      * horizontal: [left, center, right].
                                                                      */
  anchorOrigin: propTypes.shape({
    horizontal: propTypes.oneOfType([
    propTypes.number,
    propTypes.oneOf(['left', 'center', 'right'])]).
    isRequired,
    vertical: propTypes.oneOfType([propTypes.number, propTypes.oneOf(['top', 'center', 'bottom'])]).
    isRequired }),

  /**
                    * This is the position that may be used
                    * to set the position of the popover.
                    * The coordinates are relative to
                    * the application's client area.
                    */
  anchorPosition: propTypes.shape({
    left: propTypes.number.isRequired,
    top: propTypes.number.isRequired }),

  /*
                                          * This determines which anchor prop to refer to to set
                                          * the position of the popover.
                                          */
  anchorReference: propTypes.oneOf(['anchorEl', 'anchorPosition', 'none']),
  /**
                                                                             * The content of the component.
                                                                             */
  children: propTypes.node,
  /**
                             * Override or extend the styles applied to the component.
                             * See [CSS API](#css-api) below for more details.
                             */
  classes: propTypes.object.isRequired,
  /**
                                         * A node, component instance, or function that returns either.
                                         * The `container` will passed to the Modal component.
                                         * By default, it uses the body of the anchorEl's top-level document object,
                                         * so it's simply `document.body` most of the time.
                                         */
  container: propTypes.oneOfType([propTypes.object, propTypes.func]),
  /**
                                                                       * The elevation of the popover.
                                                                       */
  elevation: propTypes.number,
  /**
                                * This function is called in order to retrieve the content anchor element.
                                * It's the opposite of the `anchorEl` property.
                                * The content anchor element should be an element inside the popover.
                                * It's used to correctly scroll and set the position of the popover.
                                * The positioning strategy tries to make the content anchor element just above the
                                * anchor element.
                                */
  getContentAnchorEl: propTypes.func,
  /**
                                       * Specifies how close to the edge of the window the popover can appear.
                                       */
  marginThreshold: propTypes.number,
  /**
                                      * `classes` property applied to the [`Modal`](/api/modal/) element.
                                      */
  ModalClasses: propTypes.object,
  /**
                                   * Callback fired when the component requests to be closed.
                                   *
                                   * @param {object} event The event source of the callback.
                                   */
  onClose: propTypes.func,
  /**
                            * Callback fired before the component is entering.
                            */
  onEnter: propTypes.func,
  /**
                            * Callback fired when the component has entered.
                            */
  onEntered: propTypes.func,
  /**
                              * Callback fired when the component is entering.
                              */
  onEntering: propTypes.func,
  /**
                               * Callback fired before the component is exiting.
                               */
  onExit: propTypes.func,
  /**
                           * Callback fired when the component has exited.
                           */
  onExited: propTypes.func,
  /**
                             * Callback fired when the component is exiting.
                             */
  onExiting: propTypes.func,
  /**
                              * If `true`, the popover is visible.
                              */
  open: propTypes.bool.isRequired,
  /**
                                    * Properties applied to the [`Paper`](/api/paper/) element.
                                    */
  PaperProps: propTypes.object,
  /**
                                 * @ignore
                                 */
  role: propTypes.string,
  /**
                           * This is the point on the popover which
                           * will attach to the anchor's origin.
                           *
                           * Options:
                           * vertical: [top, center, bottom, x(px)];
                           * horizontal: [left, center, right, x(px)].
                           */
  transformOrigin: propTypes.shape({
    horizontal: propTypes.oneOfType([
    propTypes.number,
    propTypes.oneOf(['left', 'center', 'right'])]).
    isRequired,
    vertical: propTypes.oneOfType([propTypes.number, propTypes.oneOf(['top', 'center', 'bottom'])]).
    isRequired }),

  /**
                    * Transition component.
                    */
  TransitionComponent: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                                   * Set to 'auto' to automatically calculate transition time based on height.
                                                                                                   */
  transitionDuration: propTypes.oneOfType([
  propTypes.number,
  propTypes.shape({ enter: propTypes.number, exit: propTypes.number }),
  propTypes.oneOf(['auto'])]),

  /**
                                * Properties applied to the `Transition` element.
                                */
  TransitionProps: propTypes.object };


Popover.defaultProps = {
  anchorReference: 'anchorEl',
  anchorOrigin: {
    vertical: 'top',
    horizontal: 'left' },

  elevation: 8,
  marginThreshold: 16,
  transformOrigin: {
    vertical: 'top',
    horizontal: 'left' },

  TransitionComponent: Grow$1,
  transitionDuration: 'auto' };


var Popover$1 = withStyles(styles$12, { name: 'MuiPopover' })(Popover);

var

MenuList = /*#__PURE__*/function (_React$Component) {inherits(MenuList, _React$Component);function MenuList() {var _getPrototypeOf2;var _this;classCallCheck(this, MenuList);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(MenuList)).call.apply(_getPrototypeOf2, [this].concat(args)));defineProperty(assertThisInitialized(assertThisInitialized(_this)), "state",
    {
      currentTabIndex: null });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleBlur",














    function (event) {
      _this.blurTimer = setTimeout(function () {
        if (_this.listRef) {
          var list = _this.listRef;
          var currentFocus = ownerDocument(list).activeElement;
          if (!list.contains(currentFocus)) {
            _this.resetTabIndex();
          }
        }
      }, 30);

      if (_this.props.onBlur) {
        _this.props.onBlur(event);
      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleKeyDown",

    function (event) {
      var list = _this.listRef;
      var key = keycode(event);
      var currentFocus = ownerDocument(list).activeElement;

      if (
      (key === 'up' || key === 'down') && (
      !currentFocus || currentFocus && !list.contains(currentFocus)))
      {
        if (_this.selectedItemRef) {
          _this.selectedItemRef.focus();
        } else {
          list.firstChild.focus();
        }
      } else if (key === 'down') {
        event.preventDefault();
        if (currentFocus.nextElementSibling) {
          currentFocus.nextElementSibling.focus();
        }
      } else if (key === 'up') {
        event.preventDefault();
        if (currentFocus.previousElementSibling) {
          currentFocus.previousElementSibling.focus();
        }
      }

      if (_this.props.onKeyDown) {
        _this.props.onKeyDown(event, key);
      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleItemFocus",

    function (event) {
      var list = _this.listRef;
      if (list) {
        for (var i = 0; i < list.children.length; i += 1) {
          if (list.children[i] === event.currentTarget) {
            _this.setTabIndex(i);
            break;
          }
        }
      }
    });return _this;}createClass(MenuList, [{ key: "componentDidMount", value: function componentDidMount() {this.resetTabIndex();} }, { key: "componentWillUnmount", value: function componentWillUnmount() {clearTimeout(this.blurTimer);} }, { key: "setTabIndex", value: function setTabIndex(index) {this.setState({ currentTabIndex: index });} }, { key: "focus", value: function focus()

    {var
      currentTabIndex = this.state.currentTabIndex;
      var list = this.listRef;
      if (!list || !list.children || !list.firstChild) {
        return;
      }

      if (currentTabIndex && currentTabIndex >= 0) {
        list.children[currentTabIndex].focus();
      } else {
        list.firstChild.focus();
      }
    } }, { key: "resetTabIndex", value: function resetTabIndex()

    {
      var list = this.listRef;
      var currentFocus = ownerDocument(list).activeElement;

      var items = [];
      for (var i = 0; i < list.children.length; i += 1) {
        items.push(list.children[i]);
      }

      var currentFocusIndex = items.indexOf(currentFocus);

      if (currentFocusIndex !== -1) {
        return this.setTabIndex(currentFocusIndex);
      }

      if (this.selectedItemRef) {
        return this.setTabIndex(items.indexOf(this.selectedItemRef));
      }

      return this.setTabIndex(0);
    } }, { key: "render", value: function render()

    {var _this2 = this;var _this$props =
      this.props,children = _this$props.children,className = _this$props.className,onBlur = _this$props.onBlur,onKeyDown = _this$props.onKeyDown,other = objectWithoutProperties(_this$props, ["children", "className", "onBlur", "onKeyDown"]);

      return (
        react.createElement(List$1, _extends_1({
          role: "menu",
          ref: function ref(_ref) {
            _this2.listRef = reactDom.findDOMNode(_ref);
          },
          className: className,
          onKeyDown: this.handleKeyDown,
          onBlur: this.handleBlur },
        other),

        react.Children.map(children, function (child, index) {
          if (!react.isValidElement(child)) {
            return null;
          }

          warning_1(
          child.type !== react.Fragment,
          [
          "Material-UI: the MenuList component doesn't accept a Fragment as a child.",
          'Consider providing an array instead.'].
          join('\n'));


          return react.cloneElement(child, {
            tabIndex: index === _this2.state.currentTabIndex ? 0 : -1,
            ref: child.props.selected ?
            function (ref) {
              _this2.selectedItemRef = reactDom.findDOMNode(ref);
            } :
            undefined,
            onFocus: _this2.handleItemFocus });

        })));


    } }]);return MenuList;}(react.Component);


MenuList.propTypes = {
  /**
                        * MenuList contents, normally `MenuItem`s.
                        */
  children: propTypes.node,
  /**
                             * @ignore
                             */
  className: propTypes.string,
  /**
                                * @ignore
                                */
  onBlur: propTypes.func,
  /**
                           * @ignore
                           */
  onKeyDown: propTypes.func };

var RTL_ORIGIN = {
  vertical: 'top',
  horizontal: 'right' };


var LTR_ORIGIN = {
  vertical: 'top',
  horizontal: 'left' };


var styles$13 = {
  /* Styles applied to the `Paper` component. */
  paper: {
    // specZ: The maximum height of a simple menu should be one or more rows less than the view
    // height. This ensures a tapable area outside of the simple menu with which to dismiss
    // the menu.
    maxHeight: 'calc(100% - 96px)',
    // Add iOS momentum scrolling.
    WebkitOverflowScrolling: 'touch' } };var



Menu = /*#__PURE__*/function (_React$Component) {inherits(Menu, _React$Component);function Menu() {var _getPrototypeOf2;var _this;classCallCheck(this, Menu);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Menu)).call.apply(_getPrototypeOf2, [this].concat(args)));defineProperty(assertThisInitialized(assertThisInitialized(_this)), "getContentAnchorEl",






    function () {
      if (_this.menuListRef.selectedItemRef) {
        return reactDom.findDOMNode(_this.menuListRef.selectedItemRef);
      }

      return reactDom.findDOMNode(_this.menuListRef).firstChild;
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "focus",

    function () {
      if (_this.menuListRef && _this.menuListRef.selectedItemRef) {
        reactDom.findDOMNode(_this.menuListRef.selectedItemRef).focus();
        return;
      }

      var menuList = reactDom.findDOMNode(_this.menuListRef);
      if (menuList && menuList.firstChild) {
        menuList.firstChild.focus();
      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleMenuListRef",

    function (ref) {
      _this.menuListRef = ref;
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleEntering",

    function (element) {var _this$props =
      _this.props,disableAutoFocusItem = _this$props.disableAutoFocusItem,theme = _this$props.theme;
      var menuList = reactDom.findDOMNode(_this.menuListRef);

      // Focus so the scroll computation of the Popover works as expected.
      if (disableAutoFocusItem !== true) {
        _this.focus();
      }

      // Let's ignore that piece of logic if users are already overriding the width
      // of the menu.
      if (menuList && element.clientHeight < menuList.clientHeight && !menuList.style.width) {
        var size = "".concat(getScrollbarSize(), "px");
        menuList.style[theme.direction === 'rtl' ? 'paddingLeft' : 'paddingRight'] = size;
        menuList.style.width = "calc(100% + ".concat(size, ")");
      }

      if (_this.props.onEntering) {
        _this.props.onEntering(element);
      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleListKeyDown",

    function (event, key) {
      if (key === 'tab') {
        event.preventDefault();

        if (_this.props.onClose) {
          _this.props.onClose(event);
        }
      }
    });return _this;}createClass(Menu, [{ key: "componentDidMount", value: function componentDidMount() {if (this.props.open && this.props.disableAutoFocusItem !== true) {this.focus();}} }, { key: "render", value: function render()

    {var _this$props2 =










      this.props,children = _this$props2.children,classes = _this$props2.classes,disableAutoFocusItem = _this$props2.disableAutoFocusItem,MenuListProps = _this$props2.MenuListProps,onEntering = _this$props2.onEntering,_this$props2$PaperPro = _this$props2.PaperProps,PaperProps = _this$props2$PaperPro === void 0 ? {} : _this$props2$PaperPro,PopoverClasses = _this$props2.PopoverClasses,theme = _this$props2.theme,other = objectWithoutProperties(_this$props2, ["children", "classes", "disableAutoFocusItem", "MenuListProps", "onEntering", "PaperProps", "PopoverClasses", "theme"]);

      return (
        react.createElement(Popover$1, _extends_1({
          getContentAnchorEl: this.getContentAnchorEl,
          classes: PopoverClasses,
          onEntering: this.handleEntering,
          anchorOrigin: theme.direction === 'rtl' ? RTL_ORIGIN : LTR_ORIGIN,
          transformOrigin: theme.direction === 'rtl' ? RTL_ORIGIN : LTR_ORIGIN,
          PaperProps: objectSpread({},
          PaperProps, {
            classes: objectSpread({},
            PaperProps.classes, {
              root: classes.paper }) }) },


        other),

        react.createElement(MenuList, _extends_1({
          "data-mui-test": "Menu",
          onKeyDown: this.handleListKeyDown },
        MenuListProps, {
          ref: this.handleMenuListRef }),

        children)));



    } }]);return Menu;}(react.Component);


Menu.propTypes = {
  /**
                    * The DOM element used to set the position of the menu.
                    */
  anchorEl: propTypes.oneOfType([propTypes.object, propTypes.func]),
  /**
                                                                      * Menu contents, normally `MenuItem`s.
                                                                      */
  children: propTypes.node,
  /**
                             * Override or extend the styles applied to the component.
                             * See [CSS API](#css-api) below for more details.
                             */
  classes: propTypes.object.isRequired,
  /**
                                         * If `true`, the selected / first menu item will not be auto focused.
                                         */
  disableAutoFocusItem: propTypes.bool,
  /**
                                         * Properties applied to the [`MenuList`](/api/menu-list/) element.
                                         */
  MenuListProps: propTypes.object,
  /**
                                    * Callback fired when the component requests to be closed.
                                    *
                                    * @param {object} event The event source of the callback
                                    */
  onClose: propTypes.func,
  /**
                            * Callback fired before the Menu enters.
                            */
  onEnter: propTypes.func,
  /**
                            * Callback fired when the Menu has entered.
                            */
  onEntered: propTypes.func,
  /**
                              * Callback fired when the Menu is entering.
                              */
  onEntering: propTypes.func,
  /**
                               * Callback fired before the Menu exits.
                               */
  onExit: propTypes.func,
  /**
                           * Callback fired when the Menu has exited.
                           */
  onExited: propTypes.func,
  /**
                             * Callback fired when the Menu is exiting.
                             */
  onExiting: propTypes.func,
  /**
                              * If `true`, the menu is visible.
                              */
  open: propTypes.bool.isRequired,
  /**
                                    * @ignore
                                    */
  PaperProps: propTypes.object,
  /**
                                 * `classes` property applied to the [`Popover`](/api/popover/) element.
                                 */
  PopoverClasses: propTypes.object,
  /**
                                     * @ignore
                                     */
  theme: propTypes.object.isRequired,
  /**
                                       * The length of the transition in `ms`, or 'auto'
                                       */
  transitionDuration: propTypes.oneOfType([
  propTypes.number,
  propTypes.shape({ enter: propTypes.number, exit: propTypes.number }),
  propTypes.oneOf(['auto'])]) };



Menu.defaultProps = {
  disableAutoFocusItem: false,
  transitionDuration: 'auto' };


var Menu$1 = withStyles(styles$13, { name: 'MuiMenu', withTheme: true })(Menu);

var styles$14 = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: objectSpread({},
    theme.typography.subheading, {
      height: 24,
      boxSizing: 'content-box',
      width: 'auto',
      overflow: 'hidden',
      whiteSpace: 'nowrap',
      '&$selected': {} }),

    /* Styles applied to the root element if `disableGutters={false}`. */
    gutters: {
      paddingLeft: 16,
      paddingRight: 16 },

    /* Styles applied to the root element if `selected={true}`. */
    selected: {} };};


function MenuItem(props) {var _classNames;var
  classes = props.classes,className = props.className,component = props.component,disableGutters = props.disableGutters,role = props.role,selected = props.selected,other = objectWithoutProperties(props, ["classes", "className", "component", "disableGutters", "role", "selected"]);

  return (
    react.createElement(ListItem$1, _extends_1({
      button: true,
      role: role,
      tabIndex: -1,
      component: component,
      selected: selected,
      disableGutters: disableGutters,
      className: classnames(
      classes.root, (_classNames = {}, defineProperty(_classNames,

      classes.selected, selected), defineProperty(_classNames,
      classes.gutters, !disableGutters), _classNames),

      className) },

    other)));


}

MenuItem.propTypes = {
  /**
                        * Menu item contents.
                        */
  children: propTypes.node,
  /**
                             * Override or extend the styles applied to the component.
                             * See [CSS API](#css-api) below for more details.
                             */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * The component used for the root node.
                                * Either a string to use a DOM element or a component.
                                */
  component: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                         * If `true`, the left and right padding is removed.
                                                                                         */
  disableGutters: propTypes.bool,
  /**
                                   * @ignore
                                   */
  role: propTypes.string,
  /**
                           * @ignore
                           */
  selected: propTypes.bool };


MenuItem.defaultProps = {
  component: 'li',
  disableGutters: false,
  role: 'menuitem' };


var MenuItem$1 = withStyles(styles$14, { name: 'MuiMenuItem' })(MenuItem);

var styles$15 = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: {
      display: 'flex',
      flexDirection: 'row',
      justifyContent: 'space-between',
      alignItems: 'center',
      background: theme.palette.background.default,
      padding: 8 },

    /* Styles applied to the root element if `position="bottom"`. */
    positionBottom: {
      position: 'fixed',
      bottom: 0,
      left: 0,
      right: 0,
      zIndex: theme.zIndex.mobileStepper },

    /* Styles applied to the root element if `position="top"`. */
    positionTop: {
      position: 'fixed',
      top: 0,
      left: 0,
      right: 0,
      zIndex: theme.zIndex.mobileStepper },

    /* Styles applied to the root element if `position="static"`. */
    positionStatic: {},
    /* Styles applied to the dots container if `variant="dots"`. */
    dots: {
      display: 'flex',
      flexDirection: 'row' },

    /* Styles applied to each dot if `variant="dots"`. */
    dot: {
      backgroundColor: theme.palette.action.disabled,
      borderRadius: '50%',
      width: 8,
      height: 8,
      margin: '0 2px' },

    /* Styles applied to a dot if `variant="dots"` and this is the active step. */
    dotActive: {
      backgroundColor: theme.palette.primary.main },

    /* Styles applied to the Linear Progress component if `variant="progress"`. */
    progress: {
      width: '50%' } };};



function MobileStepper(props) {var

  activeStep =









  props.activeStep,backButton = props.backButton,classes = props.classes,classNameProp = props.className,LinearProgressProps = props.LinearProgressProps,nextButton = props.nextButton,position = props.position,steps = props.steps,variant = props.variant,other = objectWithoutProperties(props, ["activeStep", "backButton", "classes", "className", "LinearProgressProps", "nextButton", "position", "steps", "variant"]);

  var className = classnames(
  classes.root,
  classes["position".concat(capitalize(position))],
  classNameProp);


  return (
    react.createElement(Paper$1, _extends_1({ square: true, elevation: 0, className: className }, other),
    backButton,
    variant === 'dots' &&
    react.createElement("div", { className: classes.dots },
    toConsumableArray(new Array(steps)).map(function (_, step) {
      var dotClassName = classnames(classes.dot, defineProperty({},
      classes.dotActive, step === activeStep));

      // eslint-disable-next-line react/no-array-index-key
      return react.createElement("div", { key: step, className: dotClassName });
    })),


    variant === 'progress' &&
    react.createElement(LinearProgress$1, _extends_1({
      className: classes.progress,
      variant: "determinate",
      value: Math.ceil(activeStep / (steps - 1) * 100) },
    LinearProgressProps)),


    nextButton));


}

MobileStepper.propTypes = {
  /**
                             * Set the active step (zero based index).
                             * Defines which dot is highlighted when the variant is 'dots'.
                             */
  activeStep: propTypes.number,
  /**
                                 * A back button element. For instance, it can be be a `Button` or a `IconButton`.
                                 */
  backButton: propTypes.node,
  /**
                               * Override or extend the styles applied to the component.
                               * See [CSS API](#css-api) below for more details.
                               */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * Properties applied to the `LinearProgress` element.
                                */
  LinearProgressProps: propTypes.object,
  /**
                                          * A next button element. For instance, it can be be a `Button` or a `IconButton`.
                                          */
  nextButton: propTypes.node,
  /**
                               * Set the positioning type.
                               */
  position: propTypes.oneOf(['bottom', 'top', 'static']),
  /**
                                                           * The total steps.
                                                           */
  steps: propTypes.number.isRequired,
  /**
                                       * The variant to use.
                                       */
  variant: propTypes.oneOf(['text', 'dots', 'progress']) };


MobileStepper.defaultProps = {
  activeStep: 0,
  position: 'bottom',
  variant: 'dots' };


withStyles(styles$15, { name: 'MuiMobileStepper' })(MobileStepper);

/**
                                      * @ignore - internal component.
                                      */
function NativeSelectInput(props) {var _classNames;var

  children =










  props.children,classes = props.classes,className = props.className,disabled = props.disabled,IconComponent = props.IconComponent,inputRef = props.inputRef,name = props.name,onChange = props.onChange,value = props.value,variant = props.variant,other = objectWithoutProperties(props, ["children", "classes", "className", "disabled", "IconComponent", "inputRef", "name", "onChange", "value", "variant"]);

  return (
    react.createElement("div", { className: classes.root },
    react.createElement("select", _extends_1({
      className: classnames(
      classes.select, (_classNames = {}, defineProperty(_classNames,

      classes.filled, variant === 'filled'), defineProperty(_classNames,
      classes.outlined, variant === 'outlined'), defineProperty(_classNames,
      classes.disabled, disabled), _classNames),

      className),

      name: name,
      disabled: disabled,
      onChange: onChange,
      value: value,
      ref: inputRef },
    other),

    children),

    react.createElement(IconComponent, { className: classes.icon })));


}

NativeSelectInput.propTypes = {
  /**
                                 * The option elements to populate the select with.
                                 * Can be some `<option>` elements.
                                 */
  children: propTypes.node,
  /**
                             * Override or extend the styles applied to the component.
                             * See [CSS API](#css-api) below for more details.
                             */
  classes: propTypes.object.isRequired,
  /**
                                         * The CSS class name of the select element.
                                         */
  className: propTypes.string,
  /**
                                * If `true`, the select will be disabled.
                                */
  disabled: propTypes.bool,
  /**
                             * The icon that displays the arrow.
                             */
  IconComponent: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                             * Use that property to pass a ref callback to the native select element.
                                                                                             */
  inputRef: propTypes.oneOfType([propTypes.func, propTypes.object]),
  /**
                                                                      * Name attribute of the `select` or hidden `input` element.
                                                                      */
  name: propTypes.string,
  /**
                           * Callback function fired when a menu item is selected.
                           *
                           * @param {object} event The event source of the callback.
                           * You can pull out the new value by accessing `event.target.value`.
                           */
  onChange: propTypes.func,
  /**
                             * The input value.
                             */
  value: propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.bool]),
  /**
                                                                                     * The variant to use.
                                                                                     */
  variant: propTypes.oneOf(['standard', 'outlined', 'filled']) };

/**
                                      * @ignore - internal component.
                                      */
var ArrowDropDown = function ArrowDropDown(props) {return (
    react.createElement(SvgIcon$1, props,
    react.createElement("path", { d: "M7 10l5 5 5-5z" })));};



ArrowDropDown = pure(ArrowDropDown);
ArrowDropDown.muiName = 'SvgIcon';

var ArrowDropDownIcon = ArrowDropDown;

var styles$16 = function styles(theme) {return {
    /* Styles applied to the `Input` component `root` class. */
    root: {
      position: 'relative',
      width: '100%' },

    /* Styles applied to the `Input` component `select` class. */
    select: {
      '-moz-appearance': 'none', // Reset
      '-webkit-appearance': 'none', // Reset
      // When interacting quickly, the text can end up selected.
      // Native select can't be selected either.
      userSelect: 'none',
      paddingRight: 32,
      borderRadius: 0, // Reset
      height: '1.1875em', // Reset (19px), match the native input line-height
      width: 'calc(100% - 32px)',
      minWidth: 16, // So it doesn't collapse.
      cursor: 'pointer',
      '&:focus': {
        // Show that it's not an text input
        background:
        theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.05)' : 'rgba(255, 255, 255, 0.05)',
        borderRadius: 0 // Reset Chrome style
      },
      // Remove IE 11 arrow
      '&::-ms-expand': {
        display: 'none' },

      '&$disabled': {
        cursor: 'default' } },


    /* Styles applied to the `Input` component if `variant="filled"`. */
    filled: {
      width: 'calc(100% - 44px)' },

    /* Styles applied to the `Input` component if `variant="outlined"`. */
    outlined: {
      width: 'calc(100% - 46px)',
      borderRadius: theme.shape.borderRadius },

    /* Styles applied to the `Input` component `selectMenu` class. */
    selectMenu: {
      width: 'auto', // Fix Safari textOverflow
      height: 'auto', // Reset
      textOverflow: 'ellipsis',
      whiteSpace: 'nowrap',
      overflow: 'hidden',
      minHeight: '1.1875em' // Reset (19px), match the native input line-height
    },
    /* Styles applied to the `Input` component `disabled` class. */
    disabled: {},
    /* Styles applied to the `Input` component `icon` class. */
    icon: {
      // We use a position absolute over a flexbox in order to forward the pointer events
      // to the input.
      position: 'absolute',
      right: 0,
      top: 'calc(50% - 12px)', // Center vertically
      color: theme.palette.action.active,
      'pointer-events': 'none' // Don't block pointer events on the select under the icon.
    } };};


/**
            * An alternative to `<Select native />` with a much smaller bundle size footprint.
            */
function NativeSelect(props) {var

  children =







  props.children,classes = props.classes,IconComponent = props.IconComponent,input = props.input,inputProps = props.inputProps,muiFormControl = props.muiFormControl,variant = props.variant,other = objectWithoutProperties(props, ["children", "classes", "IconComponent", "input", "inputProps", "muiFormControl", "variant"]);
  var fcs = formControlState({
    props: props,
    muiFormControl: muiFormControl,
    states: ['variant'] });


  return react.cloneElement(input, objectSpread({
    // Most of the logic is implemented in `NativeSelectInput`.
    // The `Select` component is a simple API wrapper to expose something better to play with.
    inputComponent: NativeSelectInput,
    inputProps: objectSpread({
      children: children,
      classes: classes,
      IconComponent: IconComponent,
      variant: fcs.variant,
      type: undefined },
    inputProps,
    input ? input.props.inputProps : {}) },

  other));

}

NativeSelect.propTypes = {
  /**
                            * The option elements to populate the select with.
                            * Can be some `<option>` elements.
                            */
  children: propTypes.node,
  /**
                             * Override or extend the styles applied to the component.
                             * See [CSS API](#css-api) below for more details.
                             */
  classes: propTypes.object.isRequired,
  /**
                                         * The icon that displays the arrow.
                                         */
  IconComponent: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                             * An `Input` element; does not have to be a material-ui specific `Input`.
                                                                                             */
  input: propTypes.element,
  /**
                             * Attributes applied to the `select` element.
                             */
  inputProps: propTypes.object,
  /**
                                 * @ignore
                                 */
  muiFormControl: propTypes.object,
  /**
                                     * Callback function fired when a menu item is selected.
                                     *
                                     * @param {object} event The event source of the callback.
                                     * You can pull out the new value by accessing `event.target.value`.
                                     */
  onChange: propTypes.func,
  /**
                             * The input value.
                             */
  value: propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.bool]),
  /**
                                                                                     * The variant to use.
                                                                                     */
  variant: propTypes.oneOf(['standard', 'outlined', 'filled']) };


NativeSelect.defaultProps = {
  IconComponent: ArrowDropDownIcon,
  input: react.createElement(Input$1, null) };


NativeSelect.muiName = 'Select';

withStyles(styles$16, { name: 'MuiNativeSelect' })(
withFormControlContext(NativeSelect));

var styles$17 = function styles(theme) {
  var align = theme.direction === 'rtl' ? 'right' : 'left';

  return {
    /* Styles applied to the root element. */
    root: {
      position: 'absolute',
      bottom: 0,
      right: 0,
      top: -5,
      left: 0,
      margin: 0,
      padding: 0,
      pointerEvents: 'none',
      borderRadius: theme.shape.borderRadius,
      borderStyle: 'solid',
      borderWidth: 1,
      // Match the Input Label
      transition: theme.transitions.create(["padding-".concat(align), 'border-color', 'border-width'], {
        duration: theme.transitions.duration.shorter,
        easing: theme.transitions.easing.easeOut }) },


    /* Styles applied to the legend element. */
    legend: {
      textAlign: 'left',
      padding: 0,
      lineHeight: '10px',
      transition: theme.transitions.create('width', {
        duration: theme.transitions.duration.shorter,
        easing: theme.transitions.easing.easeOut }) } };



};

/**
    * @ignore - internal component.
    */
function NotchedOutline(props) {var

  children =







  props.children,classes = props.classes,className = props.className,labelWidthProp = props.labelWidth,notched = props.notched,style = props.style,theme = props.theme,other = objectWithoutProperties(props, ["children", "classes", "className", "labelWidth", "notched", "style", "theme"]);

  var align = theme.direction === 'rtl' ? 'right' : 'left';
  var labelWidth = labelWidthProp > 0 ? labelWidthProp * 0.75 + 8 : 0;

  return (
    react.createElement("fieldset", _extends_1({
      "aria-hidden": true,
      style: objectSpread(defineProperty({}, "padding".concat(
      capitalize(align)), 8 + (notched ? 0 : labelWidth / 2)),
      style),

      className: classnames(classes.root, className) },
    other),

    react.createElement("legend", {
      className: classes.legend,
      style: {
        // IE 11: fieldset with legend does not render
        // a border radius. This maintains consistency
        // by always having a legend rendered
        width: notched ? labelWidth : 0.01 } },




    react.createElement("span", { dangerouslySetInnerHTML: { __html: '&#8203;' } }))));



}

NotchedOutline.propTypes = {
  /**
                              * Override or extend the styles applied to the component.
                              * See [CSS API](#css-api) below for more details.
                              */
  classes: propTypes.object,
  /**
                              * @ignore
                              */
  className: propTypes.string,
  /**
                                * The width of the legend.
                                */
  labelWidth: propTypes.number.isRequired,
  /**
                                            * If `true`, the outline is notched to accommodate the label.
                                            */
  notched: propTypes.bool.isRequired,
  /**
                                       * @ignore
                                       */
  style: propTypes.object,
  /**
                            * @ignore
                            */
  theme: propTypes.object };


var NotchedOutline$1 = withStyles(styles$17, { name: 'MuiPrivateNotchedOutline', withTheme: true })(
NotchedOutline);

var styles$18 = function styles(theme) {
  var borderColor =
  theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)';

  return {
    /* Styles applied to the root element. */
    root: {
      position: 'relative',
      '& $notchedOutline': {
        borderColor: borderColor },

      '&:hover:not($disabled):not($focused):not($error) $notchedOutline': {
        borderColor: theme.palette.text.primary,
        // Reset on touch devices, it doesn't add specificity
        '@media (hover: none)': {
          borderColor: borderColor } },


      '&$focused $notchedOutline': {
        borderColor: theme.palette.primary.main,
        borderWidth: 2 },

      '&$error $notchedOutline': {
        borderColor: theme.palette.error.main },

      '&$disabled $notchedOutline': {
        borderColor: theme.palette.action.disabled } },


    /* Styles applied to the root element if the component is focused. */
    focused: {},
    /* Styles applied to the root element if `disabled={true}`. */
    disabled: {},
    /* Styles applied to the root element if `startAdornment` is provided. */
    adornedStart: {
      paddingLeft: 14 },

    /* Styles applied to the root element if `endAdornment` is provided. */
    adornedEnd: {
      paddingRight: 14 },

    /* Styles applied to the root element if `error={true}`. */
    error: {},
    /* Styles applied to the root element if `multiline={true}`. */
    multiline: {
      padding: '18.5px 14px',
      boxSizing: 'border-box' // Prevent padding issue with fullWidth.
    },
    /* Styles applied to the `NotchedOutline` element. */
    notchedOutline: {},
    /* Styles applied to the `input` element. */
    input: {
      padding: '18.5px 14px' },

    /* Styles applied to the `input` element if `margin="dense"`. */
    inputMarginDense: {
      paddingTop: 15,
      paddingBottom: 15 },

    /* Styles applied to the `input` element if `multiline={true}`. */
    inputMultiline: {
      padding: 0 },

    /* Styles applied to the `input` element if `startAdornment` is provided. */
    inputAdornedStart: {
      paddingLeft: 0 },

    /* Styles applied to the `input` element if `endAdornment` is provided. */
    inputAdornedEnd: {
      paddingRight: 0 } };


};

function OutlinedInput(props) {var
  classes = props.classes,labelWidth = props.labelWidth,notched = props.notched,other = objectWithoutProperties(props, ["classes", "labelWidth", "notched"]);

  return (
    react.createElement(InputBase$1, _extends_1({
      renderPrefix: function renderPrefix(state) {return (
          react.createElement(NotchedOutline$1, {
            className: classes.notchedOutline,
            labelWidth: labelWidth,
            notched:
            typeof notched !== 'undefined' ?
            notched :
            Boolean(state.startAdornment || state.filled || state.focused) }));},



      classes: objectSpread({},
      classes, {
        root: classnames(classes.root, classes.underline),
        notchedOutline: null }) },

    other)));


}

OutlinedInput.propTypes = {
  /**
                             * This property helps users to fill forms faster, especially on mobile devices.
                             * The name can be confusing, as it's more like an autofill.
                             * You can learn more about it here:
                             * https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill
                             */
  autoComplete: propTypes.string,
  /**
                                   * If `true`, the input will be focused during the first mount.
                                   */
  autoFocus: propTypes.bool,
  /**
                              * Override or extend the styles applied to the component.
                              * See [CSS API](#css-api) below for more details.
                              */
  classes: propTypes.object.isRequired,
  /**
                                         * The CSS class name of the wrapper element.
                                         */
  className: propTypes.string,
  /**
                                * The default input value, useful when not controlling the component.
                                */
  defaultValue: propTypes.oneOfType([propTypes.string, propTypes.number]),
  /**
                                                                            * If `true`, the input will be disabled.
                                                                            */
  disabled: propTypes.bool,
  /**
                             * End `InputAdornment` for this component.
                             */
  endAdornment: propTypes.node,
  /**
                                 * If `true`, the input will indicate an error. This is normally obtained via context from
                                 * FormControl.
                                 */
  error: propTypes.bool,
  /**
                          * If `true`, the input will take up the full width of its container.
                          */
  fullWidth: propTypes.bool,
  /**
                              * The id of the `input` element.
                              */
  id: propTypes.string,
  /**
                         * The component used for the native input.
                         * Either a string to use a DOM element or a component.
                         */
  inputComponent: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                              * Attributes applied to the `input` element.
                                                                                              */
  inputProps: propTypes.object,
  /**
                                 * Use that property to pass a ref callback to the native input component.
                                 */
  inputRef: propTypes.oneOfType([propTypes.func, propTypes.object]),
  /**
                                                                      * The width of the legend.
                                                                      */
  labelWidth: propTypes.number.isRequired,
  /**
                                            * If `dense`, will adjust vertical spacing. This is normally obtained via context from
                                            * FormControl.
                                            */
  margin: propTypes.oneOf(['dense', 'none']),
  /**
                                               * If `true`, a textarea element will be rendered.
                                               */
  multiline: propTypes.bool,
  /**
                              * Name attribute of the `input` element.
                              */
  name: propTypes.string,
  /**
                           * If `true`, the outline is notched to accommodate the label.
                           */
  notched: propTypes.bool,
  /**
                            * Callback fired when the value is changed.
                            *
                            * @param {object} event The event source of the callback.
                            * You can pull out the new value by accessing `event.target.value`.
                            */
  onChange: propTypes.func,
  /**
                             * The short hint displayed in the input before the user enters a value.
                             */
  placeholder: propTypes.string,
  /**
                                  * It prevents the user from changing the value of the field
                                  * (not from interacting with the field).
                                  */
  readOnly: propTypes.bool,
  /**
                             * If `true`, the input will be required.
                             */
  required: propTypes.bool,
  /**
                             * Number of rows to display when multiline option is set to true.
                             */
  rows: propTypes.oneOfType([propTypes.string, propTypes.number]),
  /**
                                                                    * Maximum number of rows to display when multiline option is set to true.
                                                                    */
  rowsMax: propTypes.oneOfType([propTypes.string, propTypes.number]),
  /**
                                                                       * Start `InputAdornment` for this component.
                                                                       */
  startAdornment: propTypes.node,
  /**
                                   * Type of the input element. It should be a valid HTML5 input type.
                                   */
  type: propTypes.string,
  /**
                           * The input value, required for a controlled component.
                           */
  value: propTypes.oneOfType([
  propTypes.string,
  propTypes.number,
  propTypes.bool,
  propTypes.arrayOf(propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.bool]))]) };



InputBase$1.defaultProps = {
  fullWidth: false,
  inputComponent: 'input',
  multiline: false,
  type: 'text' };


OutlinedInput.muiName = 'Input';

var OutlinedInput$1 = withStyles(styles$18, { name: 'MuiOutlinedInput' })(OutlinedInput);

/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.14.6
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var isBrowser$1 = typeof window !== 'undefined' && typeof document !== 'undefined';

var longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];
var timeoutDuration = 0;
for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {
  if (isBrowser$1 && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {
    timeoutDuration = 1;
    break;
  }
}

function microtaskDebounce(fn) {
  var called = false;
  return function () {
    if (called) {
      return;
    }
    called = true;
    window.Promise.resolve().then(function () {
      called = false;
      fn();
    });
  };
}

function taskDebounce(fn) {
  var scheduled = false;
  return function () {
    if (!scheduled) {
      scheduled = true;
      setTimeout(function () {
        scheduled = false;
        fn();
      }, timeoutDuration);
    }
  };
}

var supportsMicroTasks = isBrowser$1 && window.Promise;

/**
* Create a debounced version of a method, that's asynchronously deferred
* but called in the minimum time possible.
*
* @method
* @memberof Popper.Utils
* @argument {Function} fn
* @returns {Function}
*/
var debounce$1 = supportsMicroTasks ? microtaskDebounce : taskDebounce;

/**
 * Check if the given variable is a function
 * @method
 * @memberof Popper.Utils
 * @argument {Any} functionToCheck - variable to check
 * @returns {Boolean} answer to: is a function?
 */
function isFunction(functionToCheck) {
  var getType = {};
  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
}

/**
 * Get CSS computed property of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Eement} element
 * @argument {String} property
 */
function getStyleComputedProperty(element, property) {
  if (element.nodeType !== 1) {
    return [];
  }
  // NOTE: 1 DOM access here
  var window = element.ownerDocument.defaultView;
  var css = window.getComputedStyle(element, null);
  return property ? css[property] : css;
}

/**
 * Returns the parentNode or the host of the element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} parent
 */
function getParentNode(element) {
  if (element.nodeName === 'HTML') {
    return element;
  }
  return element.parentNode || element.host;
}

/**
 * Returns the scrolling parent of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} scroll parent
 */
function getScrollParent$1(element) {
  // Return body, `getScroll` will take care to get the correct `scrollTop` from it
  if (!element) {
    return document.body;
  }

  switch (element.nodeName) {
    case 'HTML':
    case 'BODY':
      return element.ownerDocument.body;
    case '#document':
      return element.body;
  }

  // Firefox want us to check `-x` and `-y` variations as well

  var _getStyleComputedProp = getStyleComputedProperty(element),
      overflow = _getStyleComputedProp.overflow,
      overflowX = _getStyleComputedProp.overflowX,
      overflowY = _getStyleComputedProp.overflowY;

  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {
    return element;
  }

  return getScrollParent$1(getParentNode(element));
}

var isIE11 = isBrowser$1 && !!(window.MSInputMethodContext && document.documentMode);
var isIE10 = isBrowser$1 && /MSIE 10/.test(navigator.userAgent);

/**
 * Determines if the browser is Internet Explorer
 * @method
 * @memberof Popper.Utils
 * @param {Number} version to check
 * @returns {Boolean} isIE
 */
function isIE(version) {
  if (version === 11) {
    return isIE11;
  }
  if (version === 10) {
    return isIE10;
  }
  return isIE11 || isIE10;
}

/**
 * Returns the offset parent of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} offset parent
 */
function getOffsetParent(element) {
  if (!element) {
    return document.documentElement;
  }

  var noOffsetParent = isIE(10) ? document.body : null;

  // NOTE: 1 DOM access here
  var offsetParent = element.offsetParent || null;
  // Skip hidden elements which don't have an offsetParent
  while (offsetParent === noOffsetParent && element.nextElementSibling) {
    offsetParent = (element = element.nextElementSibling).offsetParent;
  }

  var nodeName = offsetParent && offsetParent.nodeName;

  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {
    return element ? element.ownerDocument.documentElement : document.documentElement;
  }

  // .offsetParent will return the closest TH, TD or TABLE in case
  // no offsetParent is present, I hate this job...
  if (['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {
    return getOffsetParent(offsetParent);
  }

  return offsetParent;
}

function isOffsetContainer(element) {
  var nodeName = element.nodeName;

  if (nodeName === 'BODY') {
    return false;
  }
  return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;
}

/**
 * Finds the root node (document, shadowDOM root) of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} node
 * @returns {Element} root node
 */
function getRoot(node) {
  if (node.parentNode !== null) {
    return getRoot(node.parentNode);
  }

  return node;
}

/**
 * Finds the offset parent common to the two provided nodes
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element1
 * @argument {Element} element2
 * @returns {Element} common offset parent
 */
function findCommonOffsetParent(element1, element2) {
  // This check is needed to avoid errors in case one of the elements isn't defined for any reason
  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {
    return document.documentElement;
  }

  // Here we make sure to give as "start" the element that comes first in the DOM
  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;
  var start = order ? element1 : element2;
  var end = order ? element2 : element1;

  // Get common ancestor container
  var range = document.createRange();
  range.setStart(start, 0);
  range.setEnd(end, 0);
  var commonAncestorContainer = range.commonAncestorContainer;

  // Both nodes are inside #document

  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {
    if (isOffsetContainer(commonAncestorContainer)) {
      return commonAncestorContainer;
    }

    return getOffsetParent(commonAncestorContainer);
  }

  // one of the nodes is inside shadowDOM, find which one
  var element1root = getRoot(element1);
  if (element1root.host) {
    return findCommonOffsetParent(element1root.host, element2);
  } else {
    return findCommonOffsetParent(element1, getRoot(element2).host);
  }
}

/**
 * Gets the scroll value of the given element in the given side (top and left)
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @argument {String} side `top` or `left`
 * @returns {number} amount of scrolled pixels
 */
function getScroll(element) {
  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';

  var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';
  var nodeName = element.nodeName;

  if (nodeName === 'BODY' || nodeName === 'HTML') {
    var html = element.ownerDocument.documentElement;
    var scrollingElement = element.ownerDocument.scrollingElement || html;
    return scrollingElement[upperSide];
  }

  return element[upperSide];
}

/*
 * Sum or subtract the element scroll values (left and top) from a given rect object
 * @method
 * @memberof Popper.Utils
 * @param {Object} rect - Rect object you want to change
 * @param {HTMLElement} element - The element from the function reads the scroll values
 * @param {Boolean} subtract - set to true if you want to subtract the scroll values
 * @return {Object} rect - The modifier rect object
 */
function includeScroll(rect, element) {
  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  var scrollTop = getScroll(element, 'top');
  var scrollLeft = getScroll(element, 'left');
  var modifier = subtract ? -1 : 1;
  rect.top += scrollTop * modifier;
  rect.bottom += scrollTop * modifier;
  rect.left += scrollLeft * modifier;
  rect.right += scrollLeft * modifier;
  return rect;
}

/*
 * Helper to detect borders of a given element
 * @method
 * @memberof Popper.Utils
 * @param {CSSStyleDeclaration} styles
 * Result of `getStyleComputedProperty` on the given element
 * @param {String} axis - `x` or `y`
 * @return {number} borders - The borders size of the given axis
 */

function getBordersSize(styles, axis) {
  var sideA = axis === 'x' ? 'Left' : 'Top';
  var sideB = sideA === 'Left' ? 'Right' : 'Bottom';

  return parseFloat(styles['border' + sideA + 'Width'], 10) + parseFloat(styles['border' + sideB + 'Width'], 10);
}

function getSize(axis, body, html, computedStyle) {
  return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE(10) ? parseInt(html['offset' + axis]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')]) : 0);
}

function getWindowSizes(document) {
  var body = document.body;
  var html = document.documentElement;
  var computedStyle = isIE(10) && getComputedStyle(html);

  return {
    height: getSize('Height', body, html, computedStyle),
    width: getSize('Width', body, html, computedStyle)
  };
}

var classCallCheck$2 = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass$2 = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();





var defineProperty$2 = function (obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

/**
 * Given element offsets, generate an output similar to getBoundingClientRect
 * @method
 * @memberof Popper.Utils
 * @argument {Object} offsets
 * @returns {Object} ClientRect like output
 */
function getClientRect(offsets) {
  return _extends({}, offsets, {
    right: offsets.left + offsets.width,
    bottom: offsets.top + offsets.height
  });
}

/**
 * Get bounding client rect of given element
 * @method
 * @memberof Popper.Utils
 * @param {HTMLElement} element
 * @return {Object} client rect
 */
function getBoundingClientRect(element) {
  var rect = {};

  // IE10 10 FIX: Please, don't ask, the element isn't
  // considered in DOM in some circumstances...
  // This isn't reproducible in IE10 compatibility mode of IE11
  try {
    if (isIE(10)) {
      rect = element.getBoundingClientRect();
      var scrollTop = getScroll(element, 'top');
      var scrollLeft = getScroll(element, 'left');
      rect.top += scrollTop;
      rect.left += scrollLeft;
      rect.bottom += scrollTop;
      rect.right += scrollLeft;
    } else {
      rect = element.getBoundingClientRect();
    }
  } catch (e) {}

  var result = {
    left: rect.left,
    top: rect.top,
    width: rect.right - rect.left,
    height: rect.bottom - rect.top
  };

  // subtract scrollbar size from sizes
  var sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};
  var width = sizes.width || element.clientWidth || result.right - result.left;
  var height = sizes.height || element.clientHeight || result.bottom - result.top;

  var horizScrollbar = element.offsetWidth - width;
  var vertScrollbar = element.offsetHeight - height;

  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`
  // we make this check conditional for performance reasons
  if (horizScrollbar || vertScrollbar) {
    var styles = getStyleComputedProperty(element);
    horizScrollbar -= getBordersSize(styles, 'x');
    vertScrollbar -= getBordersSize(styles, 'y');

    result.width -= horizScrollbar;
    result.height -= vertScrollbar;
  }

  return getClientRect(result);
}

function getOffsetRectRelativeToArbitraryNode(children, parent) {
  var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  var isIE10 = isIE(10);
  var isHTML = parent.nodeName === 'HTML';
  var childrenRect = getBoundingClientRect(children);
  var parentRect = getBoundingClientRect(parent);
  var scrollParent = getScrollParent$1(children);

  var styles = getStyleComputedProperty(parent);
  var borderTopWidth = parseFloat(styles.borderTopWidth, 10);
  var borderLeftWidth = parseFloat(styles.borderLeftWidth, 10);

  // In cases where the parent is fixed, we must ignore negative scroll in offset calc
  if (fixedPosition && isHTML) {
    parentRect.top = Math.max(parentRect.top, 0);
    parentRect.left = Math.max(parentRect.left, 0);
  }
  var offsets = getClientRect({
    top: childrenRect.top - parentRect.top - borderTopWidth,
    left: childrenRect.left - parentRect.left - borderLeftWidth,
    width: childrenRect.width,
    height: childrenRect.height
  });
  offsets.marginTop = 0;
  offsets.marginLeft = 0;

  // Subtract margins of documentElement in case it's being used as parent
  // we do this only on HTML because it's the only element that behaves
  // differently when margins are applied to it. The margins are included in
  // the box of the documentElement, in the other cases not.
  if (!isIE10 && isHTML) {
    var marginTop = parseFloat(styles.marginTop, 10);
    var marginLeft = parseFloat(styles.marginLeft, 10);

    offsets.top -= borderTopWidth - marginTop;
    offsets.bottom -= borderTopWidth - marginTop;
    offsets.left -= borderLeftWidth - marginLeft;
    offsets.right -= borderLeftWidth - marginLeft;

    // Attach marginTop and marginLeft because in some circumstances we may need them
    offsets.marginTop = marginTop;
    offsets.marginLeft = marginLeft;
  }

  if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {
    offsets = includeScroll(offsets, parent);
  }

  return offsets;
}

function getViewportOffsetRectRelativeToArtbitraryNode(element) {
  var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  var html = element.ownerDocument.documentElement;
  var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);
  var width = Math.max(html.clientWidth, window.innerWidth || 0);
  var height = Math.max(html.clientHeight, window.innerHeight || 0);

  var scrollTop = !excludeScroll ? getScroll(html) : 0;
  var scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;

  var offset = {
    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,
    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,
    width: width,
    height: height
  };

  return getClientRect(offset);
}

/**
 * Check if the given element is fixed or is inside a fixed parent
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @argument {Element} customContainer
 * @returns {Boolean} answer to "isFixed?"
 */
function isFixed(element) {
  var nodeName = element.nodeName;
  if (nodeName === 'BODY' || nodeName === 'HTML') {
    return false;
  }
  if (getStyleComputedProperty(element, 'position') === 'fixed') {
    return true;
  }
  return isFixed(getParentNode(element));
}

/**
 * Finds the first parent of an element that has a transformed property defined
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} first transformed parent or documentElement
 */

function getFixedPositionOffsetParent(element) {
  // This check is needed to avoid errors in case one of the elements isn't defined for any reason
  if (!element || !element.parentElement || isIE()) {
    return document.documentElement;
  }
  var el = element.parentElement;
  while (el && getStyleComputedProperty(el, 'transform') === 'none') {
    el = el.parentElement;
  }
  return el || document.documentElement;
}

/**
 * Computed the boundaries limits and return them
 * @method
 * @memberof Popper.Utils
 * @param {HTMLElement} popper
 * @param {HTMLElement} reference
 * @param {number} padding
 * @param {HTMLElement} boundariesElement - Element used to define the boundaries
 * @param {Boolean} fixedPosition - Is in fixed position mode
 * @returns {Object} Coordinates of the boundaries
 */
function getBoundaries(popper, reference, padding, boundariesElement) {
  var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

  // NOTE: 1 DOM access here

  var boundaries = { top: 0, left: 0 };
  var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);

  // Handle viewport case
  if (boundariesElement === 'viewport') {
    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);
  } else {
    // Handle other cases based on DOM element used as boundaries
    var boundariesNode = void 0;
    if (boundariesElement === 'scrollParent') {
      boundariesNode = getScrollParent$1(getParentNode(reference));
      if (boundariesNode.nodeName === 'BODY') {
        boundariesNode = popper.ownerDocument.documentElement;
      }
    } else if (boundariesElement === 'window') {
      boundariesNode = popper.ownerDocument.documentElement;
    } else {
      boundariesNode = boundariesElement;
    }

    var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);

    // In case of HTML, we need a different computation
    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {
      var _getWindowSizes = getWindowSizes(popper.ownerDocument),
          height = _getWindowSizes.height,
          width = _getWindowSizes.width;

      boundaries.top += offsets.top - offsets.marginTop;
      boundaries.bottom = height + offsets.top;
      boundaries.left += offsets.left - offsets.marginLeft;
      boundaries.right = width + offsets.left;
    } else {
      // for all the other DOM elements, this one is good
      boundaries = offsets;
    }
  }

  // Add paddings
  padding = padding || 0;
  var isPaddingNumber = typeof padding === 'number';
  boundaries.left += isPaddingNumber ? padding : padding.left || 0;
  boundaries.top += isPaddingNumber ? padding : padding.top || 0;
  boundaries.right -= isPaddingNumber ? padding : padding.right || 0;
  boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;

  return boundaries;
}

function getArea(_ref) {
  var width = _ref.width,
      height = _ref.height;

  return width * height;
}

/**
 * Utility used to transform the `auto` placement to the placement with more
 * available space.
 * @method
 * @memberof Popper.Utils
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {
  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;

  if (placement.indexOf('auto') === -1) {
    return placement;
  }

  var boundaries = getBoundaries(popper, reference, padding, boundariesElement);

  var rects = {
    top: {
      width: boundaries.width,
      height: refRect.top - boundaries.top
    },
    right: {
      width: boundaries.right - refRect.right,
      height: boundaries.height
    },
    bottom: {
      width: boundaries.width,
      height: boundaries.bottom - refRect.bottom
    },
    left: {
      width: refRect.left - boundaries.left,
      height: boundaries.height
    }
  };

  var sortedAreas = Object.keys(rects).map(function (key) {
    return _extends({
      key: key
    }, rects[key], {
      area: getArea(rects[key])
    });
  }).sort(function (a, b) {
    return b.area - a.area;
  });

  var filteredAreas = sortedAreas.filter(function (_ref2) {
    var width = _ref2.width,
        height = _ref2.height;
    return width >= popper.clientWidth && height >= popper.clientHeight;
  });

  var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;

  var variation = placement.split('-')[1];

  return computedPlacement + (variation ? '-' + variation : '');
}

/**
 * Get offsets to the reference element
 * @method
 * @memberof Popper.Utils
 * @param {Object} state
 * @param {Element} popper - the popper element
 * @param {Element} reference - the reference element (the popper will be relative to this)
 * @param {Element} fixedPosition - is in fixed position mode
 * @returns {Object} An object containing the offsets which will be applied to the popper
 */
function getReferenceOffsets(state, popper, reference) {
  var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

  var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);
  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);
}

/**
 * Get the outer sizes of the given element (offset size + margins)
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Object} object containing width and height properties
 */
function getOuterSizes(element) {
  var window = element.ownerDocument.defaultView;
  var styles = window.getComputedStyle(element);
  var x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);
  var y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);
  var result = {
    width: element.offsetWidth + y,
    height: element.offsetHeight + x
  };
  return result;
}

/**
 * Get the opposite placement of the given one
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement
 * @returns {String} flipped placement
 */
function getOppositePlacement(placement) {
  var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };
  return placement.replace(/left|right|bottom|top/g, function (matched) {
    return hash[matched];
  });
}

/**
 * Get offsets to the popper
 * @method
 * @memberof Popper.Utils
 * @param {Object} position - CSS position the Popper will get applied
 * @param {HTMLElement} popper - the popper element
 * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)
 * @param {String} placement - one of the valid placement options
 * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper
 */
function getPopperOffsets(popper, referenceOffsets, placement) {
  placement = placement.split('-')[0];

  // Get popper node sizes
  var popperRect = getOuterSizes(popper);

  // Add position, width and height to our offsets object
  var popperOffsets = {
    width: popperRect.width,
    height: popperRect.height
  };

  // depending by the popper placement we have to compute its offsets slightly differently
  var isHoriz = ['right', 'left'].indexOf(placement) !== -1;
  var mainSide = isHoriz ? 'top' : 'left';
  var secondarySide = isHoriz ? 'left' : 'top';
  var measurement = isHoriz ? 'height' : 'width';
  var secondaryMeasurement = !isHoriz ? 'height' : 'width';

  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;
  if (placement === secondarySide) {
    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];
  } else {
    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];
  }

  return popperOffsets;
}

/**
 * Mimics the `find` method of Array
 * @method
 * @memberof Popper.Utils
 * @argument {Array} arr
 * @argument prop
 * @argument value
 * @returns index or -1
 */
function find$1(arr, check) {
  // use native find if supported
  if (Array.prototype.find) {
    return arr.find(check);
  }

  // use `filter` to obtain the same behavior of `find`
  return arr.filter(check)[0];
}

/**
 * Return the index of the matching object
 * @method
 * @memberof Popper.Utils
 * @argument {Array} arr
 * @argument prop
 * @argument value
 * @returns index or -1
 */
function findIndex$1(arr, prop, value) {
  // use native findIndex if supported
  if (Array.prototype.findIndex) {
    return arr.findIndex(function (cur) {
      return cur[prop] === value;
    });
  }

  // use `find` + `indexOf` if `findIndex` isn't supported
  var match = find$1(arr, function (obj) {
    return obj[prop] === value;
  });
  return arr.indexOf(match);
}

/**
 * Loop trough the list of modifiers and run them in order,
 * each of them will then edit the data object.
 * @method
 * @memberof Popper.Utils
 * @param {dataObject} data
 * @param {Array} modifiers
 * @param {String} ends - Optional modifier name used as stopper
 * @returns {dataObject}
 */
function runModifiers(modifiers, data, ends) {
  var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex$1(modifiers, 'name', ends));

  modifiersToRun.forEach(function (modifier) {
    if (modifier['function']) {
      // eslint-disable-line dot-notation
      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');
    }
    var fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation
    if (modifier.enabled && isFunction(fn)) {
      // Add properties to offsets to make them a complete clientRect object
      // we do this before each modifier to make sure the previous one doesn't
      // mess with these values
      data.offsets.popper = getClientRect(data.offsets.popper);
      data.offsets.reference = getClientRect(data.offsets.reference);

      data = fn(data, modifier);
    }
  });

  return data;
}

/**
 * Updates the position of the popper, computing the new offsets and applying
 * the new style.<br />
 * Prefer `scheduleUpdate` over `update` because of performance reasons.
 * @method
 * @memberof Popper
 */
function update() {
  // if popper is destroyed, don't perform any further update
  if (this.state.isDestroyed) {
    return;
  }

  var data = {
    instance: this,
    styles: {},
    arrowStyles: {},
    attributes: {},
    flipped: false,
    offsets: {}
  };

  // compute reference element offsets
  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);

  // compute auto placement, store placement inside the data object,
  // modifiers will be able to edit `placement` if needed
  // and refer to originalPlacement to know the original value
  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);

  // store the computed placement inside `originalPlacement`
  data.originalPlacement = data.placement;

  data.positionFixed = this.options.positionFixed;

  // compute the popper offsets
  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);

  data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute';

  // run the modifiers
  data = runModifiers(this.modifiers, data);

  // the first `update` will call `onCreate` callback
  // the other ones will call `onUpdate` callback
  if (!this.state.isCreated) {
    this.state.isCreated = true;
    this.options.onCreate(data);
  } else {
    this.options.onUpdate(data);
  }
}

/**
 * Helper used to know if the given modifier is enabled.
 * @method
 * @memberof Popper.Utils
 * @returns {Boolean}
 */
function isModifierEnabled(modifiers, modifierName) {
  return modifiers.some(function (_ref) {
    var name = _ref.name,
        enabled = _ref.enabled;
    return enabled && name === modifierName;
  });
}

/**
 * Get the prefixed supported property name
 * @method
 * @memberof Popper.Utils
 * @argument {String} property (camelCase)
 * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)
 */
function getSupportedPropertyName(property) {
  var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];
  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);

  for (var i = 0; i < prefixes.length; i++) {
    var prefix = prefixes[i];
    var toCheck = prefix ? '' + prefix + upperProp : property;
    if (typeof document.body.style[toCheck] !== 'undefined') {
      return toCheck;
    }
  }
  return null;
}

/**
 * Destroys the popper.
 * @method
 * @memberof Popper
 */
function destroy() {
  this.state.isDestroyed = true;

  // touch DOM only if `applyStyle` modifier is enabled
  if (isModifierEnabled(this.modifiers, 'applyStyle')) {
    this.popper.removeAttribute('x-placement');
    this.popper.style.position = '';
    this.popper.style.top = '';
    this.popper.style.left = '';
    this.popper.style.right = '';
    this.popper.style.bottom = '';
    this.popper.style.willChange = '';
    this.popper.style[getSupportedPropertyName('transform')] = '';
  }

  this.disableEventListeners();

  // remove the popper if user explicity asked for the deletion on destroy
  // do not use `remove` because IE11 doesn't support it
  if (this.options.removeOnDestroy) {
    this.popper.parentNode.removeChild(this.popper);
  }
  return this;
}

/**
 * Get the window associated with the element
 * @argument {Element} element
 * @returns {Window}
 */
function getWindow(element) {
  var ownerDocument = element.ownerDocument;
  return ownerDocument ? ownerDocument.defaultView : window;
}

function attachToScrollParents(scrollParent, event, callback, scrollParents) {
  var isBody = scrollParent.nodeName === 'BODY';
  var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;
  target.addEventListener(event, callback, { passive: true });

  if (!isBody) {
    attachToScrollParents(getScrollParent$1(target.parentNode), event, callback, scrollParents);
  }
  scrollParents.push(target);
}

/**
 * Setup needed event listeners used to update the popper position
 * @method
 * @memberof Popper.Utils
 * @private
 */
function setupEventListeners(reference, options, state, updateBound) {
  // Resize event listener on window
  state.updateBound = updateBound;
  getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });

  // Scroll event listener on scroll parents
  var scrollElement = getScrollParent$1(reference);
  attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);
  state.scrollElement = scrollElement;
  state.eventsEnabled = true;

  return state;
}

/**
 * It will add resize/scroll events and start recalculating
 * position of the popper element when they are triggered.
 * @method
 * @memberof Popper
 */
function enableEventListeners() {
  if (!this.state.eventsEnabled) {
    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);
  }
}

/**
 * Remove event listeners used to update the popper position
 * @method
 * @memberof Popper.Utils
 * @private
 */
function removeEventListeners(reference, state) {
  // Remove resize event listener on window
  getWindow(reference).removeEventListener('resize', state.updateBound);

  // Remove scroll event listener on scroll parents
  state.scrollParents.forEach(function (target) {
    target.removeEventListener('scroll', state.updateBound);
  });

  // Reset state
  state.updateBound = null;
  state.scrollParents = [];
  state.scrollElement = null;
  state.eventsEnabled = false;
  return state;
}

/**
 * It will remove resize/scroll events and won't recalculate popper position
 * when they are triggered. It also won't trigger `onUpdate` callback anymore,
 * unless you call `update` method manually.
 * @method
 * @memberof Popper
 */
function disableEventListeners() {
  if (this.state.eventsEnabled) {
    cancelAnimationFrame(this.scheduleUpdate);
    this.state = removeEventListeners(this.reference, this.state);
  }
}

/**
 * Tells if a given input is a number
 * @method
 * @memberof Popper.Utils
 * @param {*} input to check
 * @return {Boolean}
 */
function isNumeric(n) {
  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);
}

/**
 * Set the style to the given popper
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element - Element to apply the style to
 * @argument {Object} styles
 * Object with a list of properties and values which will be applied to the element
 */
function setStyles(element, styles) {
  Object.keys(styles).forEach(function (prop) {
    var unit = '';
    // add unit if the value is numeric and is one of the following
    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {
      unit = 'px';
    }
    element.style[prop] = styles[prop] + unit;
  });
}

/**
 * Set the attributes to the given popper
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element - Element to apply the attributes to
 * @argument {Object} styles
 * Object with a list of properties and values which will be applied to the element
 */
function setAttributes(element, attributes) {
  Object.keys(attributes).forEach(function (prop) {
    var value = attributes[prop];
    if (value !== false) {
      element.setAttribute(prop, attributes[prop]);
    } else {
      element.removeAttribute(prop);
    }
  });
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} data.styles - List of style properties - values to apply to popper element
 * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The same data object
 */
function applyStyle(data) {
  // any property present in `data.styles` will be applied to the popper,
  // in this way we can make the 3rd party modifiers add custom styles to it
  // Be aware, modifiers could override the properties defined in the previous
  // lines of this modifier!
  setStyles(data.instance.popper, data.styles);

  // any property present in `data.attributes` will be applied to the popper,
  // they will be set as HTML attributes of the element
  setAttributes(data.instance.popper, data.attributes);

  // if arrowElement is defined and arrowStyles has some properties
  if (data.arrowElement && Object.keys(data.arrowStyles).length) {
    setStyles(data.arrowElement, data.arrowStyles);
  }

  return data;
}

/**
 * Set the x-placement attribute before everything else because it could be used
 * to add margins to the popper margins needs to be calculated to get the
 * correct popper offsets.
 * @method
 * @memberof Popper.modifiers
 * @param {HTMLElement} reference - The reference element used to position the popper
 * @param {HTMLElement} popper - The HTML element used as popper
 * @param {Object} options - Popper.js options
 */
function applyStyleOnLoad(reference, popper, options, modifierOptions, state) {
  // compute reference element offsets
  var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);

  // compute auto placement, store placement inside the data object,
  // modifiers will be able to edit `placement` if needed
  // and refer to originalPlacement to know the original value
  var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);

  popper.setAttribute('x-placement', placement);

  // Apply `position` to popper before anything else because
  // without the position applied we can't guarantee correct computations
  setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });

  return options;
}

/**
 * @function
 * @memberof Popper.Utils
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Boolean} shouldRound - If the offsets should be rounded at all
 * @returns {Object} The popper's position offsets rounded
 *
 * The tale of pixel-perfect positioning. It's still not 100% perfect, but as
 * good as it can be within reason.
 * Discussion here: https://github.com/FezVrasta/popper.js/pull/715
 *
 * Low DPI screens cause a popper to be blurry if not using full pixels (Safari
 * as well on High DPI screens).
 *
 * Firefox prefers no rounding for positioning and does not have blurriness on
 * high DPI screens.
 *
 * Only horizontal placement and left/right values need to be considered.
 */
function getRoundedOffsets(data, shouldRound) {
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;


  var isVertical = ['left', 'right'].indexOf(data.placement) !== -1;
  var isVariation = data.placement.indexOf('-') !== -1;
  var sameWidthOddness = reference.width % 2 === popper.width % 2;
  var bothOddWidth = reference.width % 2 === 1 && popper.width % 2 === 1;
  var noRound = function noRound(v) {
    return v;
  };

  var horizontalToInteger = !shouldRound ? noRound : isVertical || isVariation || sameWidthOddness ? Math.round : Math.floor;
  var verticalToInteger = !shouldRound ? noRound : Math.round;

  return {
    left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper.left - 1 : popper.left),
    top: verticalToInteger(popper.top),
    bottom: verticalToInteger(popper.bottom),
    right: horizontalToInteger(popper.right)
  };
}

var isFirefox = isBrowser$1 && /Firefox/i.test(navigator.userAgent);

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function computeStyle(data, options) {
  var x = options.x,
      y = options.y;
  var popper = data.offsets.popper;

  // Remove this legacy support in Popper.js v2

  var legacyGpuAccelerationOption = find$1(data.instance.modifiers, function (modifier) {
    return modifier.name === 'applyStyle';
  }).gpuAcceleration;
  if (legacyGpuAccelerationOption !== undefined) {
    console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');
  }
  var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;

  var offsetParent = getOffsetParent(data.instance.popper);
  var offsetParentRect = getBoundingClientRect(offsetParent);

  // Styles
  var styles = {
    position: popper.position
  };

  var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox);

  var sideA = x === 'bottom' ? 'top' : 'bottom';
  var sideB = y === 'right' ? 'left' : 'right';

  // if gpuAcceleration is set to `true` and transform is supported,
  //  we use `translate3d` to apply the position to the popper we
  // automatically use the supported prefixed version if needed
  var prefixedProperty = getSupportedPropertyName('transform');

  // now, let's make a step back and look at this code closely (wtf?)
  // If the content of the popper grows once it's been positioned, it
  // may happen that the popper gets misplaced because of the new content
  // overflowing its reference element
  // To avoid this problem, we provide two options (x and y), which allow
  // the consumer to define the offset origin.
  // If we position a popper on top of a reference element, we can set
  // `x` to `top` to make the popper grow towards its top instead of
  // its bottom.
  var left = void 0,
      top = void 0;
  if (sideA === 'bottom') {
    // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)
    // and not the bottom of the html element
    if (offsetParent.nodeName === 'HTML') {
      top = -offsetParent.clientHeight + offsets.bottom;
    } else {
      top = -offsetParentRect.height + offsets.bottom;
    }
  } else {
    top = offsets.top;
  }
  if (sideB === 'right') {
    if (offsetParent.nodeName === 'HTML') {
      left = -offsetParent.clientWidth + offsets.right;
    } else {
      left = -offsetParentRect.width + offsets.right;
    }
  } else {
    left = offsets.left;
  }
  if (gpuAcceleration && prefixedProperty) {
    styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';
    styles[sideA] = 0;
    styles[sideB] = 0;
    styles.willChange = 'transform';
  } else {
    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties
    var invertTop = sideA === 'bottom' ? -1 : 1;
    var invertLeft = sideB === 'right' ? -1 : 1;
    styles[sideA] = top * invertTop;
    styles[sideB] = left * invertLeft;
    styles.willChange = sideA + ', ' + sideB;
  }

  // Attributes
  var attributes = {
    'x-placement': data.placement
  };

  // Update `data` attributes, styles and arrowStyles
  data.attributes = _extends({}, attributes, data.attributes);
  data.styles = _extends({}, styles, data.styles);
  data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);

  return data;
}

/**
 * Helper used to know if the given modifier depends from another one.<br />
 * It checks if the needed modifier is listed and enabled.
 * @method
 * @memberof Popper.Utils
 * @param {Array} modifiers - list of modifiers
 * @param {String} requestingName - name of requesting modifier
 * @param {String} requestedName - name of requested modifier
 * @returns {Boolean}
 */
function isModifierRequired(modifiers, requestingName, requestedName) {
  var requesting = find$1(modifiers, function (_ref) {
    var name = _ref.name;
    return name === requestingName;
  });

  var isRequired = !!requesting && modifiers.some(function (modifier) {
    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;
  });

  if (!isRequired) {
    var _requesting = '`' + requestingName + '`';
    var requested = '`' + requestedName + '`';
    console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');
  }
  return isRequired;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function arrow(data, options) {
  var _data$offsets$arrow;

  // arrow depends on keepTogether in order to work
  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {
    return data;
  }

  var arrowElement = options.element;

  // if arrowElement is a string, suppose it's a CSS selector
  if (typeof arrowElement === 'string') {
    arrowElement = data.instance.popper.querySelector(arrowElement);

    // if arrowElement is not found, don't run the modifier
    if (!arrowElement) {
      return data;
    }
  } else {
    // if the arrowElement isn't a query selector we must check that the
    // provided DOM node is child of its popper node
    if (!data.instance.popper.contains(arrowElement)) {
      console.warn('WARNING: `arrow.element` must be child of its popper element!');
      return data;
    }
  }

  var placement = data.placement.split('-')[0];
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var isVertical = ['left', 'right'].indexOf(placement) !== -1;

  var len = isVertical ? 'height' : 'width';
  var sideCapitalized = isVertical ? 'Top' : 'Left';
  var side = sideCapitalized.toLowerCase();
  var altSide = isVertical ? 'left' : 'top';
  var opSide = isVertical ? 'bottom' : 'right';
  var arrowElementSize = getOuterSizes(arrowElement)[len];

  //
  // extends keepTogether behavior making sure the popper and its
  // reference have enough pixels in conjunction
  //

  // top/left side
  if (reference[opSide] - arrowElementSize < popper[side]) {
    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);
  }
  // bottom/right side
  if (reference[side] + arrowElementSize > popper[opSide]) {
    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];
  }
  data.offsets.popper = getClientRect(data.offsets.popper);

  // compute center of the popper
  var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;

  // Compute the sideValue using the updated popper offsets
  // take popper margin in account because we don't have this info available
  var css = getStyleComputedProperty(data.instance.popper);
  var popperMarginSide = parseFloat(css['margin' + sideCapitalized], 10);
  var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width'], 10);
  var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;

  // prevent arrowElement from being placed not contiguously to its popper
  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);

  data.arrowElement = arrowElement;
  data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty$2(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty$2(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);

  return data;
}

/**
 * Get the opposite placement variation of the given one
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement variation
 * @returns {String} flipped placement variation
 */
function getOppositeVariation(variation) {
  if (variation === 'end') {
    return 'start';
  } else if (variation === 'start') {
    return 'end';
  }
  return variation;
}

/**
 * List of accepted placements to use as values of the `placement` option.<br />
 * Valid placements are:
 * - `auto`
 * - `top`
 * - `right`
 * - `bottom`
 * - `left`
 *
 * Each placement can have a variation from this list:
 * - `-start`
 * - `-end`
 *
 * Variations are interpreted easily if you think of them as the left to right
 * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`
 * is right.<br />
 * Vertically (`left` and `right`), `start` is top and `end` is bottom.
 *
 * Some valid examples are:
 * - `top-end` (on top of reference, right aligned)
 * - `right-start` (on right of reference, top aligned)
 * - `bottom` (on bottom, centered)
 * - `auto-end` (on the side with more space available, alignment depends by placement)
 *
 * @static
 * @type {Array}
 * @enum {String}
 * @readonly
 * @method placements
 * @memberof Popper
 */
var placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];

// Get rid of `auto` `auto-start` and `auto-end`
var validPlacements = placements.slice(3);

/**
 * Given an initial placement, returns all the subsequent placements
 * clockwise (or counter-clockwise).
 *
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement - A valid placement (it accepts variations)
 * @argument {Boolean} counter - Set to true to walk the placements counterclockwise
 * @returns {Array} placements including their variations
 */
function clockwise(placement) {
  var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  var index = validPlacements.indexOf(placement);
  var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));
  return counter ? arr.reverse() : arr;
}

var BEHAVIORS = {
  FLIP: 'flip',
  CLOCKWISE: 'clockwise',
  COUNTERCLOCKWISE: 'counterclockwise'
};

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function flip(data, options) {
  // if `inner` modifier is enabled, we can't use the `flip` modifier
  if (isModifierEnabled(data.instance.modifiers, 'inner')) {
    return data;
  }

  if (data.flipped && data.placement === data.originalPlacement) {
    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides
    return data;
  }

  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);

  var placement = data.placement.split('-')[0];
  var placementOpposite = getOppositePlacement(placement);
  var variation = data.placement.split('-')[1] || '';

  var flipOrder = [];

  switch (options.behavior) {
    case BEHAVIORS.FLIP:
      flipOrder = [placement, placementOpposite];
      break;
    case BEHAVIORS.CLOCKWISE:
      flipOrder = clockwise(placement);
      break;
    case BEHAVIORS.COUNTERCLOCKWISE:
      flipOrder = clockwise(placement, true);
      break;
    default:
      flipOrder = options.behavior;
  }

  flipOrder.forEach(function (step, index) {
    if (placement !== step || flipOrder.length === index + 1) {
      return data;
    }

    placement = data.placement.split('-')[0];
    placementOpposite = getOppositePlacement(placement);

    var popperOffsets = data.offsets.popper;
    var refOffsets = data.offsets.reference;

    // using floor because the reference offsets may contain decimals we are not going to consider here
    var floor = Math.floor;
    var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);

    var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);
    var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);
    var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);
    var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);

    var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;

    // flip the variation if required
    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
    var flippedVariation = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);

    if (overlapsRef || overflowsBoundaries || flippedVariation) {
      // this boolean to detect any flip loop
      data.flipped = true;

      if (overlapsRef || overflowsBoundaries) {
        placement = flipOrder[index + 1];
      }

      if (flippedVariation) {
        variation = getOppositeVariation(variation);
      }

      data.placement = placement + (variation ? '-' + variation : '');

      // this object contains `position`, we want to preserve it along with
      // any additional property we may add in the future
      data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));

      data = runModifiers(data.instance.modifiers, data, 'flip');
    }
  });
  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function keepTogether(data) {
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var placement = data.placement.split('-')[0];
  var floor = Math.floor;
  var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
  var side = isVertical ? 'right' : 'bottom';
  var opSide = isVertical ? 'left' : 'top';
  var measurement = isVertical ? 'width' : 'height';

  if (popper[side] < floor(reference[opSide])) {
    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];
  }
  if (popper[opSide] > floor(reference[side])) {
    data.offsets.popper[opSide] = floor(reference[side]);
  }

  return data;
}

/**
 * Converts a string containing value + unit into a px value number
 * @function
 * @memberof {modifiers~offset}
 * @private
 * @argument {String} str - Value + unit string
 * @argument {String} measurement - `height` or `width`
 * @argument {Object} popperOffsets
 * @argument {Object} referenceOffsets
 * @returns {Number|String}
 * Value in pixels, or original string if no values were extracted
 */
function toValue(str, measurement, popperOffsets, referenceOffsets) {
  // separate value from unit
  var split = str.match(/((?:\-|\+)?\d*\.?\d*)(.*)/);
  var value = +split[1];
  var unit = split[2];

  // If it's not a number it's an operator, I guess
  if (!value) {
    return str;
  }

  if (unit.indexOf('%') === 0) {
    var element = void 0;
    switch (unit) {
      case '%p':
        element = popperOffsets;
        break;
      case '%':
      case '%r':
      default:
        element = referenceOffsets;
    }

    var rect = getClientRect(element);
    return rect[measurement] / 100 * value;
  } else if (unit === 'vh' || unit === 'vw') {
    // if is a vh or vw, we calculate the size based on the viewport
    var size = void 0;
    if (unit === 'vh') {
      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
    } else {
      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
    }
    return size / 100 * value;
  } else {
    // if is an explicit pixel unit, we get rid of the unit and keep the value
    // if is an implicit unit, it's px, and we return just the value
    return value;
  }
}

/**
 * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.
 * @function
 * @memberof {modifiers~offset}
 * @private
 * @argument {String} offset
 * @argument {Object} popperOffsets
 * @argument {Object} referenceOffsets
 * @argument {String} basePlacement
 * @returns {Array} a two cells array with x and y offsets in numbers
 */
function parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {
  var offsets = [0, 0];

  // Use height if placement is left or right and index is 0 otherwise use width
  // in this way the first offset will use an axis and the second one
  // will use the other one
  var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;

  // Split the offset string to obtain a list of values and operands
  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)
  var fragments = offset.split(/(\+|\-)/).map(function (frag) {
    return frag.trim();
  });

  // Detect if the offset string contains a pair of values or a single one
  // they could be separated by comma or space
  var divider = fragments.indexOf(find$1(fragments, function (frag) {
    return frag.search(/,|\s/) !== -1;
  }));

  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {
    console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');
  }

  // If divider is found, we divide the list of values and operands to divide
  // them by ofset X and Y.
  var splitRegex = /\s*,\s*|\s+/;
  var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];

  // Convert the values with units to absolute pixels to allow our computations
  ops = ops.map(function (op, index) {
    // Most of the units rely on the orientation of the popper
    var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';
    var mergeWithPrevious = false;
    return op
    // This aggregates any `+` or `-` sign that aren't considered operators
    // e.g.: 10 + +5 => [10, +, +5]
    .reduce(function (a, b) {
      if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {
        a[a.length - 1] = b;
        mergeWithPrevious = true;
        return a;
      } else if (mergeWithPrevious) {
        a[a.length - 1] += b;
        mergeWithPrevious = false;
        return a;
      } else {
        return a.concat(b);
      }
    }, [])
    // Here we convert the string values into number values (in px)
    .map(function (str) {
      return toValue(str, measurement, popperOffsets, referenceOffsets);
    });
  });

  // Loop trough the offsets arrays and execute the operations
  ops.forEach(function (op, index) {
    op.forEach(function (frag, index2) {
      if (isNumeric(frag)) {
        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);
      }
    });
  });
  return offsets;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @argument {Number|String} options.offset=0
 * The offset value as described in the modifier description
 * @returns {Object} The data object, properly modified
 */
function offset(data, _ref) {
  var offset = _ref.offset;
  var placement = data.placement,
      _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var basePlacement = placement.split('-')[0];

  var offsets = void 0;
  if (isNumeric(+offset)) {
    offsets = [+offset, 0];
  } else {
    offsets = parseOffset(offset, popper, reference, basePlacement);
  }

  if (basePlacement === 'left') {
    popper.top += offsets[0];
    popper.left -= offsets[1];
  } else if (basePlacement === 'right') {
    popper.top += offsets[0];
    popper.left += offsets[1];
  } else if (basePlacement === 'top') {
    popper.left += offsets[0];
    popper.top -= offsets[1];
  } else if (basePlacement === 'bottom') {
    popper.left += offsets[0];
    popper.top += offsets[1];
  }

  data.popper = popper;
  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function preventOverflow(data, options) {
  var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);

  // If offsetParent is the reference element, we really want to
  // go one step up and use the next offsetParent as reference to
  // avoid to make this modifier completely useless and look like broken
  if (data.instance.reference === boundariesElement) {
    boundariesElement = getOffsetParent(boundariesElement);
  }

  // NOTE: DOM access here
  // resets the popper's position so that the document size can be calculated excluding
  // the size of the popper element itself
  var transformProp = getSupportedPropertyName('transform');
  var popperStyles = data.instance.popper.style; // assignment to help minification
  var top = popperStyles.top,
      left = popperStyles.left,
      transform = popperStyles[transformProp];

  popperStyles.top = '';
  popperStyles.left = '';
  popperStyles[transformProp] = '';

  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);

  // NOTE: DOM access here
  // restores the original style properties after the offsets have been computed
  popperStyles.top = top;
  popperStyles.left = left;
  popperStyles[transformProp] = transform;

  options.boundaries = boundaries;

  var order = options.priority;
  var popper = data.offsets.popper;

  var check = {
    primary: function primary(placement) {
      var value = popper[placement];
      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {
        value = Math.max(popper[placement], boundaries[placement]);
      }
      return defineProperty$2({}, placement, value);
    },
    secondary: function secondary(placement) {
      var mainSide = placement === 'right' ? 'left' : 'top';
      var value = popper[mainSide];
      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {
        value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));
      }
      return defineProperty$2({}, mainSide, value);
    }
  };

  order.forEach(function (placement) {
    var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';
    popper = _extends({}, popper, check[side](placement));
  });

  data.offsets.popper = popper;

  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function shift(data) {
  var placement = data.placement;
  var basePlacement = placement.split('-')[0];
  var shiftvariation = placement.split('-')[1];

  // if shift shiftvariation is specified, run the modifier
  if (shiftvariation) {
    var _data$offsets = data.offsets,
        reference = _data$offsets.reference,
        popper = _data$offsets.popper;

    var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;
    var side = isVertical ? 'left' : 'top';
    var measurement = isVertical ? 'width' : 'height';

    var shiftOffsets = {
      start: defineProperty$2({}, side, reference[side]),
      end: defineProperty$2({}, side, reference[side] + reference[measurement] - popper[measurement])
    };

    data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);
  }

  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function hide(data) {
  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {
    return data;
  }

  var refRect = data.offsets.reference;
  var bound = find$1(data.instance.modifiers, function (modifier) {
    return modifier.name === 'preventOverflow';
  }).boundaries;

  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {
    // Avoid unnecessary DOM access if visibility hasn't changed
    if (data.hide === true) {
      return data;
    }

    data.hide = true;
    data.attributes['x-out-of-boundaries'] = '';
  } else {
    // Avoid unnecessary DOM access if visibility hasn't changed
    if (data.hide === false) {
      return data;
    }

    data.hide = false;
    data.attributes['x-out-of-boundaries'] = false;
  }

  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function inner(data) {
  var placement = data.placement;
  var basePlacement = placement.split('-')[0];
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;

  var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;

  popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);

  data.placement = getOppositePlacement(placement);
  data.offsets.popper = getClientRect(popper);

  return data;
}

/**
 * Modifier function, each modifier can have a function of this type assigned
 * to its `fn` property.<br />
 * These functions will be called on each update, this means that you must
 * make sure they are performant enough to avoid performance bottlenecks.
 *
 * @function ModifierFn
 * @argument {dataObject} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {dataObject} The data object, properly modified
 */

/**
 * Modifiers are plugins used to alter the behavior of your poppers.<br />
 * Popper.js uses a set of 9 modifiers to provide all the basic functionalities
 * needed by the library.
 *
 * Usually you don't want to override the `order`, `fn` and `onLoad` props.
 * All the other properties are configurations that could be tweaked.
 * @namespace modifiers
 */
var modifiers = {
  /**
   * Modifier used to shift the popper on the start or end of its reference
   * element.<br />
   * It will read the variation of the `placement` property.<br />
   * It can be one either `-end` or `-start`.
   * @memberof modifiers
   * @inner
   */
  shift: {
    /** @prop {number} order=100 - Index used to define the order of execution */
    order: 100,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: shift
  },

  /**
   * The `offset` modifier can shift your popper on both its axis.
   *
   * It accepts the following units:
   * - `px` or unit-less, interpreted as pixels
   * - `%` or `%r`, percentage relative to the length of the reference element
   * - `%p`, percentage relative to the length of the popper element
   * - `vw`, CSS viewport width unit
   * - `vh`, CSS viewport height unit
   *
   * For length is intended the main axis relative to the placement of the popper.<br />
   * This means that if the placement is `top` or `bottom`, the length will be the
   * `width`. In case of `left` or `right`, it will be the `height`.
   *
   * You can provide a single value (as `Number` or `String`), or a pair of values
   * as `String` divided by a comma or one (or more) white spaces.<br />
   * The latter is a deprecated method because it leads to confusion and will be
   * removed in v2.<br />
   * Additionally, it accepts additions and subtractions between different units.
   * Note that multiplications and divisions aren't supported.
   *
   * Valid examples are:
   * ```
   * 10
   * '10%'
   * '10, 10'
   * '10%, 10'
   * '10 + 10%'
   * '10 - 5vh + 3%'
   * '-10px + 5vh, 5px - 6%'
   * ```
   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap
   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.
   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).
   *
   * @memberof modifiers
   * @inner
   */
  offset: {
    /** @prop {number} order=200 - Index used to define the order of execution */
    order: 200,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: offset,
    /** @prop {Number|String} offset=0
     * The offset value as described in the modifier description
     */
    offset: 0
  },

  /**
   * Modifier used to prevent the popper from being positioned outside the boundary.
   *
   * A scenario exists where the reference itself is not within the boundaries.<br />
   * We can say it has "escaped the boundaries" — or just "escaped".<br />
   * In this case we need to decide whether the popper should either:
   *
   * - detach from the reference and remain "trapped" in the boundaries, or
   * - if it should ignore the boundary and "escape with its reference"
   *
   * When `escapeWithReference` is set to`true` and reference is completely
   * outside its boundaries, the popper will overflow (or completely leave)
   * the boundaries in order to remain attached to the edge of the reference.
   *
   * @memberof modifiers
   * @inner
   */
  preventOverflow: {
    /** @prop {number} order=300 - Index used to define the order of execution */
    order: 300,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: preventOverflow,
    /**
     * @prop {Array} [priority=['left','right','top','bottom']]
     * Popper will try to prevent overflow following these priorities by default,
     * then, it could overflow on the left and on top of the `boundariesElement`
     */
    priority: ['left', 'right', 'top', 'bottom'],
    /**
     * @prop {number} padding=5
     * Amount of pixel used to define a minimum distance between the boundaries
     * and the popper. This makes sure the popper always has a little padding
     * between the edges of its container
     */
    padding: 5,
    /**
     * @prop {String|HTMLElement} boundariesElement='scrollParent'
     * Boundaries used by the modifier. Can be `scrollParent`, `window`,
     * `viewport` or any DOM element.
     */
    boundariesElement: 'scrollParent'
  },

  /**
   * Modifier used to make sure the reference and its popper stay near each other
   * without leaving any gap between the two. Especially useful when the arrow is
   * enabled and you want to ensure that it points to its reference element.
   * It cares only about the first axis. You can still have poppers with margin
   * between the popper and its reference element.
   * @memberof modifiers
   * @inner
   */
  keepTogether: {
    /** @prop {number} order=400 - Index used to define the order of execution */
    order: 400,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: keepTogether
  },

  /**
   * This modifier is used to move the `arrowElement` of the popper to make
   * sure it is positioned between the reference element and its popper element.
   * It will read the outer size of the `arrowElement` node to detect how many
   * pixels of conjunction are needed.
   *
   * It has no effect if no `arrowElement` is provided.
   * @memberof modifiers
   * @inner
   */
  arrow: {
    /** @prop {number} order=500 - Index used to define the order of execution */
    order: 500,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: arrow,
    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */
    element: '[x-arrow]'
  },

  /**
   * Modifier used to flip the popper's placement when it starts to overlap its
   * reference element.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   *
   * **NOTE:** this modifier will interrupt the current update cycle and will
   * restart it if it detects the need to flip the placement.
   * @memberof modifiers
   * @inner
   */
  flip: {
    /** @prop {number} order=600 - Index used to define the order of execution */
    order: 600,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: flip,
    /**
     * @prop {String|Array} behavior='flip'
     * The behavior used to change the popper's placement. It can be one of
     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid
     * placements (with optional variations)
     */
    behavior: 'flip',
    /**
     * @prop {number} padding=5
     * The popper will flip if it hits the edges of the `boundariesElement`
     */
    padding: 5,
    /**
     * @prop {String|HTMLElement} boundariesElement='viewport'
     * The element which will define the boundaries of the popper position.
     * The popper will never be placed outside of the defined boundaries
     * (except if `keepTogether` is enabled)
     */
    boundariesElement: 'viewport'
  },

  /**
   * Modifier used to make the popper flow toward the inner of the reference element.
   * By default, when this modifier is disabled, the popper will be placed outside
   * the reference element.
   * @memberof modifiers
   * @inner
   */
  inner: {
    /** @prop {number} order=700 - Index used to define the order of execution */
    order: 700,
    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */
    enabled: false,
    /** @prop {ModifierFn} */
    fn: inner
  },

  /**
   * Modifier used to hide the popper when its reference element is outside of the
   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can
   * be used to hide with a CSS selector the popper when its reference is
   * out of boundaries.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   * @memberof modifiers
   * @inner
   */
  hide: {
    /** @prop {number} order=800 - Index used to define the order of execution */
    order: 800,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: hide
  },

  /**
   * Computes the style that will be applied to the popper element to gets
   * properly positioned.
   *
   * Note that this modifier will not touch the DOM, it just prepares the styles
   * so that `applyStyle` modifier can apply it. This separation is useful
   * in case you need to replace `applyStyle` with a custom implementation.
   *
   * This modifier has `850` as `order` value to maintain backward compatibility
   * with previous versions of Popper.js. Expect the modifiers ordering method
   * to change in future major versions of the library.
   *
   * @memberof modifiers
   * @inner
   */
  computeStyle: {
    /** @prop {number} order=850 - Index used to define the order of execution */
    order: 850,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: computeStyle,
    /**
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3D transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties
     */
    gpuAcceleration: true,
    /**
     * @prop {string} [x='bottom']
     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.
     * Change this if your popper should grow in a direction different from `bottom`
     */
    x: 'bottom',
    /**
     * @prop {string} [x='left']
     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.
     * Change this if your popper should grow in a direction different from `right`
     */
    y: 'right'
  },

  /**
   * Applies the computed styles to the popper element.
   *
   * All the DOM manipulations are limited to this modifier. This is useful in case
   * you want to integrate Popper.js inside a framework or view library and you
   * want to delegate all the DOM manipulations to it.
   *
   * Note that if you disable this modifier, you must make sure the popper element
   * has its position set to `absolute` before Popper.js can do its work!
   *
   * Just disable this modifier and define your own to achieve the desired effect.
   *
   * @memberof modifiers
   * @inner
   */
  applyStyle: {
    /** @prop {number} order=900 - Index used to define the order of execution */
    order: 900,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: applyStyle,
    /** @prop {Function} */
    onLoad: applyStyleOnLoad,
    /**
     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3D transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties
     */
    gpuAcceleration: undefined
  }
};

/**
 * The `dataObject` is an object containing all the information used by Popper.js.
 * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.
 * @name dataObject
 * @property {Object} data.instance The Popper.js instance
 * @property {String} data.placement Placement applied to popper
 * @property {String} data.originalPlacement Placement originally defined on init
 * @property {Boolean} data.flipped True if popper has been flipped by flip modifier
 * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper
 * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier
 * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)
 * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)
 * @property {Object} data.boundaries Offsets of the popper boundaries
 * @property {Object} data.offsets The measurements of popper, reference and arrow elements
 * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values
 * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values
 * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0
 */

/**
 * Default options provided to Popper.js constructor.<br />
 * These can be overridden using the `options` argument of Popper.js.<br />
 * To override an option, simply pass an object with the same
 * structure of the `options` object, as the 3rd argument. For example:
 * ```
 * new Popper(ref, pop, {
 *   modifiers: {
 *     preventOverflow: { enabled: false }
 *   }
 * })
 * ```
 * @type {Object}
 * @static
 * @memberof Popper
 */
var Defaults = {
  /**
   * Popper's placement.
   * @prop {Popper.placements} placement='bottom'
   */
  placement: 'bottom',

  /**
   * Set this to true if you want popper to position it self in 'fixed' mode
   * @prop {Boolean} positionFixed=false
   */
  positionFixed: false,

  /**
   * Whether events (resize, scroll) are initially enabled.
   * @prop {Boolean} eventsEnabled=true
   */
  eventsEnabled: true,

  /**
   * Set to true if you want to automatically remove the popper when
   * you call the `destroy` method.
   * @prop {Boolean} removeOnDestroy=false
   */
  removeOnDestroy: false,

  /**
   * Callback called when the popper is created.<br />
   * By default, it is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onCreate}
   */
  onCreate: function onCreate() {},

  /**
   * Callback called when the popper is updated. This callback is not called
   * on the initialization/creation of the popper, but only on subsequent
   * updates.<br />
   * By default, it is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onUpdate}
   */
  onUpdate: function onUpdate() {},

  /**
   * List of modifiers used to modify the offsets before they are applied to the popper.
   * They provide most of the functionalities of Popper.js.
   * @prop {modifiers}
   */
  modifiers: modifiers
};

/**
 * @callback onCreate
 * @param {dataObject} data
 */

/**
 * @callback onUpdate
 * @param {dataObject} data
 */

// Utils
// Methods
var Popper = function () {
  /**
   * Creates a new Popper.js instance.
   * @class Popper
   * @param {HTMLElement|referenceObject} reference - The reference element used to position the popper
   * @param {HTMLElement} popper - The HTML element used as the popper
   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)
   * @return {Object} instance - The generated Popper.js instance
   */
  function Popper(reference, popper) {
    var _this = this;

    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    classCallCheck$2(this, Popper);

    this.scheduleUpdate = function () {
      return requestAnimationFrame(_this.update);
    };

    // make update() debounced, so that it only runs at most once-per-tick
    this.update = debounce$1(this.update.bind(this));

    // with {} we create a new object with the options inside it
    this.options = _extends({}, Popper.Defaults, options);

    // init state
    this.state = {
      isDestroyed: false,
      isCreated: false,
      scrollParents: []
    };

    // get reference and popper elements (allow jQuery wrappers)
    this.reference = reference && reference.jquery ? reference[0] : reference;
    this.popper = popper && popper.jquery ? popper[0] : popper;

    // Deep merge modifiers options
    this.options.modifiers = {};
    Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {
      _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});
    });

    // Refactoring modifiers' list (Object => Array)
    this.modifiers = Object.keys(this.options.modifiers).map(function (name) {
      return _extends({
        name: name
      }, _this.options.modifiers[name]);
    })
    // sort the modifiers by order
    .sort(function (a, b) {
      return a.order - b.order;
    });

    // modifiers have the ability to execute arbitrary code when Popper.js get inited
    // such code is executed in the same order of its modifier
    // they could add new properties to their options configuration
    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!
    this.modifiers.forEach(function (modifierOptions) {
      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {
        modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);
      }
    });

    // fire the first update to position the popper in the right place
    this.update();

    var eventsEnabled = this.options.eventsEnabled;
    if (eventsEnabled) {
      // setup event listeners, they will take care of update the position in specific situations
      this.enableEventListeners();
    }

    this.state.eventsEnabled = eventsEnabled;
  }

  // We can't use class properties because they don't get listed in the
  // class prototype and break stuff like Sinon stubs


  createClass$2(Popper, [{
    key: 'update',
    value: function update$$1() {
      return update.call(this);
    }
  }, {
    key: 'destroy',
    value: function destroy$$1() {
      return destroy.call(this);
    }
  }, {
    key: 'enableEventListeners',
    value: function enableEventListeners$$1() {
      return enableEventListeners.call(this);
    }
  }, {
    key: 'disableEventListeners',
    value: function disableEventListeners$$1() {
      return disableEventListeners.call(this);
    }

    /**
     * Schedules an update. It will run on the next UI update available.
     * @method scheduleUpdate
     * @memberof Popper
     */


    /**
     * Collection of utilities useful when writing custom modifiers.
     * Starting from version 1.7, this method is available only if you
     * include `popper-utils.js` before `popper.js`.
     *
     * **DEPRECATION**: This way to access PopperUtils is deprecated
     * and will be removed in v2! Use the PopperUtils module directly instead.
     * Due to the high instability of the methods contained in Utils, we can't
     * guarantee them to follow semver. Use them at your own risk!
     * @static
     * @private
     * @type {Object}
     * @deprecated since version 1.8
     * @member Utils
     * @memberof Popper
     */

  }]);
  return Popper;
}();

/**
 * The `referenceObject` is an object that provides an interface compatible with Popper.js
 * and lets you use it as replacement of a real DOM node.<br />
 * You can use this method to position a popper relatively to a set of coordinates
 * in case you don't have a DOM node to use as reference.
 *
 * ```
 * new Popper(referenceObject, popperNode);
 * ```
 *
 * NB: This feature isn't supported in Internet Explorer 10.
 * @name referenceObject
 * @property {Function} data.getBoundingClientRect
 * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.
 * @property {number} data.clientWidth
 * An ES6 getter that will return the width of the virtual reference element.
 * @property {number} data.clientHeight
 * An ES6 getter that will return the height of the virtual reference element.
 */


Popper.Utils = (typeof window !== 'undefined' ? window : global$1).PopperUtils;
Popper.placements = placements;
Popper.Defaults = Defaults;
//# sourceMappingURL=popper.js.map

function flipPlacement(theme, placement) {
  if (theme.direction !== 'rtl') {
    return placement;
  }

  switch (placement) {
    case 'bottom-end':
      return 'bottom-start';
    case 'bottom-start':
      return 'bottom-end';
    case 'top-end':
      return 'top-start';
    case 'top-start':
      return 'top-end';
    default:
      return placement;}

}

function getAnchorEl$1(anchorEl) {
  return typeof anchorEl === 'function' ? anchorEl() : anchorEl;
}

/**
   * Poppers rely on the 3rd party library [Popper.js](https://github.com/FezVrasta/popper.js) for positioning.
   */var
Popper$1 = /*#__PURE__*/function (_React$Component) {inherits(Popper$$1, _React$Component);
  function Popper$$1(props) {var _this;classCallCheck(this, Popper$$1);
    _this = possibleConstructorReturn(this, getPrototypeOf(Popper$$1).call(this));defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleOpen",













































    function () {var _this$props =








      _this.props,anchorEl = _this$props.anchorEl,modifiers = _this$props.modifiers,open = _this$props.open,placement = _this$props.placement,_this$props$popperOpt = _this$props.popperOptions,popperOptions = _this$props$popperOpt === void 0 ? {} : _this$props$popperOpt,theme = _this$props.theme,disablePortal = _this$props.disablePortal;
      var popperNode = reactDom.findDOMNode(assertThisInitialized(assertThisInitialized(_this)));

      if (!popperNode || !anchorEl || !open) {
        return;
      }

      if (_this.popper) {
        _this.popper.destroy();
        _this.popper = null;
      }

      _this.popper = new Popper(getAnchorEl$1(anchorEl), popperNode, objectSpread({
        placement: flipPlacement(theme, placement) },
      popperOptions, {
        modifiers: objectSpread({},
        disablePortal ?
        {} :
        {
          // It's using scrollParent by default, we can use the viewport when using a portal.
          preventOverflow: {
            boundariesElement: 'window' } },


        modifiers,
        popperOptions.modifiers),

        // We could have been using a custom modifier like react-popper is doing.
        // But it seems this is the best public API for this use case.
        onCreate: _this.handlePopperUpdate,
        onUpdate: _this.handlePopperUpdate }));

    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handlePopperUpdate",

    function (data) {
      if (data.placement !== _this.state.placement) {
        _this.setState({
          placement: data.placement });

      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleExited",

    function () {
      _this.setState({ exited: true });
      _this.handleClose();
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleClose",

    function () {
      if (!_this.popper) {
        return;
      }

      _this.popper.destroy();
      _this.popper = null;
    });_this.state = { exited: !props.open };return _this;}createClass(Popper$$1, [{ key: "componentDidUpdate", value: function componentDidUpdate(prevProps) {if (prevProps.open !== this.props.open && !this.props.open && !this.props.transition) {// Otherwise handleExited will call this.
        this.handleClose();} // Let's update the popper position.
      if (prevProps.open !== this.props.open || prevProps.anchorEl !== this.props.anchorEl || prevProps.popperOptions !== this.props.popperOptions || prevProps.modifiers !== this.props.modifiers || prevProps.disablePortal !== this.props.disablePortal || prevProps.placement !== this.props.placement) {this.handleOpen();}} }, { key: "componentWillUnmount", value: function componentWillUnmount() {this.handleClose();} }, { key: "render", value: function render() {var _this$props2 =













      this.props,anchorEl = _this$props2.anchorEl,children = _this$props2.children,container = _this$props2.container,disablePortal = _this$props2.disablePortal,keepMounted = _this$props2.keepMounted,modifiers = _this$props2.modifiers,open = _this$props2.open,placementProps = _this$props2.placement,popperOptions = _this$props2.popperOptions,theme = _this$props2.theme,transition = _this$props2.transition,other = objectWithoutProperties(_this$props2, ["anchorEl", "children", "container", "disablePortal", "keepMounted", "modifiers", "open", "placement", "popperOptions", "theme", "transition"]);var _this$state =
      this.state,exited = _this$state.exited,placement = _this$state.placement;

      if (!keepMounted && !open && (!transition || exited)) {
        return null;
      }

      var childProps = {
        placement: placement || flipPlacement(theme, placementProps) };


      if (transition) {
        childProps.TransitionProps = {
          in: open,
          onExited: this.handleExited };

      }

      return (
        react.createElement(Portal, { onRendered: this.handleOpen, disablePortal: disablePortal, container: container },
        react.createElement("div", _extends_1({
          role: "tooltip",
          style: {
            // Prevents scroll issue, waiting for Popper.js to add this style once initiated.
            position: 'absolute' } },

        other),

        typeof children === 'function' ? children(childProps) : children)));



    } }], [{ key: "getDerivedStateFromProps", value: function getDerivedStateFromProps(nextProps) {if (nextProps.open) {return { exited: false };}if (!nextProps.transition) {// Otherwise let handleExited take care of marking exited.
        return { exited: true };}return null;} }]);return Popper$$1;}(react.Component);

Popper$1.propTypes = {
  /**
                      * This is the DOM element, or a function that returns the DOM element,
                      * that may be used to set the position of the popover.
                      * The return value will passed as the reference object of the Popper
                      * instance.
                      */
  anchorEl: propTypes.oneOfType([propTypes.object, propTypes.func]),
  /**
                                                                      * Popper render function or node.
                                                                      */
  children: propTypes.oneOfType([propTypes.node, propTypes.func]).isRequired,
  /**
                                                                               * A node, component instance, or function that returns either.
                                                                               * The `container` will passed to the Modal component.
                                                                               * By default, it uses the body of the anchorEl's top-level document object,
                                                                               * so it's simply `document.body` most of the time.
                                                                               */
  container: propTypes.oneOfType([propTypes.object, propTypes.func]),
  /**
                                                                       * Disable the portal behavior.
                                                                       * The children stay within it's parent DOM hierarchy.
                                                                       */
  disablePortal: propTypes.bool,
  /**
                                  * Always keep the children in the DOM.
                                  * This property can be useful in SEO situation or
                                  * when you want to maximize the responsiveness of the Popper.
                                  */
  keepMounted: propTypes.bool,
  /**
                                * Popper.js is based on a "plugin-like" architecture,
                                * most of its features are fully encapsulated "modifiers".
                                *
                                * A modifier is a function that is called each time Popper.js needs to
                                * compute the position of the popper.
                                * For this reason, modifiers should be very performant to avoid bottlenecks.
                                * To learn how to create a modifier, [read the modifiers documentation](https://github.com/FezVrasta/popper.js/blob/master/docs/_includes/popper-documentation.md#modifiers--object).
                                */
  modifiers: propTypes.object,
  /**
                                * If `true`, the popper is visible.
                                */
  open: propTypes.bool.isRequired,
  /**
                                    * Popper placement.
                                    */
  placement: propTypes.oneOf([
  'bottom-end',
  'bottom-start',
  'bottom',
  'left-end',
  'left-start',
  'left',
  'right-end',
  'right-start',
  'right',
  'top-end',
  'top-start',
  'top']),

  /**
            * Options provided to the [`popper.js`](https://github.com/FezVrasta/popper.js) instance.
            */
  popperOptions: propTypes.object,
  /**
                                    * @ignore
                                    */
  theme: propTypes.object.isRequired,
  /**
                                       * Help supporting a react-transition-group/Transition component.
                                       */
  transition: propTypes.bool };


Popper$1.defaultProps = {
  disablePortal: false,
  placement: 'bottom',
  transition: false };


var Popper$2 = withTheme()(Popper$1);

/**
                                      * @ignore - internal component.
                                      */
var RadioButtonUnchecked = function RadioButtonUnchecked(props) {return (
    react.createElement(SvgIcon$1, props,
    react.createElement("path", { d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z" })));};


RadioButtonUnchecked = pure(RadioButtonUnchecked);
RadioButtonUnchecked.muiName = 'SvgIcon';

var RadioButtonUncheckedIcon = RadioButtonUnchecked;

/**
                                      * @ignore - internal component.
                                      */
var RadioButtonChecked = function RadioButtonChecked(props) {return (
    react.createElement(SvgIcon$1, props,
    react.createElement("path", { d: "M12 7c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5zm0-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z" })));};


RadioButtonChecked = pure(RadioButtonChecked);
RadioButtonChecked.muiName = 'SvgIcon';

var RadioButtonCheckedIcon = RadioButtonChecked;

var styles$19 = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: {
      color: theme.palette.text.secondary },

    /* Styles applied to the root element if `checked={true}`. */
    checked: {},
    /* Styles applied to the root element if `disabled={true}`. */
    disabled: {},
    /* Styles applied to the root element if `color="primary"`. */
    colorPrimary: {
      '&$checked': {
        color: theme.palette.primary.main },

      '&$disabled': {
        color: theme.palette.action.disabled } },


    /* Styles applied to the root element if `color="secondary"`. */
    colorSecondary: {
      '&$checked': {
        color: theme.palette.secondary.main },

      '&$disabled': {
        color: theme.palette.action.disabled } } };};




function Radio(props) {var
  classes = props.classes,color = props.color,other = objectWithoutProperties(props, ["classes", "color"]);

  return (
    react.createElement(SwitchBase$1, _extends_1({
      type: "radio",
      icon: react.createElement(RadioButtonUncheckedIcon, null),
      checkedIcon: react.createElement(RadioButtonCheckedIcon, null),
      classes: {
        root: classnames(classes.root, classes["color".concat(capitalize(color))]),
        checked: classes.checked,
        disabled: classes.disabled } },

    other)));


}

Radio.propTypes = {
  /**
                     * If `true`, the component is checked.
                     */
  checked: propTypes.oneOfType([propTypes.bool, propTypes.string]),
  /**
                                                                     * The icon to display when the component is checked.
                                                                     */
  checkedIcon: propTypes.node,
  /**
                                * Override or extend the styles applied to the component.
                                * See [CSS API](#css-api) below for more details.
                                */
  classes: propTypes.object.isRequired,
  /**
                                         * The color of the component. It supports those theme colors that make sense for this component.
                                         */
  color: propTypes.oneOf(['primary', 'secondary', 'default']),
  /**
                                                                * If `true`, the switch will be disabled.
                                                                */
  disabled: propTypes.bool,
  /**
                             * If `true`, the ripple effect will be disabled.
                             */
  disableRipple: propTypes.bool,
  /**
                                  * The icon to display when the component is unchecked.
                                  */
  icon: propTypes.node,
  /**
                         * The id of the `input` element.
                         */
  id: propTypes.string,
  /**
                         * Attributes applied to the `input` element.
                         */
  inputProps: propTypes.object,
  /**
                                 * Use that property to pass a ref callback to the native input component.
                                 */
  inputRef: propTypes.oneOfType([propTypes.func, propTypes.object]),
  /**
                                                                      * Callback fired when the state is changed.
                                                                      *
                                                                      * @param {object} event The event source of the callback.
                                                                      * You can pull out the new value by accessing `event.target.value`.
                                                                      * @param {boolean} checked The `checked` value of the switch
                                                                      */
  onChange: propTypes.func,
  /**
                             * The input component property `type`.
                             */
  type: propTypes.string,
  /**
                           * The value of the component.
                           */
  value: propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.bool]) };


Radio.defaultProps = {
  color: 'secondary' };


withStyles(styles$19, { name: 'MuiRadio' })(Radio);

var

RadioGroup = /*#__PURE__*/function (_React$Component) {inherits(RadioGroup, _React$Component);function RadioGroup() {var _getPrototypeOf2;var _this;classCallCheck(this, RadioGroup);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(RadioGroup)).call.apply(_getPrototypeOf2, [this].concat(args)));defineProperty(assertThisInitialized(assertThisInitialized(_this)), "radios",
    []);defineProperty(assertThisInitialized(assertThisInitialized(_this)), "focus",

    function () {
      if (!_this.radios || !_this.radios.length) {
        return;
      }

      var focusRadios = _this.radios.filter(function (n) {return !n.disabled;});

      if (!focusRadios.length) {
        return;
      }

      var selectedRadio = find(focusRadios, function (n) {return n.checked;});

      if (selectedRadio) {
        selectedRadio.focus();
        return;
      }

      focusRadios[0].focus();
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleRadioChange",

    function (event, checked) {
      if (checked && _this.props.onChange) {
        _this.props.onChange(event, event.target.value);
      }
    });return _this;}createClass(RadioGroup, [{ key: "render", value: function render()

    {var _this2 = this;var _this$props =
      this.props,children = _this$props.children,name = _this$props.name,value = _this$props.value,onChange = _this$props.onChange,other = objectWithoutProperties(_this$props, ["children", "name", "value", "onChange"]);

      this.radios = [];

      return (
        react.createElement(FormGroup$1, _extends_1({ role: "radiogroup" }, other),
        react.Children.map(children, function (child) {
          if (!react.isValidElement(child)) {
            return null;
          }

          warning_1(
          child.type !== react.Fragment,
          [
          "Material-UI: the RadioGroup component doesn't accept a Fragment as a child.",
          'Consider providing an array instead.'].
          join('\n'));


          return react.cloneElement(child, {
            name: name,
            inputRef: function inputRef(node) {
              if (node) {
                _this2.radios.push(node);
              }
            },
            checked: value === child.props.value,
            onChange: createChainedFunction(child.props.onChange, _this2.handleRadioChange) });

        })));


    } }]);return RadioGroup;}(react.Component);


RadioGroup.propTypes = {
  /**
                          * The content of the component.
                          */
  children: propTypes.node,
  /**
                             * The name used to reference the value of the control.
                             */
  name: propTypes.string,
  /**
                           * @ignore
                           */
  onBlur: propTypes.func,
  /**
                           * Callback fired when a radio button is selected.
                           *
                           * @param {object} event The event source of the callback.
                           * You can pull out the new value by accessing `event.target.value`.
                           * @param {string} value The `value` of the selected radio button
                           */
  onChange: propTypes.func,
  /**
                             * @ignore
                             */
  onKeyDown: propTypes.func,
  /**
                              * Value of the selected radio button.
                              */
  value: propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.bool]) };

function areEqualValues(a, b) {
  if (_typeof_1(b) === 'object' && b !== null) {
    return a === b;
  }

  return String(a) === String(b);
}

/**
   * @ignore - internal component.
   */var
SelectInput = /*#__PURE__*/function (_React$Component) {inherits(SelectInput, _React$Component);


  function SelectInput(props) {var _this;classCallCheck(this, SelectInput);
    _this = possibleConstructorReturn(this, getPrototypeOf(SelectInput).call(this));defineProperty(assertThisInitialized(assertThisInitialized(_this)), "ignoreNextBlur", false);defineProperty(assertThisInitialized(assertThisInitialized(_this)), "update",





















    function (_ref) {var event = _ref.event,open = _ref.open;
      if (_this.isOpenControlled) {
        if (open) {
          _this.props.onOpen(event);
        } else {
          _this.props.onClose(event);
        }
        return;
      }

      _this.setState({
        // Perfom the layout computation outside of the render method.
        menuMinWidth: _this.props.autoWidth ? null : _this.displayRef.clientWidth,
        open: open });

    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleClick",

    function (event) {
      // Opening the menu is going to blur the. It will be focused back when closed.
      _this.ignoreNextBlur = true;
      _this.update({
        open: true,
        event: event });

    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleClose",

    function (event) {
      _this.update({
        open: false,
        event: event });

    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleItemClick",

    function (child) {return function (event) {
        if (!_this.props.multiple) {
          _this.update({
            open: false,
            event: event });

        }var _this$props =

        _this.props,onChange = _this$props.onChange,name = _this$props.name;

        if (onChange) {
          var value;

          if (_this.props.multiple) {
            value = Array.isArray(_this.props.value) ? toConsumableArray(_this.props.value) : [];
            var itemIndex = value.indexOf(child.props.value);
            if (itemIndex === -1) {
              value.push(child.props.value);
            } else {
              value.splice(itemIndex, 1);
            }
          } else {
            value = child.props.value;
          }

          event.persist();
          event.target = { value: value, name: name };
          onChange(event, child);
        }
      };});defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleBlur",

    function (event) {
      if (_this.ignoreNextBlur === true) {
        // The parent components are relying on the bubbling of the event.
        event.stopPropagation();
        _this.ignoreNextBlur = false;
        return;
      }

      if (_this.props.onBlur) {var _this$props2 =
        _this.props,value = _this$props2.value,name = _this$props2.name;
        event.persist();
        event.target = { value: value, name: name };
        _this.props.onBlur(event);
      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleKeyDown",

    function (event) {
      if (_this.props.readOnly) {
        return;
      }

      if (['space', 'up', 'down'].indexOf(keycode(event)) !== -1) {
        event.preventDefault();
        // Opening the menu is going to blur the. It will be focused back when closed.
        _this.ignoreNextBlur = true;
        _this.update({
          open: true,
          event: event });

      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleDisplayRef",

    function (ref) {
      _this.displayRef = ref;
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleInputRef",

    function (ref) {var
      inputRef = _this.props.inputRef;

      if (!inputRef) {
        return;
      }

      var nodeProxy = {
        node: ref,
        // By pass the native input as we expose a rich object (array).
        value: _this.props.value,
        focus: function focus() {
          _this.displayRef.focus();
        } };


      setRef(inputRef, nodeProxy);
    });_this.isOpenControlled = props.open !== undefined;_this.state = { menuMinWidth: null, open: false };return _this;}createClass(SelectInput, [{ key: "componentDidMount", value: function componentDidMount() {if (this.isOpenControlled && this.props.open) {// Focus the display node so the focus is restored on this element once
        // the menu is closed.
        this.displayRef.focus(); // Rerender with the resolve `displayRef` reference.
        this.forceUpdate();}if (this.props.autoFocus) {this.displayRef.focus();}} }, { key: "render", value: function render() {var _this2 = this,_classNames;var _this$props3 =


























      this.props,autoWidth = _this$props3.autoWidth,children = _this$props3.children,classes = _this$props3.classes,className = _this$props3.className,disabled = _this$props3.disabled,displayEmpty = _this$props3.displayEmpty,IconComponent = _this$props3.IconComponent,inputRef = _this$props3.inputRef,_this$props3$MenuProp = _this$props3.MenuProps,MenuProps = _this$props3$MenuProp === void 0 ? {} : _this$props3$MenuProp,multiple = _this$props3.multiple,name = _this$props3.name,onBlur = _this$props3.onBlur,onChange = _this$props3.onChange,onClose = _this$props3.onClose,onFocus = _this$props3.onFocus,onOpen = _this$props3.onOpen,openProp = _this$props3.open,readOnly = _this$props3.readOnly,renderValue = _this$props3.renderValue,required = _this$props3.required,SelectDisplayProps = _this$props3.SelectDisplayProps,tabIndexProp = _this$props3.tabIndex,_this$props3$type = _this$props3.type,type = _this$props3$type === void 0 ? 'hidden' : _this$props3$type,value = _this$props3.value,variant = _this$props3.variant,other = objectWithoutProperties(_this$props3, ["autoWidth", "children", "classes", "className", "disabled", "displayEmpty", "IconComponent", "inputRef", "MenuProps", "multiple", "name", "onBlur", "onChange", "onClose", "onFocus", "onOpen", "open", "readOnly", "renderValue", "required", "SelectDisplayProps", "tabIndex", "type", "value", "variant"]);
      var open = this.isOpenControlled && this.displayRef ? openProp : this.state.open;

      delete other['aria-invalid'];

      var display;
      var displaySingle = '';
      var displayMultiple = [];
      var computeDisplay = false;

      // No need to display any value if the field is empty.
      if (isFilled(this.props) || displayEmpty) {
        if (renderValue) {
          display = renderValue(value);
        } else {
          computeDisplay = true;
        }
      }

      var items = react.Children.map(children, function (child) {
        if (!react.isValidElement(child)) {
          return null;
        }

        warning_1(
        child.type !== react.Fragment,
        [
        "Material-UI: the Select component doesn't accept a Fragment as a child.",
        'Consider providing an array instead.'].
        join('\n'));


        var selected;

        if (multiple) {
          if (!Array.isArray(value)) {
            throw new Error(
            'Material-UI: the `value` property must be an array ' +
            'when using the `Select` component with `multiple`.');

          }

          selected = value.some(function (v) {return areEqualValues(v, child.props.value);});
          if (selected && computeDisplay) {
            displayMultiple.push(child.props.children);
          }
        } else {
          selected = areEqualValues(value, child.props.value);
          if (selected && computeDisplay) {
            displaySingle = child.props.children;
          }
        }

        return react.cloneElement(child, {
          onClick: _this2.handleItemClick(child),
          role: 'option',
          selected: selected,
          value: undefined, // The value is most likely not a valid HTML attribute.
          'data-value': child.props.value // Instead, we provide it as a data attribute.
        });
      });

      if (computeDisplay) {
        display = multiple ? displayMultiple.join(', ') : displaySingle;
      }

      // Avoid performing a layout computation in the render method.
      var menuMinWidth = this.state.menuMinWidth;

      if (!autoWidth && this.isOpenControlled && this.displayRef) {
        menuMinWidth = this.displayRef.clientWidth;
      }

      var tabIndex;
      if (typeof tabIndexProp !== 'undefined') {
        tabIndex = tabIndexProp;
      } else {
        tabIndex = disabled ? null : 0;
      }

      return (
        react.createElement("div", { className: classes.root },
        react.createElement("div", _extends_1({
          className: classnames(
          classes.select,
          classes.selectMenu, (_classNames = {}, defineProperty(_classNames,

          classes.disabled, disabled), defineProperty(_classNames,
          classes.filled, variant === 'filled'), defineProperty(_classNames,
          classes.outlined, variant === 'outlined'), _classNames),

          className),

          ref: this.handleDisplayRef,
          "data-mui-test": "SelectDisplay",
          "aria-pressed": open ? 'true' : 'false',
          tabIndex: tabIndex,
          role: "button",
          "aria-owns": open ? "menu-".concat(name || '') : undefined,
          "aria-haspopup": "true",
          onKeyDown: this.handleKeyDown,
          onBlur: this.handleBlur,
          onClick: disabled || readOnly ? null : this.handleClick,
          onFocus: onFocus },
        SelectDisplayProps),



        display || react.createElement("span", { dangerouslySetInnerHTML: { __html: '&#8203;' } })),

        react.createElement("input", _extends_1({
          value: Array.isArray(value) ? value.join(',') : value,
          name: name,
          ref: this.handleInputRef,
          type: type },
        other)),

        react.createElement(IconComponent, { className: classes.icon }),
        react.createElement(Menu$1, _extends_1({
          id: "menu-".concat(name || ''),
          anchorEl: this.displayRef,
          open: open,
          onClose: this.handleClose },
        MenuProps, {
          MenuListProps: objectSpread({
            role: 'listbox' },
          MenuProps.MenuListProps),

          PaperProps: objectSpread({},
          MenuProps.PaperProps, {
            style: objectSpread({
              minWidth: menuMinWidth },
            MenuProps.PaperProps != null ? MenuProps.PaperProps.style : null) }) }),



        items)));



    } }]);return SelectInput;}(react.Component);


SelectInput.propTypes = {
  /**
                           * @ignore
                           */
  autoFocus: propTypes.bool,
  /**
                              * If true, the width of the popover will automatically be set according to the items inside the
                              * menu, otherwise it will be at least the width of the select input.
                              */
  autoWidth: propTypes.bool,
  /**
                              * The option elements to populate the select with.
                              * Can be some `<MenuItem>` elements.
                              */
  children: propTypes.node,
  /**
                             * Override or extend the styles applied to the component.
                             * See [CSS API](#css-api) below for more details.
                             */
  classes: propTypes.object.isRequired,
  /**
                                         * The CSS class name of the select element.
                                         */
  className: propTypes.string,
  /**
                                * If `true`, the select will be disabled.
                                */
  disabled: propTypes.bool,
  /**
                             * If `true`, the selected item is displayed even if its value is empty.
                             */
  displayEmpty: propTypes.bool,
  /**
                                 * The icon that displays the arrow.
                                 */
  IconComponent: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                             * Use that property to pass a ref callback to the native select element.
                                                                                             */
  inputRef: propTypes.oneOfType([propTypes.func, propTypes.object]),
  /**
                                                                      * Properties applied to the [`Menu`](/api/menu/) element.
                                                                      */
  MenuProps: propTypes.object,
  /**
                                * If true, `value` must be an array and the menu will support multiple selections.
                                */
  multiple: propTypes.bool,
  /**
                             * Name attribute of the `select` or hidden `input` element.
                             */
  name: propTypes.string,
  /**
                           * @ignore
                           */
  onBlur: propTypes.func,
  /**
                           * Callback function fired when a menu item is selected.
                           *
                           * @param {object} event The event source of the callback.
                           * You can pull out the new value by accessing `event.target.value`.
                           * @param {object} [child] The react element that was selected.
                           */
  onChange: propTypes.func,
  /**
                             * Callback fired when the component requests to be closed.
                             * Use in controlled mode (see open).
                             *
                             * @param {object} event The event source of the callback
                             */
  onClose: propTypes.func,
  /**
                            * @ignore
                            */
  onFocus: propTypes.func,
  /**
                            * Callback fired when the component requests to be opened.
                            * Use in controlled mode (see open).
                            *
                            * @param {object} event The event source of the callback
                            */
  onOpen: propTypes.func,
  /**
                           * Control `select` open state.
                           */
  open: propTypes.bool,
  /**
                         * @ignore
                         */
  readOnly: propTypes.bool,
  /**
                             * Render the selected value.
                             *
                             * @param {*} value The `value` provided to the component.
                             * @returns {ReactElement}
                             */
  renderValue: propTypes.func,
  /**
                                * @ignore
                                */
  required: propTypes.bool,
  /**
                             * Properties applied to the clickable div element.
                             */
  SelectDisplayProps: propTypes.object,
  /**
                                         * @ignore
                                         */
  tabIndex: propTypes.oneOfType([propTypes.number, propTypes.string]),
  /**
                                                                        * @ignore
                                                                        */
  type: propTypes.string,
  /**
                           * The input value.
                           */
  value: propTypes.oneOfType([
  propTypes.string,
  propTypes.number,
  propTypes.bool,
  propTypes.object,
  propTypes.arrayOf(
  propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.bool, propTypes.object]))]).

  isRequired,
  /**
               * The variant to use.
               */
  variant: propTypes.oneOf(['standard', 'outlined', 'filled']) };

function Select(props) {var

  autoWidth =

















  props.autoWidth,children = props.children,classes = props.classes,displayEmpty = props.displayEmpty,IconComponent = props.IconComponent,input = props.input,inputProps = props.inputProps,MenuProps = props.MenuProps,muiFormControl = props.muiFormControl,multiple = props.multiple,native = props.native,onClose = props.onClose,onOpen = props.onOpen,open = props.open,renderValue = props.renderValue,SelectDisplayProps = props.SelectDisplayProps,variant = props.variant,other = objectWithoutProperties(props, ["autoWidth", "children", "classes", "displayEmpty", "IconComponent", "input", "inputProps", "MenuProps", "muiFormControl", "multiple", "native", "onClose", "onOpen", "open", "renderValue", "SelectDisplayProps", "variant"]);

  var inputComponent = native ? NativeSelectInput : SelectInput;
  var fcs = formControlState({
    props: props,
    muiFormControl: muiFormControl,
    states: ['variant'] });


  return react.cloneElement(input, objectSpread({
    // Most of the logic is implemented in `SelectInput`.
    // The `Select` component is a simple API wrapper to expose something better to play with.
    inputComponent: inputComponent,
    inputProps: objectSpread({
      children: children,
      IconComponent: IconComponent,
      variant: fcs.variant,
      type: undefined },
    native ?
    {} :
    {
      autoWidth: autoWidth,
      displayEmpty: displayEmpty,
      MenuProps: MenuProps,
      multiple: multiple,
      onClose: onClose,
      onOpen: onOpen,
      open: open,
      renderValue: renderValue,
      SelectDisplayProps: SelectDisplayProps },

    inputProps, {
      classes: inputProps ?
      mergeClasses({
        baseClasses: classes,
        newClasses: inputProps.classes,
        Component: Select }) :

      classes },
    input ? input.props.inputProps : {}) },

  other));

}

Select.propTypes = {
  /**
                      * If true, the width of the popover will automatically be set according to the items inside the
                      * menu, otherwise it will be at least the width of the select input.
                      */
  autoWidth: propTypes.bool,
  /**
                              * The option elements to populate the select with.
                              * Can be some `MenuItem` when `native` is false and `option` when `native` is true.
                              */
  children: propTypes.node,
  /**
                             * Override or extend the styles applied to the component.
                             * See [CSS API](#css-api) below for more details.
                             */
  classes: propTypes.object.isRequired,
  /**
                                         * If `true`, the selected item is displayed even if its value is empty.
                                         * You can only use it when the `native` property is `false` (default).
                                         */
  displayEmpty: propTypes.bool,
  /**
                                 * The icon that displays the arrow.
                                 */
  IconComponent: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                             * An `Input` element; does not have to be a material-ui specific `Input`.
                                                                                             */
  input: propTypes.element,
  /**
                             * Attributes applied to the `input` element.
                             * When `native` is `true`, the attributes are applied on the `select` element.
                             */
  inputProps: propTypes.object,
  /**
                                 * Properties applied to the [`Menu`](/api/menu/) element.
                                 */
  MenuProps: propTypes.object,
  /**
                                * If true, `value` must be an array and the menu will support multiple selections.
                                * You can only use it when the `native` property is `false` (default).
                                */
  multiple: propTypes.bool,
  /**
                             * If `true`, the component will be using a native `select` element.
                             */
  native: propTypes.bool,
  /**
                           * Callback function fired when a menu item is selected.
                           *
                           * @param {object} event The event source of the callback.
                           * You can pull out the new value by accessing `event.target.value`.
                           * @param {object} [child] The react element that was selected when `native` is `false` (default).
                           */
  onChange: propTypes.func,
  /**
                             * Callback fired when the component requests to be closed.
                             * Use in controlled mode (see open).
                             *
                             * @param {object} event The event source of the callback
                             */
  onClose: propTypes.func,
  /**
                            * Callback fired when the component requests to be opened.
                            * Use in controlled mode (see open).
                            *
                            * @param {object} event The event source of the callback
                            */
  onOpen: propTypes.func,
  /**
                           * Control `select` open state.
                           * You can only use it when the `native` property is `false` (default).
                           */
  open: propTypes.bool,
  /**
                         * Render the selected value.
                         * You can only use it when the `native` property is `false` (default).
                         *
                         * @param {*} value The `value` provided to the component.
                         * @returns {ReactElement}
                         */
  renderValue: propTypes.func,
  /**
                                * Properties applied to the clickable div element.
                                */
  SelectDisplayProps: propTypes.object,
  /**
                                         * The input value.
                                         * This property is required when the `native` property is `false` (default).
                                         */
  value: propTypes.oneOfType([
  propTypes.string,
  propTypes.number,
  propTypes.bool,
  propTypes.object,
  propTypes.arrayOf(
  propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.bool, propTypes.object]))]),


  /**
                                                                                                   * The variant to use.
                                                                                                   */
  variant: propTypes.oneOf(['standard', 'outlined', 'filled']) };


Select.defaultProps = {
  autoWidth: false,
  displayEmpty: false,
  IconComponent: ArrowDropDownIcon,
  input: react.createElement(Input$1, null),
  multiple: false,
  native: false };


Select.muiName = 'Select';

var Select$1 = withStyles(styles$16, { name: 'MuiSelect' })(
withFormControlContext(Select));

var styles$1b = function styles(theme) {var _root;
  var emphasis = theme.palette.type === 'light' ? 0.8 : 0.98;
  var backgroundColor = emphasize(theme.palette.background.default, emphasis);

  return {
    /* Styles applied to the root element. */
    root: (_root = {
      color: theme.palette.getContrastText(backgroundColor),
      backgroundColor: backgroundColor,
      display: 'flex',
      alignItems: 'center',
      flexWrap: 'wrap',
      padding: '6px 24px' }, defineProperty(_root,
    theme.breakpoints.up('md'), {
      minWidth: 288,
      maxWidth: 568,
      borderRadius: theme.shape.borderRadius }), defineProperty(_root,

    theme.breakpoints.down('sm'), {
      flexGrow: 1 }), _root),


    /* Styles applied to the message wrapper element. */
    message: {
      padding: '8px 0' },

    /* Styles applied to the action wrapper element if `action` is provided. */
    action: {
      display: 'flex',
      alignItems: 'center',
      marginLeft: 'auto',
      paddingLeft: 24,
      marginRight: -8 } };


};

function SnackbarContent(props) {var
  action = props.action,classes = props.classes,className = props.className,message = props.message,other = objectWithoutProperties(props, ["action", "classes", "className", "message"]);

  return (
    react.createElement(Paper$1, _extends_1({
      component: Typography$1,
      headlineMapping: {
        body1: 'div',
        body2: 'div' },

      role: "alertdialog",
      square: true,
      elevation: 6,
      className: classnames(classes.root, className) },
    other),

    react.createElement("div", { className: classes.message }, message),
    action ? react.createElement("div", { className: classes.action }, action) : null));


}

SnackbarContent.propTypes = {
  /**
                               * The action to display.
                               */
  action: propTypes.node,
  /**
                           * Override or extend the styles applied to the component.
                           * See [CSS API](#css-api) below for more details.
                           */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * The message to display.
                                */
  message: propTypes.node };


var SnackbarContent$1 = withStyles(styles$1b, { name: 'MuiSnackbarContent' })(SnackbarContent);

var styles$1c = function styles(theme) {
  var gutter = 24;
  var top = { top: 0 };
  var bottom = { bottom: 0 };
  var right = { justifyContent: 'flex-end' };
  var left = { justifyContent: 'flex-start' };
  var topSpace = { top: gutter };
  var bottomSpace = { bottom: gutter };
  var rightSpace = { right: gutter };
  var leftSpace = { left: gutter };
  var center = {
    left: '50%',
    right: 'auto',
    transform: 'translateX(-50%)' };


  return {
    /* Styles applied to the root element. */
    root: {
      zIndex: theme.zIndex.snackbar,
      position: 'fixed',
      display: 'flex',
      left: 0,
      right: 0,
      justifyContent: 'center',
      alignItems: 'center' },

    /* Styles applied to the root element if `anchorOrigin={{ 'top', 'center' }}`. */
    anchorOriginTopCenter: objectSpread({},
    top, defineProperty({},
    theme.breakpoints.up('md'), objectSpread({},
    center))),


    /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'center' }}`. */
    anchorOriginBottomCenter: objectSpread({},
    bottom, defineProperty({},
    theme.breakpoints.up('md'), objectSpread({},
    center))),


    /* Styles applied to the root element if `anchorOrigin={{ 'top', 'right' }}`. */
    anchorOriginTopRight: objectSpread({},
    top,
    right, defineProperty({},
    theme.breakpoints.up('md'), objectSpread({
      left: 'auto' },
    topSpace,
    rightSpace))),


    /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'right' }}`. */
    anchorOriginBottomRight: objectSpread({},
    bottom,
    right, defineProperty({},
    theme.breakpoints.up('md'), objectSpread({
      left: 'auto' },
    bottomSpace,
    rightSpace))),


    /* Styles applied to the root element if `anchorOrigin={{ 'top', 'left' }}`. */
    anchorOriginTopLeft: objectSpread({},
    top,
    left, defineProperty({},
    theme.breakpoints.up('md'), objectSpread({
      right: 'auto' },
    topSpace,
    leftSpace))),


    /* Styles applied to the root element if `anchorOrigin={{ 'bottom', 'left' }}`. */
    anchorOriginBottomLeft: objectSpread({},
    bottom,
    left, defineProperty({},
    theme.breakpoints.up('md'), objectSpread({
      right: 'auto' },
    bottomSpace,
    leftSpace))) };



};
var

Snackbar = /*#__PURE__*/function (_React$Component) {inherits(Snackbar, _React$Component);function Snackbar() {var _getPrototypeOf2;var _this;classCallCheck(this, Snackbar);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Snackbar)).call.apply(_getPrototypeOf2, [this].concat(args)));defineProperty(assertThisInitialized(assertThisInitialized(_this)), "state",
    {});defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleMouseEnter",


























































    function (event) {
      if (_this.props.onMouseEnter) {
        _this.props.onMouseEnter(event);
      }
      _this.handlePause();
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleMouseLeave",

    function (event) {
      if (_this.props.onMouseLeave) {
        _this.props.onMouseLeave(event);
      }
      _this.handleResume();
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleClickAway",

    function (event) {
      if (_this.props.onClose) {
        _this.props.onClose(event, 'clickaway');
      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handlePause",



    function () {
      clearTimeout(_this.timerAutoHide);
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleResume",



    function () {
      if (_this.props.autoHideDuration != null) {
        if (_this.props.resumeHideDuration != null) {
          _this.setAutoHideTimer(_this.props.resumeHideDuration);
          return;
        }
        _this.setAutoHideTimer(_this.props.autoHideDuration * 0.5);
      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleExited",

    function () {
      _this.setState({ exited: true });
    });return _this;}createClass(Snackbar, [{ key: "componentDidMount", value: function componentDidMount() {if (this.props.open) {this.setAutoHideTimer();}} }, { key: "componentDidUpdate", value: function componentDidUpdate(prevProps) {if (prevProps.open !== this.props.open) {if (this.props.open) {this.setAutoHideTimer();} else {clearTimeout(this.timerAutoHide);}}} }, { key: "componentWillUnmount", value: function componentWillUnmount() {clearTimeout(this.timerAutoHide);} }, { key: "setAutoHideTimer", // Timer that controls delay before snackbar auto hides
    value: function setAutoHideTimer(autoHideDuration) {var _this2 = this;var autoHideDurationBefore = autoHideDuration != null ? autoHideDuration : this.props.autoHideDuration;if (!this.props.onClose || autoHideDurationBefore == null) {return;}clearTimeout(this.timerAutoHide);this.timerAutoHide = setTimeout(function () {var autoHideDurationAfter = autoHideDuration != null ? autoHideDuration : _this2.props.autoHideDuration;if (!_this2.props.onClose || autoHideDurationAfter == null) {return;}_this2.props.onClose(null, 'timeout');}, autoHideDurationBefore);} }, { key: "render", value: function render()
    {var _this$props =


























      this.props,action = _this$props.action,_this$props$anchorOri = _this$props.anchorOrigin,vertical = _this$props$anchorOri.vertical,horizontal = _this$props$anchorOri.horizontal,autoHideDuration = _this$props.autoHideDuration,children = _this$props.children,classes = _this$props.classes,className = _this$props.className,ClickAwayListenerProps = _this$props.ClickAwayListenerProps,ContentProps = _this$props.ContentProps,disableWindowBlurListener = _this$props.disableWindowBlurListener,message = _this$props.message,onClose = _this$props.onClose,onEnter = _this$props.onEnter,onEntered = _this$props.onEntered,onEntering = _this$props.onEntering,onExit = _this$props.onExit,onExited = _this$props.onExited,onExiting = _this$props.onExiting,onMouseEnter = _this$props.onMouseEnter,onMouseLeave = _this$props.onMouseLeave,open = _this$props.open,resumeHideDuration = _this$props.resumeHideDuration,TransitionComponent = _this$props.TransitionComponent,transitionDuration = _this$props.transitionDuration,TransitionProps = _this$props.TransitionProps,other = objectWithoutProperties(_this$props, ["action", "anchorOrigin", "autoHideDuration", "children", "classes", "className", "ClickAwayListenerProps", "ContentProps", "disableWindowBlurListener", "message", "onClose", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "onMouseEnter", "onMouseLeave", "open", "resumeHideDuration", "TransitionComponent", "transitionDuration", "TransitionProps"]);

      // So we only render active snackbars.
      if (!open && this.state.exited) {
        return null;
      }

      return (
        react.createElement(ClickAwayListener, _extends_1({ onClickAway: this.handleClickAway }, ClickAwayListenerProps),
        react.createElement("div", _extends_1({
          className: classnames(
          classes.root,
          classes["anchorOrigin".concat(capitalize(vertical)).concat(capitalize(horizontal))],
          className),

          onMouseEnter: this.handleMouseEnter,
          onMouseLeave: this.handleMouseLeave },
        other),

        react.createElement(EventListener, {
          target: "window",
          onFocus: disableWindowBlurListener ? undefined : this.handleResume,
          onBlur: disableWindowBlurListener ? undefined : this.handlePause }),

        react.createElement(TransitionComponent, _extends_1({
          appear: true,
          in: open,
          onEnter: onEnter,
          onEntered: onEntered,
          onEntering: onEntering,
          onExit: onExit,
          onExited: createChainedFunction(this.handleExited, onExited),
          onExiting: onExiting,
          timeout: transitionDuration,
          direction: vertical === 'top' ? 'down' : 'up' },
        TransitionProps),

        children || react.createElement(SnackbarContent$1, _extends_1({ message: message, action: action }, ContentProps))))));




    } }], [{ key: "getDerivedStateFromProps", value: function getDerivedStateFromProps(nextProps, prevState) {if (typeof prevState.exited === 'undefined') {return { exited: !nextProps.open };}if (nextProps.open) {return { exited: false };}return null;} }]);return Snackbar;}(react.Component);


Snackbar.propTypes = {
  /**
                        * The action to display.
                        */
  action: propTypes.node,
  /**
                           * The anchor of the `Snackbar`.
                           */
  anchorOrigin: propTypes.shape({
    horizontal: propTypes.oneOf(['left', 'center', 'right']).isRequired,
    vertical: propTypes.oneOf(['top', 'bottom']).isRequired }),

  /**
                                                                 * The number of milliseconds to wait before automatically calling the
                                                                 * `onClose` function. `onClose` should then set the state of the `open`
                                                                 * prop to hide the Snackbar. This behavior is disabled by default with
                                                                 * the `null` value.
                                                                 */
  autoHideDuration: propTypes.number,
  /**
                                       * Replace the `SnackbarContent` component.
                                       */
  children: propTypes.element,
  /**
                                * Override or extend the styles applied to the component.
                                * See [CSS API](#css-api) below for more details.
                                */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * Properties applied to the `ClickAwayListener` element.
                                */
  ClickAwayListenerProps: propTypes.object,
  /**
                                             * Properties applied to the [`SnackbarContent`](/api/snackbar-content/) element.
                                             */
  ContentProps: propTypes.object,
  /**
                                   * If `true`, the `autoHideDuration` timer will expire even if the window is not focused.
                                   */
  disableWindowBlurListener: propTypes.bool,
  /**
                                              * When displaying multiple consecutive Snackbars from a parent rendering a single
                                              * <Snackbar/>, add the key property to ensure independent treatment of each message.
                                              * e.g. <Snackbar key={message} />, otherwise, the message may update-in-place and
                                              * features such as autoHideDuration may be canceled.
                                              */
  key: propTypes.any,
  /**
                       * The message to display.
                       */
  message: propTypes.node,
  /**
                            * Callback fired when the component requests to be closed.
                            * Typically `onClose` is used to set state in the parent component,
                            * which is used to control the `Snackbar` `open` prop.
                            * The `reason` parameter can optionally be used to control the response to `onClose`,
                            * for example ignoring `clickaway`.
                            *
                            * @param {object} event The event source of the callback
                            * @param {string} reason Can be:`"timeout"` (`autoHideDuration` expired) or: `"clickaway"`
                            */
  onClose: propTypes.func,
  /**
                            * Callback fired before the transition is entering.
                            */
  onEnter: propTypes.func,
  /**
                            * Callback fired when the transition has entered.
                            */
  onEntered: propTypes.func,
  /**
                              * Callback fired when the transition is entering.
                              */
  onEntering: propTypes.func,
  /**
                               * Callback fired before the transition is exiting.
                               */
  onExit: propTypes.func,
  /**
                           * Callback fired when the transition has exited.
                           */
  onExited: propTypes.func,
  /**
                             * Callback fired when the transition is exiting.
                             */
  onExiting: propTypes.func,
  /**
                              * @ignore
                              */
  onMouseEnter: propTypes.func,
  /**
                                 * @ignore
                                 */
  onMouseLeave: propTypes.func,
  /**
                                 * If true, `Snackbar` is open.
                                 */
  open: propTypes.bool,
  /**
                         * The number of milliseconds to wait before dismissing after user interaction.
                         * If `autoHideDuration` property isn't specified, it does nothing.
                         * If `autoHideDuration` property is specified but `resumeHideDuration` isn't,
                         * we default to `autoHideDuration / 2` ms.
                         */
  resumeHideDuration: propTypes.number,
  /**
                                         * Transition component.
                                         */
  TransitionComponent: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                                   * The duration for the transition, in milliseconds.
                                                                                                   * You may specify a single timeout for all transitions, or individually with an object.
                                                                                                   */
  transitionDuration: propTypes.oneOfType([
  propTypes.number,
  propTypes.shape({ enter: propTypes.number, exit: propTypes.number })]),

  /**
                                                                           * Properties applied to the `Transition` element.
                                                                           */
  TransitionProps: propTypes.object };


Snackbar.defaultProps = {
  anchorOrigin: {
    vertical: 'bottom',
    horizontal: 'center' },

  disableWindowBlurListener: false,
  TransitionComponent: Slide$1,
  transitionDuration: {
    enter: duration.enteringScreen,
    exit: duration.leavingScreen } };



withStyles(styles$1c, { flip: false, name: 'MuiSnackbar' })(Snackbar);

var styles$1d = {
  /* Styles applied to the root element. */
  root: {},
  /* Styles applied to the root element if `orientation="horizontal"`. */
  horizontal: {
    paddingLeft: 8,
    paddingRight: 8,
    '&:first-child': {
      paddingLeft: 0 },

    '&:last-child': {
      paddingRight: 0 } },


  /* Styles applied to the root element if `orientation="vertical"`. */
  vertical: {},
  /* Styles applied to the root element if `alternativeLabel={true}`. */
  alternativeLabel: {
    flex: 1,
    position: 'relative' },

  /* Styles applied to the root element if `completed={true}`. */
  completed: {} };


function Step(props) {var _classNames;var

  active =











  props.active,alternativeLabel = props.alternativeLabel,children = props.children,classes = props.classes,classNameProp = props.className,completed = props.completed,connector = props.connector,disabled = props.disabled,index = props.index,last = props.last,orientation = props.orientation,other = objectWithoutProperties(props, ["active", "alternativeLabel", "children", "classes", "className", "completed", "connector", "disabled", "index", "last", "orientation"]);

  var className = classnames(
  classes.root,
  classes[orientation], (_classNames = {}, defineProperty(_classNames,

  classes.alternativeLabel, alternativeLabel), defineProperty(_classNames,
  classes.completed, completed), _classNames),

  classNameProp);


  return (
    react.createElement("div", _extends_1({ className: className }, other),
    connector &&
    alternativeLabel &&
    index !== 0 &&
    react.cloneElement(connector, {
      orientation: orientation,
      alternativeLabel: alternativeLabel,
      index: index,
      active: active,
      completed: completed,
      disabled: disabled }),

    react.Children.map(children, function (child) {
      if (!react.isValidElement(child)) {
        return null;
      }

      warning_1(
      child.type !== react.Fragment,
      [
      "Material-UI: the Step component doesn't accept a Fragment as a child.",
      'Consider providing an array instead.'].
      join('\n'));


      return react.cloneElement(child, objectSpread({
        active: active,
        alternativeLabel: alternativeLabel,
        completed: completed,
        disabled: disabled,
        last: last,
        icon: index + 1,
        orientation: orientation },
      child.props));

    })));


}

Step.propTypes = {
  /**
                    * Sets the step as active. Is passed to child components.
                    */
  active: propTypes.bool,
  /**
                           * @ignore
                           * Set internally by Stepper when it's supplied with the alternativeLabel property.
                           */
  alternativeLabel: propTypes.bool,
  /**
                                     * Should be `Step` sub-components such as `StepLabel`, `StepContent`.
                                     */
  children: propTypes.node,
  /**
                             * Override or extend the styles applied to the component.
                             * See [CSS API](#css-api) below for more details.
                             */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * Mark the step as completed. Is passed to child components.
                                */
  completed: propTypes.bool,
  /**
                              * @ignore
                              * Passed down from Stepper if alternativeLabel is also set.
                              */
  connector: propTypes.element,
  /**
                                 * Mark the step as disabled, will also disable the button if
                                 * `StepButton` is a child of `Step`. Is passed to child components.
                                 */
  disabled: propTypes.bool,
  /**
                             * @ignore
                             * Used internally for numbering.
                             */
  index: propTypes.number,
  /**
                            * @ignore
                            */
  last: propTypes.bool,
  /**
                         * @ignore
                         */
  orientation: propTypes.oneOf(['horizontal', 'vertical']) };


Step.defaultProps = {
  active: false,
  completed: false,
  disabled: false };


withStyles(styles$1d, { name: 'MuiStep' })(Step);

/**
                                      * @ignore - internal component.
                                      */
var CheckCircle = function CheckCircle(props) {return (
    react.createElement(SvgIcon$1, props,
    react.createElement("path", { d: "M12 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24zm-2 17l-5-5 1.4-1.4 3.6 3.6 7.6-7.6L19 8l-9 9z" })));};


CheckCircle = pure(CheckCircle);
CheckCircle.muiName = 'SvgIcon';

var CheckCircle$1 = CheckCircle;

/**
                                      * @ignore - internal component.
                                      */
var Warning = function Warning(props) {return (
    react.createElement(SvgIcon$1, props,
    react.createElement("path", { d: "M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z" })));};


Warning = pure(Warning);
Warning.muiName = 'SvgIcon';

var Warning$1 = Warning;

var styles$1e = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: {
      display: 'block',
      color: theme.palette.text.disabled,
      '&$active': {
        color: theme.palette.primary.main },

      '&$completed': {
        color: theme.palette.primary.main },

      '&$error': {
        color: theme.palette.error.main } },


    /* Styles applied to the SVG text element. */
    text: {
      fill: theme.palette.primary.contrastText,
      fontSize: theme.typography.caption.fontSize,
      fontFamily: theme.typography.fontFamily },

    /* Styles applied to the root element if `active={true}`. */
    active: {},
    /* Styles applied to the root element if `completed={true}`. */
    completed: {},
    /* Styles applied to the root element if `error={true}`. */
    error: {} };};


function StepIcon(props) {var
  completed = props.completed,icon = props.icon,active = props.active,error = props.error,classes = props.classes;

  if (typeof icon === 'number' || typeof icon === 'string') {
    if (error) {
      return react.createElement(Warning$1, { className: classnames(classes.root, classes.error) });
    }
    if (completed) {
      return react.createElement(CheckCircle$1, { className: classnames(classes.root, classes.completed) });
    }
    return (
      react.createElement(SvgIcon$1, {
        className: classnames(classes.root, defineProperty({},
        classes.active, active)) },


      react.createElement("circle", { cx: "12", cy: "12", r: "12" }),
      react.createElement("text", { className: classes.text, x: "12", y: "16", textAnchor: "middle" },
      icon)));



  }

  return icon;
}

StepIcon.propTypes = {
  /**
                        * Whether this step is active.
                        */
  active: propTypes.bool,
  /**
                           * Override or extend the styles applied to the component.
                           * See [CSS API](#css-api) below for more details.
                           */
  classes: propTypes.object.isRequired,
  /**
                                         * Mark the step as completed. Is passed to child components.
                                         */
  completed: propTypes.bool,
  /**
                              * Mark the step as failed.
                              */
  error: propTypes.bool,
  /**
                          * The icon displayed by the step label.
                          */
  icon: propTypes.node.isRequired };


StepIcon.defaultProps = {
  active: false,
  completed: false,
  error: false };


var StepIcon$1 = withStyles(styles$1e, { name: 'MuiStepIcon' })(StepIcon);

var styles$1f = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: {
      display: 'flex',
      alignItems: 'center',
      '&$alternativeLabel': {
        flexDirection: 'column' },

      '&$disabled': {
        cursor: 'default' } },


    /* Styles applied to the root element if `orientation="horiizontal". */
    horizontal: {},
    /* Styles applied to the root element if `orientation="vertical". */
    vertical: {},
    /* Styles applied to the `Typography` component which wraps `children`. */
    label: {
      color: theme.palette.text.secondary,
      '&$active': {
        color: theme.palette.text.primary,
        fontWeight: 500 },

      '&$completed': {
        color: theme.palette.text.primary,
        fontWeight: 500 },

      '&$alternativeLabel': {
        textAlign: 'center',
        marginTop: 16 },

      '&$error': {
        color: theme.palette.error.main } },


    /* Styles applied to the `Typography` component if `active={true}`. */
    active: {},
    /* Styles applied to the `Typography` component if `completed={true}`. */
    completed: {},
    /* Styles applied to the root element and `Typography` component if `error={true}`. */
    error: {},
    /* Styles applied to the root element and `Typography` component if `disabled={true}`. */
    disabled: {},
    /* Styles applied to the `icon` container element. */
    iconContainer: {
      flexShrink: 0, // Fix IE 11 issue
      display: 'flex',
      paddingRight: 8,
      '&$alternativeLabel': {
        paddingRight: 0 } },


    /* Styles applied to the root & icon container and `Typography` if `alternativeLabel={true}`. */
    alternativeLabel: {},
    /* Styles applied to the container element which wraps `Typography` and `optional`. */
    labelContainer: {
      width: '100%' } };};



function StepLabel(props) {var _classNames, _classNames3;var

  active =














  props.active,alternativeLabel = props.alternativeLabel,children = props.children,classes = props.classes,classNameProp = props.className,completed = props.completed,disabled = props.disabled,error = props.error,icon = props.icon,last = props.last,optional = props.optional,orientation = props.orientation,StepIconComponentProp = props.StepIconComponent,StepIconProps = props.StepIconProps,other = objectWithoutProperties(props, ["active", "alternativeLabel", "children", "classes", "className", "completed", "disabled", "error", "icon", "last", "optional", "orientation", "StepIconComponent", "StepIconProps"]);

  var StepIconComponent = StepIconComponentProp;

  if (icon && !StepIconComponent) {
    StepIconComponent = StepIcon$1;
  }

  return (
    react.createElement("span", _extends_1({
      className: classnames(
      classes.root,
      classes[orientation], (_classNames = {}, defineProperty(_classNames,

      classes.disabled, disabled), defineProperty(_classNames,
      classes.alternativeLabel, alternativeLabel), defineProperty(_classNames,
      classes.error, error), _classNames),

      classNameProp) },

    other),

    icon || StepIconComponent ?
    react.createElement("span", {
      className: classnames(classes.iconContainer, defineProperty({},
      classes.alternativeLabel, alternativeLabel)) },


    react.createElement(StepIconComponent, _extends_1({
      completed: completed,
      active: active,
      error: error,
      icon: icon },
    StepIconProps))) :


    null,
    react.createElement("span", { className: classes.labelContainer },
    react.createElement(Typography$1, {
      component: "span",
      className: classnames(classes.label, (_classNames3 = {}, defineProperty(_classNames3,
      classes.alternativeLabel, alternativeLabel), defineProperty(_classNames3,
      classes.completed, completed), defineProperty(_classNames3,
      classes.active, active), defineProperty(_classNames3,
      classes.error, error), _classNames3)) },


    children),

    optional)));



}

StepLabel.propTypes = {
  /**
                         * @ignore
                         * Sets the step as active. Is passed to child components.
                         */
  active: propTypes.bool,
  /**
                           * @ignore
                           * Set internally by Stepper when it's supplied with the alternativeLabel property.
                           */
  alternativeLabel: propTypes.bool,
  /**
                                     * In most cases will simply be a string containing a title for the label.
                                     */
  children: propTypes.node,
  /**
                             * Override or extend the styles applied to the component.
                             * See [CSS API](#css-api) below for more details.
                             */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * @ignore
                                * Mark the step as completed. Is passed to child components.
                                */
  completed: propTypes.bool,
  /**
                              * Mark the step as disabled, will also disable the button if
                              * `StepLabelButton` is a child of `StepLabel`. Is passed to child components.
                              */
  disabled: propTypes.bool,
  /**
                             * Mark the step as failed.
                             */
  error: propTypes.bool,
  /**
                          * Override the default icon.
                          */
  icon: propTypes.node,
  /**
                         * @ignore
                         */
  last: propTypes.bool,
  /**
                         * The optional node to display.
                         */
  optional: propTypes.node,
  /**
                             * @ignore
                             */
  orientation: propTypes.oneOf(['horizontal', 'vertical']),
  /**
                                                             * The component to render in place of the [`StepIcon`](/api/step-icon/).
                                                             */
  StepIconComponent: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                                 * Properties applied to the [`StepIcon`](/api/step-icon/) element.
                                                                                                 */
  StepIconProps: propTypes.object };


StepLabel.defaultProps = {
  active: false,
  alternativeLabel: false,
  completed: false,
  disabled: false,
  error: false,
  last: false,
  orientation: 'horizontal' };


StepLabel.muiName = 'StepLabel';

var StepLabel$1 = withStyles(styles$1f, { name: 'MuiStepLabel' })(StepLabel);

var styles$1g = {
  /* Styles applied to the root element. */
  root: {
    width: '100%',
    padding: '24px 16px',
    margin: '-24px -16px',
    boxSizing: 'content-box' },

  /* Styles applied to the root element if `orientation="horizontal"`. */
  horizontal: {},
  /* Styles applied to the root element if `orientation="vertical"`. */
  vertical: {
    justifyContent: 'flex-start' },

  /* Styles applied to the `ButtonBase` touch-ripple. */
  touchRipple: {
    color: 'rgba(0, 0, 0, 0.3)' } };



function StepButton(props) {var

  active =











  props.active,alternativeLabel = props.alternativeLabel,children = props.children,classes = props.classes,classNameProp = props.className,completed = props.completed,disabled = props.disabled,icon = props.icon,last = props.last,optional = props.optional,orientation = props.orientation,other = objectWithoutProperties(props, ["active", "alternativeLabel", "children", "classes", "className", "completed", "disabled", "icon", "last", "optional", "orientation"]);

  var childProps = {
    active: active,
    alternativeLabel: alternativeLabel,
    completed: completed,
    disabled: disabled,
    icon: icon,
    optional: optional,
    orientation: orientation };

  var child = isMuiElement(children, ['StepLabel']) ?
  react.cloneElement(children, childProps) :

  react.createElement(StepLabel$1, childProps, children);


  return (
    react.createElement(ButtonBase$1, _extends_1({
      disabled: disabled,
      TouchRippleProps: { className: classes.touchRipple },
      className: classnames(classes.root, classes[orientation], classNameProp) },
    other),

    child));


}

StepButton.propTypes = {
  /**
                          * @ignore
                          * Passed in via `Step` - passed through to `StepLabel`.
                          */
  active: propTypes.bool,
  /**
                           * @ignore
                           * Set internally by Stepper when it's supplied with the alternativeLabel property.
                           */
  alternativeLabel: propTypes.bool,
  /**
                                     * Can be a `StepLabel` or a node to place inside `StepLabel` as children.
                                     */
  children: propTypes.node,
  /**
                             * Override or extend the styles applied to the component.
                             * See [CSS API](#css-api) below for more details.
                             */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * @ignore
                                * Sets completed styling. Is passed to StepLabel.
                                */
  completed: propTypes.bool,
  /**
                              * @ignore
                              * Disables the button and sets disabled styling. Is passed to StepLabel.
                              */
  disabled: propTypes.bool,
  /**
                             * The icon displayed by the step label.
                             */
  icon: propTypes.node,
  /**
                         * @ignore
                         */
  last: propTypes.bool,
  /**
                         * The optional node to display.
                         */
  optional: propTypes.node,
  /**
                             * @ignore
                             */
  orientation: propTypes.oneOf(['horizontal', 'vertical']) };


withStyles(styles$1g, { name: 'MuiStepButton' })(StepButton);

var styles$1h = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: {
      flex: '1 1 auto' },

    /* Styles applied to the root element if `orientation="horizontal"`. */
    horizontal: {},
    /* Styles applied to the root element if `orientation="vertical"`. */
    vertical: {
      marginLeft: 12, // half icon
      padding: '0 0 8px' },

    /* Styles applied to the root element if `alternativeLabel={true}`. */
    alternativeLabel: {
      position: 'absolute',
      top: 8 + 4,
      left: 'calc(-50% + 20px)',
      right: 'calc(50% + 20px)' },

    /* Styles applied to the root element if `active={true}`. */
    active: {},
    /* Styles applied to the root element if `completed={true}`. */
    completed: {},
    /* Styles applied to the root element if `disabled={true}`. */
    disabled: {},
    /* Styles applied to the line element. */
    line: {
      display: 'block',
      borderColor: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[600] },

    /* Styles applied to the root element if `orientation="horizontal"`. */
    lineHorizontal: {
      borderTopStyle: 'solid',
      borderTopWidth: 1 },

    /* Styles applied to the root element if `orientation="vertical"`. */
    lineVertical: {
      borderLeftStyle: 'solid',
      borderLeftWidth: 1,
      minHeight: 24 } };};



function StepConnector(props) {var _classNames, _classNames2;var

  active =








  props.active,alternativeLabel = props.alternativeLabel,classes = props.classes,classNameProp = props.className,completed = props.completed,disabled = props.disabled,index = props.index,orientation = props.orientation,other = objectWithoutProperties(props, ["active", "alternativeLabel", "classes", "className", "completed", "disabled", "index", "orientation"]);

  return (
    react.createElement("div", _extends_1({
      className: classnames(
      classes.root,
      classes[orientation], (_classNames = {}, defineProperty(_classNames,

      classes.alternativeLabel, alternativeLabel), defineProperty(_classNames,
      classes.active, active), defineProperty(_classNames,
      classes.completed, completed), defineProperty(_classNames,
      classes.disabled, disabled), _classNames),

      classNameProp) },

    other),

    react.createElement("span", {
      className: classnames(classes.line, (_classNames2 = {}, defineProperty(_classNames2,
      classes.lineHorizontal, orientation === 'horizontal'), defineProperty(_classNames2,
      classes.lineVertical, orientation === 'vertical'), _classNames2)) })));




}

StepConnector.propTypes = {
  /**
                             * @ignore
                             */
  active: propTypes.bool,
  /**
                           * @ignore
                           * Set internally by Step when it's supplied with the alternativeLabel property.
                           */
  alternativeLabel: propTypes.bool,
  /**
                                     * Override or extend the styles applied to the component.
                                     * See [CSS API](#css-api) below for more details.
                                     */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * @ignore
                                */
  completed: propTypes.bool,
  /**
                              * @ignore
                              */
  disabled: propTypes.bool,
  /**
                             * @ignore
                             */
  index: propTypes.number,
  /**
                            * @ignore
                            */
  orientation: propTypes.oneOf(['horizontal', 'vertical']) };


StepConnector.defaultProps = {
  alternativeLabel: false,
  orientation: 'horizontal' };


var StepConnector$1 = withStyles(styles$1h, { name: 'MuiStepConnector' })(StepConnector);

var styles$1i = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: {
      marginTop: 8,
      marginLeft: 12, // half icon
      paddingLeft: 8 + 12, // margin + half icon
      paddingRight: 8,
      borderLeft: "1px solid ".concat(
      theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[600]) },


    /* Styles applied to the root element if `last={true}` (controlled by `Step`). */
    last: {
      borderLeft: 'none' },

    /* Styles applied to the Transition component. */
    transition: {} };};


function StepContent(props) {var

  active =












  props.active,alternativeLabel = props.alternativeLabel,children = props.children,classes = props.classes,className = props.className,completed = props.completed,last = props.last,optional = props.optional,orientation = props.orientation,TransitionComponent = props.TransitionComponent,transitionDurationProp = props.transitionDuration,TransitionProps = props.TransitionProps,other = objectWithoutProperties(props, ["active", "alternativeLabel", "children", "classes", "className", "completed", "last", "optional", "orientation", "TransitionComponent", "transitionDuration", "TransitionProps"]);

  warning_1(
  orientation === 'vertical',
  'Material-UI: <StepContent /> is only designed for use with the vertical stepper.');


  var transitionDuration = transitionDurationProp;

  if (transitionDurationProp === 'auto' && !TransitionComponent.muiSupportAuto) {
    transitionDuration = undefined;
  }

  return (
    react.createElement("div", _extends_1({ className: classnames(classes.root, defineProperty({}, classes.last, last), className) }, other),
    react.createElement(TransitionComponent, _extends_1({
      in: active,
      className: classes.transition,
      timeout: transitionDuration,
      unmountOnExit: true },
    TransitionProps),

    children)));



}

StepContent.propTypes = {
  /**
                           * @ignore
                           * Expands the content.
                           */
  active: propTypes.bool,
  /**
                           * @ignore
                           * Set internally by Step when it's supplied with the alternativeLabel property.
                           */
  alternativeLabel: propTypes.bool,
  /**
                                     * Step content.
                                     */
  children: propTypes.node,
  /**
                             * Override or extend the styles applied to the component.
                             * See [CSS API](#css-api) below for more details.
                             */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * @ignore
                                */
  completed: propTypes.bool,
  /**
                              * @ignore
                              */
  last: propTypes.bool,
  /**
                         * @ignore
                         * Set internally by Step when it's supplied with the optional property.
                         */
  optional: propTypes.bool,
  /**
                             * @ignore
                             */
  orientation: propTypes.oneOf(['horizontal', 'vertical']),
  /**
                                                             * Collapse component.
                                                             */
  TransitionComponent: propTypes.func,
  /**
                                        * Adjust the duration of the content expand transition.
                                        * Passed as a property to the transition component.
                                        *
                                        * Set to 'auto' to automatically calculate transition time based on height.
                                        */
  transitionDuration: propTypes.oneOfType([
  propTypes.number,
  propTypes.shape({ enter: propTypes.number, exit: propTypes.number }),
  propTypes.oneOf(['auto'])]),

  /**
                                * Properties applied to the `Transition` element.
                                */
  TransitionProps: propTypes.object };


StepContent.defaultProps = {
  TransitionComponent: Collapse$1,
  transitionDuration: 'auto' };


withStyles(styles$1i, { name: 'MuiStepContent' })(StepContent);

var styles$1j = {
  /* Styles applied to the root element. */
  root: {
    display: 'flex',
    padding: 24 },

  /* Styles applied to the root element if `orientation="horizontal"`. */
  horizontal: {
    flexDirection: 'row',
    alignItems: 'center' },

  /* Styles applied to the root element if `orientation="vertical"`. */
  vertical: {
    flexDirection: 'column' },

  /* Styles applied to the root element if `alternativeLabel={true}`. */
  alternativeLabel: {
    alignItems: 'flex-start' } };



function Stepper(props) {var

  activeStep =








  props.activeStep,alternativeLabel = props.alternativeLabel,children = props.children,classes = props.classes,classNameProp = props.className,connectorProp = props.connector,nonLinear = props.nonLinear,orientation = props.orientation,other = objectWithoutProperties(props, ["activeStep", "alternativeLabel", "children", "classes", "className", "connector", "nonLinear", "orientation"]);

  var className = classnames(
  classes.root,
  classes[orientation], defineProperty({},

  classes.alternativeLabel, alternativeLabel),

  classNameProp);


  var connector = react.isValidElement(connectorProp) ?
  react.cloneElement(connectorProp, { orientation: orientation }) :
  null;
  var childrenArray = react.Children.toArray(children);
  var steps = childrenArray.map(function (step, index) {
    var controlProps = {
      alternativeLabel: alternativeLabel,
      connector: connectorProp,
      last: index + 1 === childrenArray.length,
      orientation: orientation };


    var state = {
      index: index,
      active: false,
      completed: false,
      disabled: false };


    if (activeStep === index) {
      state.active = true;
    } else if (!nonLinear && activeStep > index) {
      state.completed = true;
    } else if (!nonLinear && activeStep < index) {
      state.disabled = true;
    }

    return [
    !alternativeLabel &&
    connector &&
    index !== 0 &&
    react.cloneElement(connector, objectSpread({
      key: index },
    state)),

    react.cloneElement(step, objectSpread({}, controlProps, state, step.props))];

  });

  return (
    react.createElement(Paper$1, _extends_1({ square: true, elevation: 0, className: className }, other),
    steps));


}

Stepper.propTypes = {
  /**
                       * Set the active step (zero based index).
                       */
  activeStep: propTypes.number,
  /**
                                 * If set to 'true' and orientation is horizontal,
                                 * then the step label will be positioned under the icon.
                                 */
  alternativeLabel: propTypes.bool,
  /**
                                     * Two or more `<Step />` components.
                                     */
  children: propTypes.node.isRequired,
  /**
                                        * Override or extend the styles applied to the component.
                                        * See [CSS API](#css-api) below for more details.
                                        */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * A component to be placed between each step.
                                */
  connector: propTypes.element,
  /**
                                 * If set the `Stepper` will not assist in controlling steps for linear flow.
                                 */
  nonLinear: propTypes.bool,
  /**
                              * The stepper orientation (layout flow direction).
                              */
  orientation: propTypes.oneOf(['horizontal', 'vertical']) };


Stepper.defaultProps = {
  activeStep: 0,
  alternativeLabel: false,
  connector: react.createElement(StepConnector$1, null),
  nonLinear: false,
  orientation: 'horizontal' };


Stepper.muiName = 'Stepper';

withStyles(styles$1j, { name: 'MuiStepper' })(Stepper);

var styles$1k = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: {
      position: 'fixed',
      top: 0,
      left: 0,
      bottom: 0,
      zIndex: theme.zIndex.drawer - 1 },

    anchorLeft: {
      right: 'auto' },

    anchorRight: {
      left: 'auto',
      right: 0 },

    anchorTop: {
      bottom: 'auto',
      right: 0 },

    anchorBottom: {
      top: 'auto',
      bottom: 0,
      right: 0 } };};



/**
                       * @ignore - internal component.
                       */
function SwipeArea(props) {var
  anchor = props.anchor,classes = props.classes,className = props.className,width = props.width,other = objectWithoutProperties(props, ["anchor", "classes", "className", "width"]);

  return (
    react.createElement("div", _extends_1({
      className: classnames(classes.root, classes["anchor".concat(capitalize(anchor))], className),
      style: defineProperty({},
      isHorizontal(props) ? 'width' : 'height', width) },

    other)));


}

SwipeArea.propTypes = {
  /**
                         * Side on which to attach the discovery area.
                         */
  anchor: propTypes.oneOf(['left', 'top', 'right', 'bottom']).isRequired,
  /**
                                                                           * @ignore
                                                                           */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * The width of the left most (or right most) area in pixels where the
                                * drawer can be swiped open from.
                                */
  width: propTypes.number.isRequired };


var SwipeArea$1 = withStyles(styles$1k, { name: 'MuiPrivateSwipeArea' })(SwipeArea);

// This value is closed to what browsers are using internally to
// trigger a native scroll.
var UNCERTAINTY_THRESHOLD = 3; // px

// We can only have one node at the time claiming ownership for handling the swipe.
// Otherwise, the UX would be confusing.
// That's why we use a singleton here.
var nodeThatClaimedTheSwipe = null;
var

SwipeableDrawer = /*#__PURE__*/function (_React$Component) {inherits(SwipeableDrawer, _React$Component);function SwipeableDrawer() {var _getPrototypeOf2;var _this;classCallCheck(this, SwipeableDrawer);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(SwipeableDrawer)).call.apply(_getPrototypeOf2, [this].concat(args)));defineProperty(assertThisInitialized(assertThisInitialized(_this)), "state",
    {});defineProperty(assertThisInitialized(assertThisInitialized(_this)), "isSwiping",

    null);defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleBodyTouchStart",










































































































    function (event) {
      // We are not supposed to hanlde this touch move.
      if (nodeThatClaimedTheSwipe !== null && nodeThatClaimedTheSwipe !== assertThisInitialized(assertThisInitialized(_this))) {
        return;
      }var _this$props =

      _this.props,disableDiscovery = _this$props.disableDiscovery,disableSwipeToOpen = _this$props.disableSwipeToOpen,open = _this$props.open,swipeAreaWidth = _this$props.swipeAreaWidth;
      var anchor = getAnchor(_this.props);
      var currentX =
      anchor === 'right' ?
      document.body.offsetWidth - event.touches[0].pageX :
      event.touches[0].pageX;
      var currentY =
      anchor === 'bottom' ?
      window.innerHeight - event.touches[0].clientY :
      event.touches[0].clientY;

      if (!open) {
        if (disableSwipeToOpen) {
          return;
        }
        if (isHorizontal(_this.props)) {
          if (currentX > swipeAreaWidth) {
            return;
          }
        } else if (currentY > swipeAreaWidth) {
          return;
        }
      }

      nodeThatClaimedTheSwipe = assertThisInitialized(assertThisInitialized(_this));
      _this.startX = currentX;
      _this.startY = currentY;

      _this.setState({ maybeSwiping: true });
      if (!open && _this.paperRef) {
        // The ref may be null when a parent component updates while swiping.
        _this.setPosition(_this.getMaxTranslate() + (disableDiscovery ? 20 : -swipeAreaWidth), {
          changeTransition: false });

      }

      _this.velocity = 0;
      _this.lastTime = null;
      _this.lastTranslate = null;

      document.body.addEventListener('touchmove', _this.handleBodyTouchMove, { passive: false });
      document.body.addEventListener('touchend', _this.handleBodyTouchEnd);
      // https://plus.google.com/+PaulIrish/posts/KTwfn1Y2238
      document.body.addEventListener('touchcancel', _this.handleBodyTouchEnd);
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleBodyTouchMove",

    function (event) {
      // the ref may be null when a parent component updates while swiping
      if (!_this.paperRef) return;

      var anchor = getAnchor(_this.props);
      var horizontalSwipe = isHorizontal(_this.props);

      var currentX =
      anchor === 'right' ?
      document.body.offsetWidth - event.touches[0].pageX :
      event.touches[0].pageX;
      var currentY =
      anchor === 'bottom' ?
      window.innerHeight - event.touches[0].clientY :
      event.touches[0].clientY;

      // We don't know yet.
      if (_this.isSwiping == null) {
        var dx = Math.abs(currentX - _this.startX);
        var dy = Math.abs(currentY - _this.startY);

        // We are likely to be swiping, let's prevent the scroll event on iOS.
        if (dx > dy) {
          event.preventDefault();
        }

        var isSwiping = horizontalSwipe ?
        dx > dy && dx > UNCERTAINTY_THRESHOLD :
        dy > dx && dy > UNCERTAINTY_THRESHOLD;

        if (
        isSwiping === true || (
        horizontalSwipe ? dy > UNCERTAINTY_THRESHOLD : dx > UNCERTAINTY_THRESHOLD))
        {
          _this.isSwiping = isSwiping;
          if (!isSwiping) {
            _this.handleBodyTouchEnd(event);
            return;
          }

          // Shift the starting point.
          _this.startX = currentX;
          _this.startY = currentY;

          // Compensate for the part of the drawer displayed on touch start.
          if (!_this.props.disableDiscovery && !_this.props.open) {
            if (horizontalSwipe) {
              _this.startX -= _this.props.swipeAreaWidth;
            } else {
              _this.startY -= _this.props.swipeAreaWidth;
            }
          }
        }
      }

      if (!_this.isSwiping) {
        return;
      }

      var translate = _this.getTranslate(horizontalSwipe ? currentX : currentY);

      if (_this.lastTranslate === null) {
        _this.lastTranslate = translate;
        _this.lastTime = performance.now() + 1;
      }

      var velocity = (translate - _this.lastTranslate) / (performance.now() - _this.lastTime) * 1e3;

      // Low Pass filter.
      _this.velocity = _this.velocity * 0.4 + velocity * 0.6;

      _this.lastTranslate = translate;
      _this.lastTime = performance.now();

      // We are swiping, let's prevent the scroll event on iOS.
      event.preventDefault();
      _this.setPosition(translate);
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleBodyTouchEnd",

    function (event) {
      nodeThatClaimedTheSwipe = null;
      _this.removeBodyTouchListeners();
      _this.setState({ maybeSwiping: false });

      // The swipe wasn't started.
      if (!_this.isSwiping) {
        _this.isSwiping = null;
        return;
      }

      _this.isSwiping = null;

      var anchor = getAnchor(_this.props);
      var current;
      if (isHorizontal(_this.props)) {
        current =
        anchor === 'right' ?
        document.body.offsetWidth - event.changedTouches[0].pageX :
        event.changedTouches[0].pageX;
      } else {
        current =
        anchor === 'bottom' ?
        window.innerHeight - event.changedTouches[0].clientY :
        event.changedTouches[0].clientY;
      }

      var translateRatio = _this.getTranslate(current) / _this.getMaxTranslate();

      if (_this.props.open) {
        if (_this.velocity > _this.props.minFlingVelocity || translateRatio > _this.props.hysteresis) {
          _this.props.onClose();
        } else {
          // Reset the position, the swipe was aborted.
          _this.setPosition(0, {
            mode: 'exit' });

        }

        return;
      }

      if (
      _this.velocity < -_this.props.minFlingVelocity ||
      1 - translateRatio > _this.props.hysteresis)
      {
        _this.props.onOpen();
      } else {
        // Reset the position, the swipe was aborted.
        _this.setPosition(_this.getMaxTranslate(), {
          mode: 'enter' });

      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleBackdropRef",

    function (ref) {
      _this.backdropRef = ref ? reactDom.findDOMNode(ref) : null;
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handlePaperRef",

    function (ref) {
      _this.paperRef = ref ? reactDom.findDOMNode(ref) : null;
    });return _this;}createClass(SwipeableDrawer, [{ key: "componentDidMount", value: function componentDidMount() {if (this.props.variant === 'temporary') {this.listenTouchStart();}} }, { key: "componentDidUpdate", value: function componentDidUpdate(prevProps) {var variant = this.props.variant;var prevVariant = prevProps.variant;if (variant !== prevVariant) {if (variant === 'temporary') {this.listenTouchStart();} else if (prevVariant === 'temporary') {this.removeTouchStart();}}} }, { key: "componentWillUnmount", value: function componentWillUnmount() {this.removeTouchStart();this.removeBodyTouchListeners(); // We need to release the lock.
      if (nodeThatClaimedTheSwipe === this) {nodeThatClaimedTheSwipe = null;}} }, { key: "getMaxTranslate", value: function getMaxTranslate() {return isHorizontal(this.props) ? this.paperRef.clientWidth : this.paperRef.clientHeight;} }, { key: "getTranslate", value: function getTranslate(current) {var start = isHorizontal(this.props) ? this.startX : this.startY;return Math.min(Math.max(this.props.open ? start - current : this.getMaxTranslate() + start - current, 0), this.getMaxTranslate());} }, { key: "setPosition", value: function setPosition(translate) {var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};var _options$mode = options.mode,mode = _options$mode === void 0 ? null : _options$mode,_options$changeTransi = options.changeTransition,changeTransition = _options$changeTransi === void 0 ? true : _options$changeTransi;var anchor = getAnchor(this.props);var rtlTranslateMultiplier = ['right', 'bottom'].indexOf(anchor) !== -1 ? 1 : -1;var transform = isHorizontal(this.props) ? "translate(".concat(rtlTranslateMultiplier * translate, "px, 0)") : "translate(0, ".concat(rtlTranslateMultiplier * translate, "px)");var drawerStyle = this.paperRef.style;drawerStyle.webkitTransform = transform;drawerStyle.transform = transform;var transition = '';if (mode) {transition = this.props.theme.transitions.create('all', getTransitionProps({ timeout: this.props.transitionDuration }, { mode: mode }));}if (changeTransition) {drawerStyle.webkitTransition = transition;drawerStyle.transition = transition;}if (!this.props.disableBackdropTransition && !this.props.hideBackdrop) {var backdropStyle = this.backdropRef.style;backdropStyle.opacity = 1 - translate / this.getMaxTranslate();if (changeTransition) {backdropStyle.webkitTransition = transition;backdropStyle.transition = transition;}}} }, { key: "listenTouchStart", value: function listenTouchStart()
    {
      document.body.addEventListener('touchstart', this.handleBodyTouchStart);
    } }, { key: "removeTouchStart", value: function removeTouchStart()

    {
      document.body.removeEventListener('touchstart', this.handleBodyTouchStart);
    } }, { key: "removeBodyTouchListeners", value: function removeBodyTouchListeners()

    {
      document.body.removeEventListener('touchmove', this.handleBodyTouchMove, { passive: false });
      document.body.removeEventListener('touchend', this.handleBodyTouchEnd);
      document.body.removeEventListener('touchcancel', this.handleBodyTouchEnd);
    } }, { key: "render", value: function render()

    {var _this$props2 =















      this.props,anchor = _this$props2.anchor,disableBackdropTransition = _this$props2.disableBackdropTransition,disableDiscovery = _this$props2.disableDiscovery,disableSwipeToOpen = _this$props2.disableSwipeToOpen,hysteresis = _this$props2.hysteresis,minFlingVelocity = _this$props2.minFlingVelocity,_this$props2$ModalPro = _this$props2.ModalProps;_this$props2$ModalPro = _this$props2$ModalPro === void 0 ? {} : _this$props2$ModalPro;var BackdropProps = _this$props2$ModalPro.BackdropProps,ModalPropsProp = objectWithoutProperties(_this$props2$ModalPro, ["BackdropProps"]),onOpen = _this$props2.onOpen,open = _this$props2.open,_this$props2$PaperPro = _this$props2.PaperProps,PaperProps = _this$props2$PaperPro === void 0 ? {} : _this$props2$PaperPro,SwipeAreaProps = _this$props2.SwipeAreaProps,swipeAreaWidth = _this$props2.swipeAreaWidth,variant = _this$props2.variant,other = objectWithoutProperties(_this$props2, ["anchor", "disableBackdropTransition", "disableDiscovery", "disableSwipeToOpen", "hysteresis", "minFlingVelocity", "ModalProps", "onOpen", "open", "PaperProps", "SwipeAreaProps", "swipeAreaWidth", "variant"]);var
      maybeSwiping = this.state.maybeSwiping;

      return (
        react.createElement(react.Fragment, null,
        react.createElement(Drawer$1, _extends_1({
          open: variant === 'temporary' && maybeSwiping ? true : open,
          variant: variant,
          ModalProps: objectSpread({
            BackdropProps: objectSpread({},
            BackdropProps, {
              ref: this.handleBackdropRef }) },

          ModalPropsProp),

          PaperProps: objectSpread({},
          PaperProps, {
            style: objectSpread({
              pointerEvents: variant === 'temporary' && !open ? 'none' : '' },
            PaperProps.style),

            ref: this.handlePaperRef }),

          anchor: anchor },
        other)),

        !disableDiscovery && !disableSwipeToOpen && variant === 'temporary' &&
        react.createElement(NoSsr, null,
        react.createElement(SwipeArea$1, _extends_1({ anchor: anchor, width: swipeAreaWidth }, SwipeAreaProps)))));




    } }], [{ key: "getDerivedStateFromProps", value: function getDerivedStateFromProps(nextProps, prevState) {if (typeof prevState.maybeSwiping === 'undefined') {return { maybeSwiping: false, open: nextProps.open };}if (!nextProps.open && prevState.open) {return { maybeSwiping: false, open: nextProps.open };}return { open: nextProps.open };} }]);return SwipeableDrawer;}(react.Component);


SwipeableDrawer.propTypes = {
  /**
                               * @ignore
                               */
  anchor: propTypes.oneOf(['left', 'top', 'right', 'bottom']),
  /**
                                                                * Disable the backdrop transition.
                                                                * This can improve the FPS on low-end devices.
                                                                */
  disableBackdropTransition: propTypes.bool,
  /**
                                              * If `true`, touching the screen near the edge of the drawer will not slide in the drawer a bit
                                              * to promote accidental discovery of the swipe gesture.
                                              */
  disableDiscovery: propTypes.bool,
  /**
                                     * If `true`, swipe to open is disabled. This is useful in browsers where swiping triggers
                                     * navigation actions. Swipe to open is disabled on iOS browsers by default.
                                     */
  disableSwipeToOpen: propTypes.bool,
  /**
                                       * Affects how far the drawer must be opened/closed to change his state.
                                       * Specified as percent (0-1) of the width of the drawer
                                       */
  hysteresis: propTypes.number,
  /**
                                 * Defines, from which (average) velocity on, the swipe is
                                 * defined as complete although hysteresis isn't reached.
                                 * Good threshold is between 250 - 1000 px/s
                                 */
  minFlingVelocity: propTypes.number,
  /**
                                       * @ignore
                                       */
  ModalProps: propTypes.object,
  /**
                                 * Callback fired when the component requests to be closed.
                                 *
                                 * @param {object} event The event source of the callback
                                 */
  onClose: propTypes.func.isRequired,
  /**
                                       * Callback fired when the component requests to be opened.
                                       *
                                       * @param {object} event The event source of the callback
                                       */
  onOpen: propTypes.func.isRequired,
  /**
                                      * If `true`, the drawer is open.
                                      */
  open: propTypes.bool.isRequired,
  /**
                                    * @ignore
                                    */
  PaperProps: propTypes.object,
  /**
                                 * Properties applied to the swipe area element.
                                 */
  SwipeAreaProps: propTypes.object,
  /**
                                     * The width of the left most (or right most) area in pixels where the
                                     * drawer can be swiped open from.
                                     */
  swipeAreaWidth: propTypes.number,
  /**
                                     * @ignore
                                     */
  theme: propTypes.object.isRequired,
  /**
                                       * The duration for the transition, in milliseconds.
                                       * You may specify a single timeout for all transitions, or individually with an object.
                                       */
  transitionDuration: propTypes.oneOfType([
  propTypes.number,
  propTypes.shape({ enter: propTypes.number, exit: propTypes.number })]),

  /**
                                                                           * @ignore
                                                                           */
  variant: propTypes.oneOf(['permanent', 'persistent', 'temporary']) };


SwipeableDrawer.defaultProps = {
  anchor: 'left',
  disableBackdropTransition: false,
  disableDiscovery: false,
  disableSwipeToOpen:
  typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent),
  hysteresis: 0.55,
  minFlingVelocity: 400,
  swipeAreaWidth: 20,
  transitionDuration: { enter: duration.enteringScreen, exit: duration.leavingScreen },
  variant: 'temporary' // Mobile first.
};

withTheme()(SwipeableDrawer);

var styles$1l = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: {
      display: 'inline-flex',
      width: 62,
      position: 'relative',
      flexShrink: 0,
      zIndex: 0, // Reset the stacking context.
      // For correct alignment with the text.
      verticalAlign: 'middle' },

    /* Styles used to create the `icon` passed to the internal `SwitchBase` component `icon` prop. */
    icon: {
      boxShadow: theme.shadows[1],
      backgroundColor: 'currentColor',
      width: 20,
      height: 20,
      borderRadius: '50%' },

    /* Styles applied the icon element component if `checked={true}`. */
    iconChecked: {
      boxShadow: theme.shadows[2] },

    /* Styles applied to the internal `SwitchBase` component's `root` class. */
    switchBase: {
      padding: 0,
      height: 48,
      width: 48,
      color: theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[400],
      transition: theme.transitions.create('transform', {
        duration: theme.transitions.duration.shortest }) },


    /* Styles applied to the internal `SwitchBase` component's `checked` class. */
    checked: {
      transform: 'translateX(14px)',
      '& + $bar': {
        opacity: 0.5 } },


    /* Styles applied to the internal SwitchBase component's root element if `color="primary"`. */
    colorPrimary: {
      '&$checked': {
        color: theme.palette.primary.main,
        '& + $bar': {
          backgroundColor: theme.palette.primary.main } } },



    /* Styles applied to the internal SwitchBase component's root element if `color="secondary"`. */
    colorSecondary: {
      '&$checked': {
        color: theme.palette.secondary.main,
        '& + $bar': {
          backgroundColor: theme.palette.secondary.main } } },



    /* Styles applied to the internal SwitchBase component's disabled class. */
    disabled: {
      '& + $bar': {
        opacity: theme.palette.type === 'light' ? 0.12 : 0.1 },

      '& $icon': {
        boxShadow: theme.shadows[1] },

      '&$switchBase': {
        color: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[800],
        '& + $bar': {
          backgroundColor:
          theme.palette.type === 'light' ? theme.palette.common.black : theme.palette.common.white } } },



    /* Styles applied to the bar element. */
    bar: {
      borderRadius: 14 / 2,
      display: 'block',
      position: 'absolute',
      zIndex: -1,
      width: 34,
      height: 14,
      top: '50%',
      left: '50%',
      marginTop: -7,
      marginLeft: -17,
      transition: theme.transitions.create(['opacity', 'background-color'], {
        duration: theme.transitions.duration.shortest }),

      backgroundColor:
      theme.palette.type === 'light' ? theme.palette.common.black : theme.palette.common.white,
      opacity: theme.palette.type === 'light' ? 0.38 : 0.3 } };};



function Switch(props) {var
  classes = props.classes,className = props.className,color = props.color,other = objectWithoutProperties(props, ["classes", "className", "color"]);

  return (
    react.createElement("span", { className: classnames(classes.root, className) },
    react.createElement(SwitchBase$1, _extends_1({
      type: "checkbox",
      icon: react.createElement("span", { className: classes.icon }),
      classes: {
        root: classnames(classes.switchBase, classes["color".concat(capitalize(color))]),
        checked: classes.checked,
        disabled: classes.disabled },

      checkedIcon: react.createElement("span", { className: classnames(classes.icon, classes.iconChecked) }) },
    other)),

    react.createElement("span", { className: classes.bar })));


}

Switch.propTypes = {
  /**
                      * If `true`, the component is checked.
                      */
  checked: propTypes.oneOfType([propTypes.bool, propTypes.string]),
  /**
                                                                     * The icon to display when the component is checked.
                                                                     */
  checkedIcon: propTypes.node,
  /**
                                * Override or extend the styles applied to the component.
                                * See [CSS API](#css-api) below for more details.
                                */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * The color of the component. It supports those theme colors that make sense for this component.
                                */
  color: propTypes.oneOf(['primary', 'secondary', 'default']),
  /**
                                                                * @ignore
                                                                */
  defaultChecked: propTypes.bool,
  /**
                                   * If `true`, the switch will be disabled.
                                   */
  disabled: propTypes.bool,
  /**
                             * If `true`, the ripple effect will be disabled.
                             */
  disableRipple: propTypes.bool,
  /**
                                  * The icon to display when the component is unchecked.
                                  */
  icon: propTypes.node,
  /**
                         * The id of the `input` element.
                         */
  id: propTypes.string,
  /**
                         * Attributes applied to the `input` element.
                         */
  inputProps: propTypes.object,
  /**
                                 * Use that property to pass a ref callback to the native input component.
                                 */
  inputRef: propTypes.oneOfType([propTypes.func, propTypes.object]),
  /**
                                                                      * Callback fired when the state is changed.
                                                                      *
                                                                      * @param {object} event The event source of the callback.
                                                                      * You can pull out the new value by accessing `event.target.checked`.
                                                                      * @param {boolean} checked The `checked` value of the switch
                                                                      */
  onChange: propTypes.func,
  /**
                             * The input component property `type`.
                             */
  type: propTypes.string,
  /**
                           * The value of the component.
                           */
  value: propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.bool]) };


Switch.defaultProps = {
  color: 'secondary' };


withStyles(styles$1l, { name: 'MuiSwitch' })(Switch);

var styles$1m = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: objectSpread({},
    theme.typography.button, defineProperty({
      maxWidth: 264,
      minWidth: 72,
      position: 'relative',
      boxSizing: 'border-box',
      padding: 0,
      minHeight: 48,
      flexShrink: 0,
      overflow: 'hidden',
      whiteSpace: 'normal',
      textAlign: 'center' },
    theme.breakpoints.up('md'), {
      fontSize: theme.typography.pxToRem(13),
      minWidth: 160 })),


    /* Styles applied to the root element if both `icon` and `label` are provided. */
    labelIcon: {
      minHeight: 72,
      // paddingTop supposed to be 12px
      // - 3px from the paddingBottom
      paddingTop: 9
      // paddingBottom supposed to be 12px
      // -3px for line-height of the label
      // -6px for label padding
      // = 3px
    },
    /* Styles applied to the root element if `textColor="inherit"`. */
    textColorInherit: {
      color: 'inherit',
      opacity: 0.7,
      '&$selected': {
        opacity: 1 },

      '&$disabled': {
        opacity: 0.4 } },


    /* Styles applied to the root element if `textColor="primary"`. */
    textColorPrimary: {
      color: theme.palette.text.secondary,
      '&$selected': {
        color: theme.palette.primary.main },

      '&$disabled': {
        color: theme.palette.text.disabled } },


    /* Styles applied to the root element if `textColor="secondary"`. */
    textColorSecondary: {
      color: theme.palette.text.secondary,
      '&$selected': {
        color: theme.palette.secondary.main },

      '&$disabled': {
        color: theme.palette.text.disabled } },


    /* Styles applied to the root element if `selected={true}` (controlled by the Tabs component). */
    selected: {},
    /* Styles applied to the root element if `disabled={true}` (controlled by the Tabs component). */
    disabled: {},
    /* Styles applied to the root element if `fullWidth={true}` (controlled by the Tabs component). */
    fullWidth: {
      flexShrink: 1,
      flexGrow: 1,
      maxWidth: 'none' },

    /* Styles applied to the `icon` and `label`'s wrapper element. */
    wrapper: {
      display: 'inline-flex',
      alignItems: 'center',
      justifyContent: 'center',
      width: '100%',
      flexDirection: 'column' },

    /* Styles applied to the label container element if `label` is provided. */
    labelContainer: defineProperty({
      width: '100%', // Fix an IE 11 issue
      boxSizing: 'border-box',
      padding: '6px 12px' },
    theme.breakpoints.up('md'), {
      padding: '6px 24px' }),


    /* Styles applied to the label wrapper element if `label` is provided. */
    label: {},
    /* Styles applied to the label wrapper element if `label` is provided and the text is wrapped. */
    labelWrapped: defineProperty({},
    theme.breakpoints.down('sm'), {
      fontSize: theme.typography.pxToRem(12) }) };};var




Tab = /*#__PURE__*/function (_React$Component) {inherits(Tab, _React$Component);function Tab() {var _getPrototypeOf2;var _this;classCallCheck(this, Tab);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Tab)).call.apply(_getPrototypeOf2, [this].concat(args)));defineProperty(assertThisInitialized(assertThisInitialized(_this)), "state",
    {
      labelWrapped: false });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleChange",

















    function (event) {var _this$props =
      _this.props,onChange = _this$props.onChange,value = _this$props.value,onClick = _this$props.onClick;

      if (onChange) {
        onChange(event, value);
      }

      if (onClick) {
        onClick(event);
      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "checkTextWrap",

    function () {
      if (_this.labelRef) {
        var labelWrapped = _this.labelRef.getClientRects().length > 1;
        if (_this.state.labelWrapped !== labelWrapped) {
          _this.setState({ labelWrapped: labelWrapped });
        }
      }
    });return _this;}createClass(Tab, [{ key: "componentDidMount", value: function componentDidMount() {this.checkTextWrap();} }, { key: "componentDidUpdate", value: function componentDidUpdate(prevProps, prevState) {if (this.state.labelWrapped === prevState.labelWrapped) {/**
                                                                                                                                                                                                                                                                                    * At certain text and tab lengths, a larger font size may wrap to two lines while the smaller
                                                                                                                                                                                                                                                                                    * font size still only requires one line.  This check will prevent an infinite render loop
                                                                                                                                                                                                                                                                                    * fron occurring in that scenario.
                                                                                                                                                                                                                                                                                    */this.checkTextWrap();}} }, { key: "render", value: function render() {var _this2 = this,_classNames2;var _this$props2 =











      this.props,classes = _this$props2.classes,className = _this$props2.className,disabled = _this$props2.disabled,fullWidth = _this$props2.fullWidth,icon = _this$props2.icon,indicator = _this$props2.indicator,labelProp = _this$props2.label,onChange = _this$props2.onChange,selected = _this$props2.selected,textColor = _this$props2.textColor,value = _this$props2.value,other = objectWithoutProperties(_this$props2, ["classes", "className", "disabled", "fullWidth", "icon", "indicator", "label", "onChange", "selected", "textColor", "value"]);

      var label;

      if (labelProp !== undefined) {
        label =
        react.createElement("span", { className: classes.labelContainer },
        react.createElement("span", {
          className: classnames(classes.label, defineProperty({},
          classes.labelWrapped, this.state.labelWrapped)),

          ref: function ref(_ref) {
            _this2.labelRef = _ref;
          } },

        labelProp));



      }

      return (
        react.createElement(ButtonBase$1, _extends_1({
          focusRipple: true,
          className: classnames(
          classes.root,
          classes["textColor".concat(capitalize(textColor))], (_classNames2 = {}, defineProperty(_classNames2,

          classes.disabled, disabled), defineProperty(_classNames2,
          classes.selected, selected), defineProperty(_classNames2,
          classes.labelIcon, icon && label), defineProperty(_classNames2,
          classes.fullWidth, fullWidth), _classNames2),

          className),

          role: "tab",
          "aria-selected": selected,
          disabled: disabled },
        other, {
          onClick: this.handleChange }),

        react.createElement("span", { className: classes.wrapper },
        icon,
        label),

        indicator));


    } }]);return Tab;}(react.Component);


Tab.propTypes = {
  /**
                   * This property isn't supported.
                   * Use the `component` property if you need to change the children structure.
                   */
  children: unsupportedProp,
  /**
                              * Override or extend the styles applied to the component.
                              * See [CSS API](#css-api) below for more details.
                              */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * If `true`, the tab will be disabled.
                                */
  disabled: propTypes.bool,
  /**
                             * @ignore
                             */
  fullWidth: propTypes.bool,
  /**
                              * The icon element.
                              */
  icon: propTypes.node,
  /**
                         * @ignore
                         * For server side rendering consideration, we let the selected tab
                         * render the indicator.
                         */
  indicator: propTypes.node,
  /**
                              * The label element.
                              */
  label: propTypes.node,
  /**
                          * @ignore
                          */
  onChange: propTypes.func,
  /**
                             * @ignore
                             */
  onClick: propTypes.func,
  /**
                            * @ignore
                            */
  selected: propTypes.bool,
  /**
                             * @ignore
                             */
  textColor: propTypes.oneOf(['secondary', 'primary', 'inherit']),
  /**
                                                                    * You can provide your own value. Otherwise, we fallback to the child position index.
                                                                    */
  value: propTypes.any };


Tab.defaultProps = {
  disabled: false,
  textColor: 'inherit' };


withStyles(styles$1m, { name: 'MuiTab' })(Tab);

/**
                            * @ignore - internal component.
                            */
var TableContext = react.createContext();

var styles$1n = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: {
      display: 'table',
      fontFamily: theme.typography.fontFamily,
      width: '100%',
      borderCollapse: 'collapse',
      borderSpacing: 0 } };};



function Table(props) {var
  classes = props.classes,className = props.className,Component = props.component,padding = props.padding,other = objectWithoutProperties(props, ["classes", "className", "component", "padding"]);

  return (
    react.createElement(TableContext.Provider, { value: { padding: padding } },
    react.createElement(Component, _extends_1({ className: classnames(classes.root, className) }, other))));


}

Table.propTypes = {
  /**
                     * The content of the table, normally `TableHead` and `TableBody`.
                     */
  children: propTypes.node.isRequired,
  /**
                                        * Override or extend the styles applied to the component.
                                        * See [CSS API](#css-api) below for more details.
                                        */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * The component used for the root node.
                                * Either a string to use a DOM element or a component.
                                */
  component: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                         * Allows TableCells to inherit padding of the Table.
                                                                                         */
  padding: propTypes.oneOf(['default', 'checkbox', 'dense', 'none']) };


Table.defaultProps = {
  component: 'table',
  padding: 'default' };


withStyles(styles$1n, { name: 'MuiTable' })(Table);

/**
                            * @ignore - internal component.
                            */
var Tablelvl2Context = react.createContext();

var styles$1o = {
  /* Styles applied to the root element. */
  root: {
    display: 'table-row-group' } };



function TableBody(props) {var
  classes = props.classes,className = props.className,Component = props.component,other = objectWithoutProperties(props, ["classes", "className", "component"]);

  return (
    react.createElement(Tablelvl2Context.Provider, { value: { variant: 'body' } },
    react.createElement(Component, _extends_1({ className: classnames(classes.root, className) }, other))));


}

TableBody.propTypes = {
  /**
                         * The content of the component, normally `TableRow`.
                         */
  children: propTypes.node,
  /**
                             * Override or extend the styles applied to the component.
                             * See [CSS API](#css-api) below for more details.
                             */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * The component used for the root node.
                                * Either a string to use a DOM element or a component.
                                */
  component: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]) };


TableBody.defaultProps = {
  component: 'tbody' };


withStyles(styles$1o, { name: 'MuiTableBody' })(TableBody);

var styles$1p = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: {
      display: 'table-cell',
      verticalAlign: 'inherit',
      // Workaround for a rendering bug with spanned columns in Chrome 62.0.
      // Removes the alpha (sets it to 1), and lightens or darkens the theme color.
      borderBottom: "1px solid\n    ".concat(

      theme.palette.type === 'light' ?
      lighten(fade(theme.palette.divider, 1), 0.88) :
      darken(fade(theme.palette.divider, 1), 0.68)),

      textAlign: 'left',
      padding: '4px 56px 4px 24px',
      '&:last-child': {
        paddingRight: 24 } },


    /* Styles applied to the root element if `variant="head"` or `context.table.head`. */
    head: {
      color: theme.palette.text.secondary,
      fontSize: theme.typography.pxToRem(12),
      fontWeight: theme.typography.fontWeightMedium },

    /* Styles applied to the root element if `variant="body"` or `context.table.body`. */
    body: {
      color: theme.palette.text.primary,
      fontSize: theme.typography.pxToRem(13),
      fontWeight: theme.typography.fontWeightRegular },

    /* Styles applied to the root element if `variant="footer"` or `context.table.footer`. */
    footer: {
      borderBottom: 0,
      color: theme.palette.text.secondary,
      fontSize: theme.typography.pxToRem(12) },

    /* Styles applied to the root element if `numeric={true}`. */
    numeric: {
      textAlign: 'right',
      flexDirection: 'row-reverse' // can be dynamically inherited at runtime by contents
    },
    /* Styles applied to the root element if `padding="dense"`. */
    paddingDense: {
      paddingRight: 24 },

    /* Styles applied to the root element if `padding="checkbox"`. */
    paddingCheckbox: {
      padding: '0 12px',
      '&:last-child': {
        paddingRight: 12 } },


    /* Styles applied to the root element if `padding="none"`. */
    paddingNone: {
      padding: 0,
      '&:last-child': {
        padding: 0 } } };};




function TableCell(props) {var

  children =









  props.children,classes = props.classes,classNameProp = props.className,component = props.component,sortDirection = props.sortDirection,numeric = props.numeric,paddingProp = props.padding,scopeProp = props.scope,variant = props.variant,other = objectWithoutProperties(props, ["children", "classes", "className", "component", "sortDirection", "numeric", "padding", "scope", "variant"]);

  return (
    react.createElement(TableContext.Consumer, null,
    function (table) {return (
        react.createElement(Tablelvl2Context.Consumer, null,
        function (tablelvl2) {var _classNames;
          var Component;
          if (component) {
            Component = component;
          } else {
            Component = tablelvl2 && tablelvl2.variant === 'head' ? 'th' : 'td';
          }

          var scope = scopeProp;
          if (!scope && tablelvl2 && tablelvl2.variant === 'head') {
            scope = 'col';
          }
          var padding = paddingProp || (table && table.padding ? table.padding : 'default');

          var className = classnames(
          classes.root, (_classNames = {}, defineProperty(_classNames,

          classes.head, variant ?
          variant === 'head' :
          tablelvl2 && tablelvl2.variant === 'head'), defineProperty(_classNames,
          classes.body, variant ?
          variant === 'body' :
          tablelvl2 && tablelvl2.variant === 'body'), defineProperty(_classNames,
          classes.footer, variant ?
          variant === 'footer' :
          tablelvl2 && tablelvl2.variant === 'footer'), defineProperty(_classNames,
          classes.numeric, numeric), defineProperty(_classNames,
          classes["padding".concat(capitalize(padding))], padding !== 'default'), _classNames),

          classNameProp);


          var ariaSort = null;
          if (sortDirection) {
            ariaSort = sortDirection === 'asc' ? 'ascending' : 'descending';
          }

          return (
            react.createElement(Component, _extends_1({ className: className, "aria-sort": ariaSort, scope: scope }, other),
            children));


        }));}));




}

TableCell.propTypes = {
  /**
                         * The table cell contents.
                         */
  children: propTypes.node,
  /**
                             * Override or extend the styles applied to the component.
                             * See [CSS API](#css-api) below for more details.
                             */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * The component used for the root node.
                                * Either a string to use a DOM element or a component.
                                */
  component: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                         * If `true`, content will align to the right.
                                                                                         *
                                                                                         * Monetary or generally number fields should be right aligned as that allows
                                                                                         * you to add them up quickly in your head without having to worry about decimals.
                                                                                         */
  numeric: propTypes.bool,
  /**
                            * Sets the padding applied to the cell.
                            * By default, the Table parent component set the value.
                            */
  padding: propTypes.oneOf(['default', 'checkbox', 'dense', 'none']),
  /**
                                                                       * Set scope attribute.
                                                                       */
  scope: propTypes.string,
  /**
                            * Set aria-sort direction.
                            */
  sortDirection: propTypes.oneOf(['asc', 'desc', false]),
  /**
                                                           * Specify the cell type.
                                                           * By default, the TableHead, TableBody or TableFooter parent component set the value.
                                                           */
  variant: propTypes.oneOf(['head', 'body', 'footer']) };


TableCell.defaultProps = {
  numeric: false };


var TableCell$1 = withStyles(styles$1p, { name: 'MuiTableCell' })(TableCell);

var styles$1q = {
  /* Styles applied to the root element. */
  root: {
    display: 'table-footer-group' } };



function TableFooter(props) {var
  classes = props.classes,className = props.className,Component = props.component,other = objectWithoutProperties(props, ["classes", "className", "component"]);

  return (
    react.createElement(Tablelvl2Context.Provider, { value: { variant: 'footer' } },
    react.createElement(Component, _extends_1({ className: classnames(classes.root, className) }, other))));


}

TableFooter.propTypes = {
  /**
                           * The content of the component, normally `TableRow`.
                           */
  children: propTypes.node,
  /**
                             * Override or extend the styles applied to the component.
                             * See [CSS API](#css-api) below for more details.
                             */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * The component used for the root node.
                                * Either a string to use a DOM element or a component.
                                */
  component: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]) };


TableFooter.defaultProps = {
  component: 'tfoot' };


withStyles(styles$1q, { name: 'MuiTableFooter' })(TableFooter);

var styles$1r = {
  /* Styles applied to the root element. */
  root: {
    display: 'table-header-group' } };



function TableHead(props) {var
  classes = props.classes,className = props.className,Component = props.component,other = objectWithoutProperties(props, ["classes", "className", "component"]);

  return (
    react.createElement(Tablelvl2Context.Provider, { value: { variant: 'head' } },
    react.createElement(Component, _extends_1({ className: classnames(classes.root, className) }, other))));


}

TableHead.propTypes = {
  /**
                         * The content of the component, normally `TableRow`.
                         */
  children: propTypes.node,
  /**
                             * Override or extend the styles applied to the component.
                             * See [CSS API](#css-api) below for more details.
                             */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * The component used for the root node.
                                * Either a string to use a DOM element or a component.
                                */
  component: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]) };


TableHead.defaultProps = {
  component: 'thead' };


withStyles(styles$1r, { name: 'MuiTableHead' })(TableHead);

var styles$1s = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: {
      position: 'relative',
      display: 'flex',
      alignItems: 'center' },

    /* Styles applied to the root element if `disableGutters={false}`. */
    gutters: theme.mixins.gutters(),
    /* Styles applied to the root element if `variant="regular"`. */
    regular: theme.mixins.toolbar,
    /* Styles applied to the root element if `variant="dense"`. */
    dense: {
      minHeight: 48 } };};



function Toolbar(props) {var
  children = props.children,classes = props.classes,classNameProp = props.className,disableGutters = props.disableGutters,variant = props.variant,other = objectWithoutProperties(props, ["children", "classes", "className", "disableGutters", "variant"]);

  var className = classnames(
  classes.root,
  classes[variant], defineProperty({},

  classes.gutters, !disableGutters),

  classNameProp);


  return (
    react.createElement("div", _extends_1({ className: className }, other),
    children));


}

Toolbar.propTypes = {
  /**
                       * Toolbar children, usually a mixture of `IconButton`, `Button` and `Typography`.
                       */
  children: propTypes.node,
  /**
                             * Override or extend the styles applied to the component.
                             * See [CSS API](#css-api) below for more details.
                             */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * If `true`, disables gutter padding.
                                */
  disableGutters: propTypes.bool,
  /**
                                   * The variant to use.
                                   */
  variant: propTypes.oneOf(['regular', 'dense']) };


Toolbar.defaultProps = {
  disableGutters: false,
  variant: 'regular' };


var Toolbar$1 = withStyles(styles$1s, { name: 'MuiToolbar' })(Toolbar);

/**
                                      * @ignore - internal component.
                                      */
var KeyboardArrowLeft = function KeyboardArrowLeft(props) {return (
    react.createElement(SvgIcon$1, props,
    react.createElement("path", { d: "M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z" })));};


KeyboardArrowLeft = pure(KeyboardArrowLeft);
KeyboardArrowLeft.muiName = 'SvgIcon';

var KeyboardArrowLeft$1 = KeyboardArrowLeft;

/**
                                      * @ignore - internal component.
                                      */
var KeyboardArrowRight = function KeyboardArrowRight(props) {return (
    react.createElement(SvgIcon$1, props,
    react.createElement("path", { d: "M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z" })));};


KeyboardArrowRight = pure(KeyboardArrowRight);
KeyboardArrowRight.muiName = 'SvgIcon';

var KeyboardArrowRight$1 = KeyboardArrowRight;

/**
                                         * @ignore - internal component.
                                         */var
TablePaginationActions = /*#__PURE__*/function (_React$Component) {inherits(TablePaginationActions, _React$Component);function TablePaginationActions() {var _getPrototypeOf2;var _this;classCallCheck(this, TablePaginationActions);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(TablePaginationActions)).call.apply(_getPrototypeOf2, [this].concat(args)));defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleBackButtonClick",
    function (event) {
      _this.props.onChangePage(event, _this.props.page - 1);
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleNextButtonClick",

    function (event) {
      _this.props.onChangePage(event, _this.props.page + 1);
    });return _this;}createClass(TablePaginationActions, [{ key: "render", value: function render()

    {var _this$props =









      this.props,backIconButtonProps = _this$props.backIconButtonProps,count = _this$props.count,nextIconButtonProps = _this$props.nextIconButtonProps,onChangePage = _this$props.onChangePage,page = _this$props.page,rowsPerPage = _this$props.rowsPerPage,theme = _this$props.theme,other = objectWithoutProperties(_this$props, ["backIconButtonProps", "count", "nextIconButtonProps", "onChangePage", "page", "rowsPerPage", "theme"]);

      return (
        react.createElement("div", other,
        react.createElement(IconButton$1, _extends_1({
          onClick: this.handleBackButtonClick,
          disabled: page === 0,
          color: "inherit" },
        backIconButtonProps),

        theme.direction === 'rtl' ? react.createElement(KeyboardArrowRight$1, null) : react.createElement(KeyboardArrowLeft$1, null)),

        react.createElement(IconButton$1, _extends_1({
          onClick: this.handleNextButtonClick,
          disabled: page >= Math.ceil(count / rowsPerPage) - 1,
          color: "inherit" },
        nextIconButtonProps),

        theme.direction === 'rtl' ? react.createElement(KeyboardArrowLeft$1, null) : react.createElement(KeyboardArrowRight$1, null))));



    } }]);return TablePaginationActions;}(react.Component);


TablePaginationActions.propTypes = {
  /**
                                      * Properties applied to the back arrow [`IconButton`](/api/icon-button/) element.
                                      */
  backIconButtonProps: propTypes.object,
  /**
                                          * The total number of rows.
                                          */
  count: propTypes.number.isRequired,
  /**
                                       * Properties applied to the next arrow [`IconButton`](/api/icon-button/) element.
                                       */
  nextIconButtonProps: propTypes.object,
  /**
                                          * Callback fired when the page is changed.
                                          *
                                          * @param {object} event The event source of the callback
                                          * @param {number} page The page selected
                                          */
  onChangePage: propTypes.func.isRequired,
  /**
                                            * The zero-based index of the current page.
                                            */
  page: propTypes.number.isRequired,
  /**
                                      * The number of rows per page.
                                      */
  rowsPerPage: propTypes.number.isRequired,
  /**
                                             * @ignore
                                             */
  theme: propTypes.object.isRequired };


var TablePaginationActions$1 = withTheme()(TablePaginationActions);

var styles$1t = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: {
      color: theme.palette.text.secondary,
      fontSize: theme.typography.pxToRem(12),
      // Increase the specificity to override TableCell.
      '&:last-child': {
        padding: 0 } },


    /* Styles applied to the Toolbar component. */
    toolbar: {
      height: 56,
      minHeight: 56,
      paddingRight: 2 },

    /* Styles applied to the spacer element. */
    spacer: {
      flex: '1 1 100%' },

    /* Styles applied to the caption Typography components if `variant="caption"`. */
    caption: {
      flexShrink: 0 },

    /* Styles applied to the Select component `root` class. */
    selectRoot: {
      marginRight: 32,
      marginLeft: 8 },

    /* Styles applied to the Select component `select` class. */
    select: {
      paddingLeft: 8,
      paddingRight: 16 },

    /* Styles applied to the Select component `icon` class. */
    selectIcon: {
      top: 1 },

    /* Styles applied to the `InputBase` component. */
    input: {
      color: 'inherit',
      fontSize: 'inherit',
      flexShrink: 0 },

    /* Styles applied to the MenuItem component. */
    menuItem: {},
    /* Styles applied to the internal `TablePaginationActions` component. */
    actions: {
      flexShrink: 0,
      marginLeft: 20 } };};



/**
                             * A `TableCell` based component for placing inside `TableFooter` for pagination.
                             */var
TablePagination = /*#__PURE__*/function (_React$Component) {inherits(TablePagination, _React$Component);function TablePagination() {classCallCheck(this, TablePagination);return possibleConstructorReturn(this, getPrototypeOf(TablePagination).apply(this, arguments));}createClass(TablePagination, [{ key: "componentDidUpdate",
    // This logic would be better handled on userside.
    // However, we have it just in case.
    value: function componentDidUpdate() {var _this$props =
      this.props,count = _this$props.count,onChangePage = _this$props.onChangePage,page = _this$props.page,rowsPerPage = _this$props.rowsPerPage;
      var newLastPage = Math.max(0, Math.ceil(count / rowsPerPage) - 1);
      if (page > newLastPage) {
        onChangePage(null, newLastPage);
      }
    } }, { key: "render", value: function render()

    {var _this$props2 =

















      this.props,ActionsComponent = _this$props2.ActionsComponent,backIconButtonProps = _this$props2.backIconButtonProps,classes = _this$props2.classes,colSpanProp = _this$props2.colSpan,Component = _this$props2.component,count = _this$props2.count,labelDisplayedRows = _this$props2.labelDisplayedRows,labelRowsPerPage = _this$props2.labelRowsPerPage,nextIconButtonProps = _this$props2.nextIconButtonProps,onChangePage = _this$props2.onChangePage,onChangeRowsPerPage = _this$props2.onChangeRowsPerPage,page = _this$props2.page,rowsPerPage = _this$props2.rowsPerPage,rowsPerPageOptions = _this$props2.rowsPerPageOptions,SelectProps = _this$props2.SelectProps,other = objectWithoutProperties(_this$props2, ["ActionsComponent", "backIconButtonProps", "classes", "colSpan", "component", "count", "labelDisplayedRows", "labelRowsPerPage", "nextIconButtonProps", "onChangePage", "onChangeRowsPerPage", "page", "rowsPerPage", "rowsPerPageOptions", "SelectProps"]);

      var colSpan;

      if (Component === TableCell$1 || Component === 'td') {
        colSpan = colSpanProp || 1000; // col-span over everything
      }

      return (
        react.createElement(Component, _extends_1({ className: classes.root, colSpan: colSpan }, other),
        react.createElement(Toolbar$1, { className: classes.toolbar },
        react.createElement("div", { className: classes.spacer }),
        rowsPerPageOptions.length > 1 &&
        react.createElement(Typography$1, { color: "inherit", variant: "caption", className: classes.caption },
        labelRowsPerPage),


        rowsPerPageOptions.length > 1 &&
        react.createElement(Select$1, _extends_1({
          classes: {
            root: classes.selectRoot,
            select: classes.select,
            icon: classes.selectIcon },

          input: react.createElement(InputBase$1, { className: classes.input }),
          value: rowsPerPage,
          onChange: onChangeRowsPerPage },
        SelectProps),

        rowsPerPageOptions.map(function (rowsPerPageOption) {return (
            react.createElement(MenuItem$1, {
              className: classes.menuItem,
              key: rowsPerPageOption,
              value: rowsPerPageOption },

            rowsPerPageOption));})),




        react.createElement(Typography$1, { color: "inherit", variant: "caption", className: classes.caption },
        labelDisplayedRows({
          from: count === 0 ? 0 : page * rowsPerPage + 1,
          to: Math.min(count, (page + 1) * rowsPerPage),
          count: count,
          page: page })),


        react.createElement(ActionsComponent, {
          className: classes.actions,
          backIconButtonProps: backIconButtonProps,
          count: count,
          nextIconButtonProps: nextIconButtonProps,
          onChangePage: onChangePage,
          page: page,
          rowsPerPage: rowsPerPage }))));




    } }]);return TablePagination;}(react.Component);


TablePagination.propTypes = {
  /**
                               * The component used for displaying the actions.
                               * Either a string to use a DOM element or a component.
                               */
  ActionsComponent: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                                * Properties applied to the back arrow [`IconButton`](/api/icon-button/) component.
                                                                                                */
  backIconButtonProps: propTypes.object,
  /**
                                          * Override or extend the styles applied to the component.
                                          * See [CSS API](#css-api) below for more details.
                                          */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  colSpan: propTypes.number,
  /**
                              * The component used for the root node.
                              * Either a string to use a DOM element or a component.
                              */
  component: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                         * The total number of rows.
                                                                                         */
  count: propTypes.number.isRequired,
  /**
                                       * Customize the displayed rows label.
                                       */
  labelDisplayedRows: propTypes.func,
  /**
                                       * Customize the rows per page label. Invoked with a `{ from, to, count, page }`
                                       * object.
                                       */
  labelRowsPerPage: propTypes.node,
  /**
                                     * Properties applied to the next arrow [`IconButton`](/api/icon-button/) element.
                                     */
  nextIconButtonProps: propTypes.object,
  /**
                                          * Callback fired when the page is changed.
                                          *
                                          * @param {object} event The event source of the callback
                                          * @param {number} page The page selected
                                          */
  onChangePage: propTypes.func.isRequired,
  /**
                                            * Callback fired when the number of rows per page is changed.
                                            *
                                            * @param {object} event The event source of the callback
                                            */
  onChangeRowsPerPage: propTypes.func,
  /**
                                        * The zero-based index of the current page.
                                        */
  page: propTypes.number.isRequired,
  /**
                                      * The number of rows per page.
                                      */
  rowsPerPage: propTypes.number.isRequired,
  /**
                                             * Customizes the options of the rows per page select field. If less than two options are
                                             * available, no select field will be displayed.
                                             */
  rowsPerPageOptions: propTypes.array,
  /**
                                        * Properties applied to the rows per page [`Select`](/api/select/) element.
                                        */
  SelectProps: propTypes.object };


TablePagination.defaultProps = {
  ActionsComponent: TablePaginationActions$1,
  component: TableCell$1,
  labelDisplayedRows: function labelDisplayedRows(_ref) {var from = _ref.from,to = _ref.to,count = _ref.count;return "".concat(from, "-").concat(to, " of ").concat(count);},
  labelRowsPerPage: 'Rows per page:',
  rowsPerPageOptions: [10, 25, 50, 100] };


withStyles(styles$1t, { name: 'MuiTablePagination' })(TablePagination);

var styles$1u = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: {
      color: 'inherit',
      display: 'table-row',
      height: 48,
      verticalAlign: 'middle',
      // We disable the focus ring for mouse, touch and keyboard users.
      outline: 'none',
      '&$selected': {
        backgroundColor:
        theme.palette.type === 'light' ?
        'rgba(0, 0, 0, 0.04)' // grey[100]
        : 'rgba(255, 255, 255, 0.08)' },

      '&$hover:hover': {
        backgroundColor:
        theme.palette.type === 'light' ?
        'rgba(0, 0, 0, 0.07)' // grey[200]
        : 'rgba(255, 255, 255, 0.14)' } },


    /* Styles applied to the root element if `selected={true}`. */
    selected: {},
    /* Styles applied to the root element if `hover={true}`. */
    hover: {},
    /* Styles applied to the root element if table variant = 'head'. */
    head: {
      height: 56 },

    /* Styles applied to the root element if table variant = 'footer'. */
    footer: {
      height: 56 } };};



/**
                         * Will automatically set dynamic row height
                         * based on the material table element parent (head, body, etc).
                         */
function TableRow(props) {var

  classes =





  props.classes,classNameProp = props.className,Component = props.component,hover = props.hover,selected = props.selected,other = objectWithoutProperties(props, ["classes", "className", "component", "hover", "selected"]);

  return (
    react.createElement(Tablelvl2Context.Consumer, null,
    function (tablelvl2) {var _classNames;
      var className = classnames(
      classes.root, (_classNames = {}, defineProperty(_classNames,

      classes.head, tablelvl2 && tablelvl2.variant === 'head'), defineProperty(_classNames,
      classes.footer, tablelvl2 && tablelvl2.variant === 'footer'), defineProperty(_classNames,
      classes.hover, hover), defineProperty(_classNames,
      classes.selected, selected), _classNames),

      classNameProp);

      return react.createElement(Component, _extends_1({ className: className }, other));
    }));


}

TableRow.propTypes = {
  /**
                        * Should be valid <tr> children such as `TableCell`.
                        */
  children: propTypes.node,
  /**
                             * Override or extend the styles applied to the component.
                             * See [CSS API](#css-api) below for more details.
                             */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * The component used for the root node.
                                * Either a string to use a DOM element or a component.
                                */
  component: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                         * If `true`, the table row will shade on hover.
                                                                                         */
  hover: propTypes.bool,
  /**
                          * If `true`, the table row will have the selected shading.
                          */
  selected: propTypes.bool };


TableRow.defaultProps = {
  component: 'tr',
  hover: false,
  selected: false };


withStyles(styles$1u, { name: 'MuiTableRow' })(TableRow);

/**
                                      * @ignore - internal component.
                                      */
var ArrowDownward = function ArrowDownward(props) {return (
    react.createElement(SvgIcon$1, props,
    react.createElement("path", { d: "M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z" })));};



ArrowDownward = pure(ArrowDownward);
ArrowDownward.muiName = 'SvgIcon';

var ArrowDownwardIcon = ArrowDownward;

var styles$1v = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: {
      cursor: 'pointer',
      display: 'inline-flex',
      justifyContent: 'flex-start',
      flexDirection: 'inherit',
      alignItems: 'center',
      '&:hover': {
        color: theme.palette.text.primary },

      '&:focus': {
        color: theme.palette.text.primary } },


    /* Styles applied to the root element if `active={true}`. */
    active: {
      color: theme.palette.text.primary,
      '& $icon': {
        opacity: 1 } },


    /* Styles applied to the icon component. */
    icon: {
      height: 16,
      marginRight: 4,
      marginLeft: 4,
      opacity: 0,
      transition: theme.transitions.create(['opacity', 'transform'], {
        duration: theme.transitions.duration.shorter }),

      userSelect: 'none',
      width: 16 },

    /* Styles applied to the icon component if `direction="desc"`. */
    iconDirectionDesc: {
      transform: 'rotate(0deg)' },

    /* Styles applied to the icon component if `direction="asc"`. */
    iconDirectionAsc: {
      transform: 'rotate(180deg)' } };};



/**
                                          * A button based label for placing inside `TableCell` for column sorting.
                                          */
function TableSortLabel(props) {var

  active =







  props.active,children = props.children,classes = props.classes,className = props.className,direction = props.direction,hideSortIcon = props.hideSortIcon,IconComponent = props.IconComponent,other = objectWithoutProperties(props, ["active", "children", "classes", "className", "direction", "hideSortIcon", "IconComponent"]);

  return (
    react.createElement(ButtonBase$1, _extends_1({
      className: classnames(classes.root, defineProperty({}, classes.active, active), className),
      component: "span",
      disableRipple: true },
    other),

    children,
    hideSortIcon && !active ? null :
    react.createElement(IconComponent, {
      className: classnames(classes.icon, classes["iconDirection".concat(capitalize(direction))]) })));




}

TableSortLabel.propTypes = {
  /**
                              * If `true`, the label will have the active styling (should be true for the sorted column).
                              */
  active: propTypes.bool,
  /**
                           * Label contents, the arrow will be appended automatically.
                           */
  children: propTypes.node,
  /**
                             * Override or extend the styles applied to the component.
                             * See [CSS API](#css-api) below for more details.
                             */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * The current sort direction.
                                */
  direction: propTypes.oneOf(['asc', 'desc']),
  /**
                                                * Hide sort icon when active is false.
                                                */
  hideSortIcon: propTypes.bool,
  /**
                                 * Sort icon to use.
                                 */
  IconComponent: propTypes.func };


TableSortLabel.defaultProps = {
  active: false,
  direction: 'desc',
  hideSortIcon: false,
  IconComponent: ArrowDownwardIcon };


withStyles(styles$1v, { name: 'MuiTableSortLabel' })(TableSortLabel);

var main = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
// Based on https://github.com/react-bootstrap/dom-helpers/blob/master/src/util/inDOM.js
var inDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
var cachedType;
function _setScrollType(type) {
    cachedType = type;
}
exports._setScrollType = _setScrollType;
// Based on the jquery plugin https://github.com/othree/jquery.rtl-scroll-type
function detectScrollType() {
    if (cachedType) {
        return cachedType;
    }
    if (!inDOM || !window.document.body) {
        return 'indeterminate';
    }
    var dummy = window.document.createElement('div');
    dummy.appendChild(document.createTextNode('ABCD'));
    dummy.dir = 'rtl';
    dummy.style.fontSize = '14px';
    dummy.style.width = '4px';
    dummy.style.height = '1px';
    dummy.style.position = 'absolute';
    dummy.style.top = '-1000px';
    dummy.style.overflow = 'scroll';
    document.body.appendChild(dummy);
    cachedType = 'reverse';
    if (dummy.scrollLeft > 0) {
        cachedType = 'default';
    }
    else {
        dummy.scrollLeft = 1;
        if (dummy.scrollLeft === 0) {
            cachedType = 'negative';
        }
    }
    document.body.removeChild(dummy);
    return cachedType;
}
exports.detectScrollType = detectScrollType;
// Based on https://stackoverflow.com/a/24394376
function getNormalizedScrollLeft(element, direction) {
    var scrollLeft = element.scrollLeft;
    // Perform the calculations only when direction is rtl to avoid messing up the ltr bahavior
    if (direction !== 'rtl') {
        return scrollLeft;
    }
    var type = detectScrollType();
    if (type === 'indeterminate') {
        return Number.NaN;
    }
    switch (type) {
        case 'negative':
            return element.scrollWidth - element.clientWidth + scrollLeft;
        case 'reverse':
            return element.scrollWidth - element.clientWidth - scrollLeft;
    }
    return scrollLeft;
}
exports.getNormalizedScrollLeft = getNormalizedScrollLeft;
function setNormalizedScrollLeft(element, scrollLeft, direction) {
    // Perform the calculations only when direction is rtl to avoid messing up the ltr bahavior
    if (direction !== 'rtl') {
        element.scrollLeft = scrollLeft;
        return;
    }
    var type = detectScrollType();
    if (type === 'indeterminate') {
        return;
    }
    switch (type) {
        case 'negative':
            element.scrollLeft = element.clientWidth - element.scrollWidth + scrollLeft;
            break;
        case 'reverse':
            element.scrollLeft = element.scrollWidth - element.clientWidth - scrollLeft;
            break;
        default:
            element.scrollLeft = scrollLeft;
            break;
    }
}
exports.setNormalizedScrollLeft = setNormalizedScrollLeft;
});

unwrapExports(main);
var main_1 = main._setScrollType;
var main_2 = main.detectScrollType;
var main_3 = main.getNormalizedScrollLeft;
var main_4 = main.setNormalizedScrollLeft;

function easeInOutSin(time) {
  return (1 + Math.sin(Math.PI * time - Math.PI / 2)) / 2;
}

function animate(prop, element, to) {var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};var cb = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : function () {};var _options$ease =



  options.ease,ease = _options$ease === void 0 ? easeInOutSin : _options$ease,_options$duration = options.duration,duration = _options$duration === void 0 ? 300 : _options$duration;

  var start = null;
  var from = element[prop];
  var cancelled = false;

  var cancel = function cancel() {
    cancelled = true;
  };

  var step = function step(timestamp) {
    if (cancelled) {
      cb(new Error('Animation cancelled'));
      return;
    }

    if (start === null) {
      start = timestamp;
    }
    var time = Math.min(1, (timestamp - start) / duration);

    element[prop] = ease(time) * (to - from) + from;

    if (time >= 1) {
      requestAnimationFrame(function () {
        cb(null);
      });
      return;
    }

    requestAnimationFrame(step);
  };

  if (from === to) {
    cb(new Error('Element already at target position'));
    return cancel;
  }

  requestAnimationFrame(step);
  return cancel;
}

var styles$1w = {
  width: 100,
  height: 100,
  position: 'absolute',
  top: -10000,
  overflow: 'scroll',
  msOverflowStyle: 'scrollbar' };


/**
                                   * @ignore - internal component.
                                   * The component is originates from https://github.com/STORIS/react-scrollbar-size.
                                   * It has been moved into the core in order to minimize the bundle size.
                                   */var
ScrollbarSize = /*#__PURE__*/function (_React$Component) {inherits(ScrollbarSize, _React$Component);
  function ScrollbarSize() {var _this;classCallCheck(this, ScrollbarSize);
    _this = possibleConstructorReturn(this, getPrototypeOf(ScrollbarSize).call(this));defineProperty(assertThisInitialized(assertThisInitialized(_this)), "setMeasurements",



























    function () {
      var nodeRef = _this.nodeRef;

      if (!nodeRef) {
        return;
      }

      _this.scrollbarHeight = nodeRef.offsetHeight - nodeRef.clientHeight;
      _this.scrollbarWidth = nodeRef.offsetWidth - nodeRef.clientWidth;
    });if (typeof window !== 'undefined') {_this.handleResize = debounce_1(function () {var onChange = _this.props.onChange;var prevHeight = _this.scrollbarHeight;var prevWidth = _this.scrollbarWidth;_this.setMeasurements();if (prevHeight !== _this.scrollbarHeight || prevWidth !== _this.scrollbarWidth) {onChange({ scrollbarHeight: _this.scrollbarHeight, scrollbarWidth: _this.scrollbarWidth });}}, 166); // Corresponds to 10 frames at 60 Hz.
    }return _this;}createClass(ScrollbarSize, [{ key: "componentDidMount", value: function componentDidMount() {this.setMeasurements();this.props.onLoad({ scrollbarHeight: this.scrollbarHeight, scrollbarWidth: this.scrollbarWidth });} }, { key: "componentWillUnmount", value: function componentWillUnmount() {this.handleResize.clear();} }, { key: "render", value: function render()
    {var _this2 = this;var
      onChange = this.props.onChange;

      return (
        react.createElement("div", null,
        onChange ? react.createElement(EventListener, { target: "window", onResize: this.handleResize }) : null,
        react.createElement("div", {
          style: styles$1w,
          ref: function ref(_ref) {
            _this2.nodeRef = _ref;
          } })));



    } }]);return ScrollbarSize;}(react.Component);


ScrollbarSize.propTypes = {
  onChange: propTypes.func.isRequired,
  onLoad: propTypes.func.isRequired };

var styles$1x = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: {
      position: 'absolute',
      height: 2,
      bottom: 0,
      width: '100%',
      transition: theme.transitions.create(),
      willChange: 'left, width' },

    /* Styles applied to the root element if `color="primary"`. */
    colorPrimary: {
      backgroundColor: theme.palette.primary.main },

    /* Styles applied to the root element if `color="secondary"`. */
    colorSecondary: {
      backgroundColor: theme.palette.secondary.main } };};



/**
                                                            * @ignore - internal component.
                                                            */
function TabIndicator(props) {var
  classes = props.classes,className = props.className,color = props.color,other = objectWithoutProperties(props, ["classes", "className", "color"]);

  return (
    react.createElement("span", _extends_1({
      className: classnames(classes.root, classes["color".concat(capitalize(color))], className) },
    other)));


}

TabIndicator.propTypes = {
  /**
                            * Override or extend the styles applied to the component.
                            * See [CSS API](#css-api) below for more details.
                            */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * @ignore
                                * The color of the tab indicator.
                                */
  color: propTypes.oneOf(['primary', 'secondary']) };


var TabIndicator$1 = withStyles(styles$1x, { name: 'MuiPrivateTabIndicator' })(TabIndicator);

var styles$1y = {
  /* Styles applied to the root element. */
  root: {
    color: 'inherit',
    flex: '0 0 56px' } };



/**
                           * @ignore - internal component.
                           */
function TabScrollButton(props) {var
  classes = props.classes,classNameProp = props.className,direction = props.direction,onClick = props.onClick,visible = props.visible,other = objectWithoutProperties(props, ["classes", "className", "direction", "onClick", "visible"]);

  var className = classnames(classes.root, classNameProp);

  if (!visible) {
    return react.createElement("div", { className: className });
  }

  return (
    react.createElement(ButtonBase$1, _extends_1({ className: className, onClick: onClick, tabIndex: -1 }, other),
    direction === 'left' ? react.createElement(KeyboardArrowLeft$1, null) : react.createElement(KeyboardArrowRight$1, null)));


}

TabScrollButton.propTypes = {
  /**
                               * Override or extend the styles applied to the component.
                               * See [CSS API](#css-api) below for more details.
                               */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * Which direction should the button indicate?
                                */
  direction: propTypes.oneOf(['left', 'right']),
  /**
                                                  * Callback to execute for button press.
                                                  */
  onClick: propTypes.func,
  /**
                            * Should the button be present or just consume space.
                            */
  visible: propTypes.bool };


TabScrollButton.defaultProps = {
  visible: true };


var TabScrollButton$1 = withStyles(styles$1y, { name: 'MuiPrivateTabScrollButton' })(TabScrollButton);

var styles$1z = function styles(theme) {return {
    /* Styles applied to the root element. */
    root: {
      overflow: 'hidden',
      minHeight: 48,
      WebkitOverflowScrolling: 'touch' // Add iOS momentum scrolling.
    },
    /* Styles applied to the flex container element. */
    flexContainer: {
      display: 'flex' },

    /* Styles applied to the flex container element if `centered={true}` & `scrollable={false}`. */
    centered: {
      justifyContent: 'center' },

    /* Styles applied to the tablist element. */
    scroller: {
      position: 'relative',
      display: 'inline-block',
      flex: '1 1 auto',
      whiteSpace: 'nowrap' },

    /* Styles applied to the tablist element if `scrollable={false}`. */
    fixed: {
      overflowX: 'hidden',
      width: '100%' },

    /* Styles applied to the tablist element if `scrollable={true}`. */
    scrollable: {
      overflowX: 'scroll' },

    /* Styles applied to the `ScrollButtonComponent` component. */
    scrollButtons: {},
    /* Styles applied to the `ScrollButtonComponent` component if `scrollButtons="auto"`. */
    scrollButtonsAuto: defineProperty({},
    theme.breakpoints.down('xs'), {
      display: 'none' }),


    /* Styles applied to the `TabIndicator` component. */
    indicator: {} };};var


Tabs = /*#__PURE__*/function (_React$Component) {inherits(Tabs, _React$Component);
  function Tabs() {var _this;classCallCheck(this, Tabs);
    _this = possibleConstructorReturn(this, getPrototypeOf(Tabs).call(this));defineProperty(assertThisInitialized(assertThisInitialized(_this)), "state",













    {
      indicatorStyle: {},
      scrollerStyle: {
        marginBottom: 0 },

      showLeftScroll: false,
      showRightScroll: false,
      mounted: false });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "getConditionalElements",































    function () {var _this$props =
      _this.props,classes = _this$props.classes,scrollable = _this$props.scrollable,ScrollButtonComponent = _this$props.ScrollButtonComponent,scrollButtons = _this$props.scrollButtons,theme = _this$props.theme;
      var conditionalElements = {};
      conditionalElements.scrollbarSizeListener = scrollable ?
      react.createElement(ScrollbarSize, {
        onLoad: _this.handleScrollbarSizeChange,
        onChange: _this.handleScrollbarSizeChange }) :

      null;

      var showScrollButtons = scrollable && (scrollButtons === 'auto' || scrollButtons === 'on');

      conditionalElements.scrollButtonLeft = showScrollButtons ?
      react.createElement(ScrollButtonComponent, {
        direction: theme && theme.direction === 'rtl' ? 'right' : 'left',
        onClick: _this.handleLeftScrollClick,
        visible: _this.state.showLeftScroll,
        className: classnames(classes.scrollButtons, defineProperty({},
        classes.scrollButtonsAuto, scrollButtons === 'auto')) }) :


      null;

      conditionalElements.scrollButtonRight = showScrollButtons ?
      react.createElement(ScrollButtonComponent, {
        direction: theme && theme.direction === 'rtl' ? 'left' : 'right',
        onClick: _this.handleRightScrollClick,
        visible: _this.state.showRightScroll,
        className: classnames(classes.scrollButtons, defineProperty({},
        classes.scrollButtonsAuto, scrollButtons === 'auto')) }) :


      null;

      return conditionalElements;
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "getTabsMeta",

    function (value, direction) {
      var tabsMeta;
      if (_this.tabsRef) {
        var rect = _this.tabsRef.getBoundingClientRect();
        // create a new object with ClientRect class props + scrollLeft
        tabsMeta = {
          clientWidth: _this.tabsRef.clientWidth,
          scrollLeft: _this.tabsRef.scrollLeft,
          scrollLeftNormalized: main_3(_this.tabsRef, direction),
          scrollWidth: _this.tabsRef.scrollWidth,
          left: rect.left,
          right: rect.right };

      }

      var tabMeta;
      if (_this.tabsRef && value !== false) {
        var children = _this.tabsRef.children[0].children;

        if (children.length > 0) {
          var tab = children[_this.valueToIndex.get(value)];
          warning_1(
          tab,
          ["Material-UI: the value provided `".concat(
          value, "` to the Tabs component is invalid."),
          'Non of the Tabs children have this value.',
          _this.valueToIndex.keys ? "You can provide one of the following values: ".concat(
          Array.from(
          _this.valueToIndex.keys()).
          join(', '), ".") :
          null].
          join('\n'));

          tabMeta = tab ? tab.getBoundingClientRect() : null;
        }
      }
      return { tabsMeta: tabsMeta, tabMeta: tabMeta };
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleLeftScrollClick",

    function () {
      _this.moveTabsScroll(-_this.tabsRef.clientWidth);
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleRightScrollClick",

    function () {
      _this.moveTabsScroll(_this.tabsRef.clientWidth);
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleScrollbarSizeChange",

    function (_ref) {var scrollbarHeight = _ref.scrollbarHeight;
      _this.setState({
        scrollerStyle: {
          marginBottom: -scrollbarHeight } });


    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "moveTabsScroll",

    function (delta) {var
      theme = _this.props.theme;

      var multiplier = theme.direction === 'rtl' ? -1 : 1;
      var nextScrollLeft = _this.tabsRef.scrollLeft + delta * multiplier;
      // Fix for Edge
      var invert = theme.direction === 'rtl' && main_2() === 'reverse' ? -1 : 1;
      _this.scroll(invert * nextScrollLeft);
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "scrollSelectedIntoView",

    function () {var _this$props2 =
      _this.props,theme = _this$props2.theme,value = _this$props2.value;var _this$getTabsMeta =
      _this.getTabsMeta(value, theme.direction),tabsMeta = _this$getTabsMeta.tabsMeta,tabMeta = _this$getTabsMeta.tabMeta;

      if (!tabMeta || !tabsMeta) {
        return;
      }

      if (tabMeta.left < tabsMeta.left) {
        // left side of button is out of view
        var nextScrollLeft = tabsMeta.scrollLeft + (tabMeta.left - tabsMeta.left);
        _this.scroll(nextScrollLeft);
      } else if (tabMeta.right > tabsMeta.right) {
        // right side of button is out of view
        var _nextScrollLeft = tabsMeta.scrollLeft + (tabMeta.right - tabsMeta.right);
        _this.scroll(_nextScrollLeft);
      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "scroll",

    function (value) {
      animate('scrollLeft', _this.tabsRef, value);
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "updateScrollButtonState",

    function () {var _this$props3 =
      _this.props,scrollable = _this$props3.scrollable,scrollButtons = _this$props3.scrollButtons,theme = _this$props3.theme;

      if (scrollable && scrollButtons !== 'off') {var _this$tabsRef =
        _this.tabsRef,scrollWidth = _this$tabsRef.scrollWidth,clientWidth = _this$tabsRef.clientWidth;
        var scrollLeft = main_3(_this.tabsRef, theme.direction);

        var showLeftScroll =
        theme.direction === 'rtl' ? scrollWidth > clientWidth + scrollLeft : scrollLeft > 0;

        var showRightScroll =
        theme.direction === 'rtl' ? scrollLeft > 0 : scrollWidth > clientWidth + scrollLeft;

        if (
        showLeftScroll !== _this.state.showLeftScroll ||
        showRightScroll !== _this.state.showRightScroll)
        {
          _this.setState({ showLeftScroll: showLeftScroll, showRightScroll: showRightScroll });
        }
      }
    });if (typeof window !== 'undefined') {_this.handleResize = debounce_1(function () {_this.updateIndicatorState(_this.props);_this.updateScrollButtonState();}, 166); // Corresponds to 10 frames at 60 Hz.
      _this.handleTabsScroll = debounce_1(function () {_this.updateScrollButtonState();}, 166); // Corresponds to 10 frames at 60 Hz.
    }return _this;}createClass(Tabs, [{ key: "componentDidMount", value: function componentDidMount() {// eslint-disable-next-line react/no-did-mount-set-state
      this.setState({ mounted: true });this.updateIndicatorState(this.props);this.updateScrollButtonState();if (this.props.action) {this.props.action({ updateIndicator: this.handleResize });}} }, { key: "componentDidUpdate", value: function componentDidUpdate(prevProps, prevState) {// The index might have changed at the same time.
      // We need to check again the right indicator position.
      this.updateIndicatorState(this.props);this.updateScrollButtonState();if (this.state.indicatorStyle !== prevState.indicatorStyle) {this.scrollSelectedIntoView();}} }, { key: "componentWillUnmount", value: function componentWillUnmount() {this.handleResize.clear();this.handleTabsScroll.clear();} }, { key: "updateIndicatorState", value: function updateIndicatorState(props) {var theme = props.theme,value = props.value;var _this$getTabsMeta2 = this.getTabsMeta(value, theme.direction),tabsMeta = _this$getTabsMeta2.tabsMeta,tabMeta = _this$getTabsMeta2.tabMeta;
      var left = 0;

      if (tabMeta && tabsMeta) {
        var correction =
        theme.direction === 'rtl' ?
        tabsMeta.scrollLeftNormalized + tabsMeta.clientWidth - tabsMeta.scrollWidth :
        tabsMeta.scrollLeft;
        left = Math.round(tabMeta.left - tabsMeta.left + correction);
      }

      var indicatorStyle = {
        left: left,
        // May be wrong until the font is loaded.
        width: tabMeta ? Math.round(tabMeta.width) : 0 };


      if (
      (indicatorStyle.left !== this.state.indicatorStyle.left ||
      indicatorStyle.width !== this.state.indicatorStyle.width) &&
      !isNaN(indicatorStyle.left) &&
      !isNaN(indicatorStyle.width))
      {
        this.setState({ indicatorStyle: indicatorStyle });
      }
    } }, { key: "render", value: function render()

    {var _classNames4,_this2 = this;var _this$props4 =


















      this.props,action = _this$props4.action,centered = _this$props4.centered,childrenProp = _this$props4.children,classes = _this$props4.classes,classNameProp = _this$props4.className,Component = _this$props4.component,fullWidth = _this$props4.fullWidth,indicatorColor = _this$props4.indicatorColor,onChange = _this$props4.onChange,scrollable = _this$props4.scrollable,ScrollButtonComponent = _this$props4.ScrollButtonComponent,scrollButtons = _this$props4.scrollButtons,_this$props4$TabIndic = _this$props4.TabIndicatorProps,TabIndicatorProps = _this$props4$TabIndic === void 0 ? {} : _this$props4$TabIndic,textColor = _this$props4.textColor,theme = _this$props4.theme,value = _this$props4.value,other = objectWithoutProperties(_this$props4, ["action", "centered", "children", "classes", "className", "component", "fullWidth", "indicatorColor", "onChange", "scrollable", "ScrollButtonComponent", "scrollButtons", "TabIndicatorProps", "textColor", "theme", "value"]);

      warning_1(
      !centered || !scrollable,
      'Material-UI: you can not use the `centered={true}` and `scrollable={true}` properties ' +
      'at the same time on a `Tabs` component.');


      var className = classnames(classes.root, classNameProp);
      var flexContainerClassName = classnames(classes.flexContainer, defineProperty({},
      classes.centered, centered && !scrollable));

      var scrollerClassName = classnames(classes.scroller, (_classNames4 = {}, defineProperty(_classNames4,
      classes.fixed, !scrollable), defineProperty(_classNames4,
      classes.scrollable, scrollable), _classNames4));


      var indicator =
      react.createElement(TabIndicator$1, _extends_1({
        className: classes.indicator,
        color: indicatorColor },
      TabIndicatorProps, {
        style: objectSpread({},
        this.state.indicatorStyle,
        TabIndicatorProps.style) }));




      this.valueToIndex = new Map();
      var childIndex = 0;
      var children = react.Children.map(childrenProp, function (child) {
        if (!react.isValidElement(child)) {
          return null;
        }

        warning_1(
        child.type !== react.Fragment,
        [
        "Material-UI: the Tabs component doesn't accept a Fragment as a child.",
        'Consider providing an array instead.'].
        join('\n'));


        var childValue = child.props.value === undefined ? childIndex : child.props.value;
        _this2.valueToIndex.set(childValue, childIndex);
        var selected = childValue === value;

        childIndex += 1;
        return react.cloneElement(child, {
          fullWidth: fullWidth,
          indicator: selected && !_this2.state.mounted && indicator,
          selected: selected,
          onChange: onChange,
          textColor: textColor,
          value: childValue });

      });

      var conditionalElements = this.getConditionalElements();

      return (
        react.createElement(Component, _extends_1({ className: className }, other),
        react.createElement(EventListener, { target: "window", onResize: this.handleResize }),
        conditionalElements.scrollbarSizeListener,
        react.createElement("div", { className: classes.flexContainer },
        conditionalElements.scrollButtonLeft,
        react.createElement("div", {
          className: scrollerClassName,
          style: this.state.scrollerStyle,
          ref: function ref(_ref2) {
            _this2.tabsRef = _ref2;
          },
          role: "tablist",
          onScroll: this.handleTabsScroll },

        react.createElement("div", { className: flexContainerClassName }, children),
        this.state.mounted && indicator),

        conditionalElements.scrollButtonRight)));



    } }]);return Tabs;}(react.Component);


Tabs.propTypes = {
  /**
                    * Callback fired when the component mounts.
                    * This is useful when you want to trigger an action programmatically.
                    * It currently only supports `updateIndicator()` action.
                    *
                    * @param {object} actions This object contains all possible actions
                    * that can be triggered programmatically.
                    */
  action: propTypes.func,
  /**
                           * If `true`, the tabs will be centered.
                           * This property is intended for large views.
                           */
  centered: propTypes.bool,
  /**
                             * The content of the component.
                             */
  children: propTypes.node,
  /**
                             * Override or extend the styles applied to the component.
                             * See [CSS API](#css-api) below for more details.
                             */
  classes: propTypes.object.isRequired,
  /**
                                         * @ignore
                                         */
  className: propTypes.string,
  /**
                                * The component used for the root node.
                                * Either a string to use a DOM element or a component.
                                */
  component: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                         * If `true`, the tabs will grow to use all the available space.
                                                                                         * This property is intended for small views, like on mobile.
                                                                                         */
  fullWidth: propTypes.bool,
  /**
                              * Determines the color of the indicator.
                              */
  indicatorColor: propTypes.oneOf(['secondary', 'primary']),
  /**
                                                              * Callback fired when the value changes.
                                                              *
                                                              * @param {object} event The event source of the callback
                                                              * @param {number} value We default to the index of the child
                                                              */
  onChange: propTypes.func,
  /**
                             * True invokes scrolling properties and allow for horizontally scrolling
                             * (or swiping) the tab bar.
                             */
  scrollable: propTypes.bool,
  /**
                               * The component used to render the scroll buttons.
                               */
  ScrollButtonComponent: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                                     * Determine behavior of scroll buttons when tabs are set to scroll
                                                                                                     * `auto` will only present them on medium and larger viewports
                                                                                                     * `on` will always present them
                                                                                                     * `off` will never present them
                                                                                                     */
  scrollButtons: propTypes.oneOf(['auto', 'on', 'off']),
  /**
                                                          * Properties applied to the `TabIndicator` element.
                                                          */
  TabIndicatorProps: propTypes.object,
  /**
                                        * Determines the color of the `Tab`.
                                        */
  textColor: propTypes.oneOf(['secondary', 'primary', 'inherit']),
  /**
                                                                    * @ignore
                                                                    */
  theme: propTypes.object.isRequired,
  /**
                                       * The value of the currently selected `Tab`.
                                       * If you don't want any selected `Tab`, you can set this property to `false`.
                                       */
  value: propTypes.any };


Tabs.defaultProps = {
  centered: false,
  component: 'div',
  fullWidth: false,
  indicatorColor: 'secondary',
  scrollable: false,
  ScrollButtonComponent: TabScrollButton$1,
  scrollButtons: 'auto',
  textColor: 'inherit' };


withStyles(styles$1z, { name: 'MuiTabs', withTheme: true })(Tabs);

var variantComponent = {
  standard: Input$1,
  filled: FilledInput$1,
  outlined: OutlinedInput$1 };


/**
                              * The `TextField` is a convenience wrapper for the most common cases (80%).
                              * It cannot be all things to all people, otherwise the API would grow out of control.
                              *
                              * ## Advanced Configuration
                              *
                              * It's important to understand that the text field is a simple abstraction
                              * on top of the following components:
                              * - [FormControl](/api/form-control/)
                              * - [InputLabel](/api/input-label/)
                              * - [Input](/api/input/)
                              * - [FormHelperText](/api/form-helper-text/)
                              *
                              * If you wish to alter the properties applied to the native input, you can do so as follows:
                              *
                              * ```jsx
                              * const inputProps = {
                              *   step: 300,
                              * };
                              *
                              * return <TextField id="time" type="time" inputProps={inputProps} />;
                              * ```
                              *
                              * For advanced cases, please look at the source of TextField by clicking on the
                              * "Edit this page" button above. Consider either:
                              * - using the upper case props for passing values directly to the components
                              * - using the underlying components directly as shown in the demos
                              */var
TextField = /*#__PURE__*/function (_React$Component) {inherits(TextField, _React$Component);
  function TextField(props) {var _this;classCallCheck(this, TextField);
    _this = possibleConstructorReturn(this, getPrototypeOf(TextField).call(this, props));
    _this.labelRef = react.createRef();return _this;
  }createClass(TextField, [{ key: "componentDidMount", value: function componentDidMount()

    {
      if (this.props.variant === 'outlined') {
        this.labelNode = reactDom.findDOMNode(this.labelRef.current);
        this.forceUpdate();
      }
    } }, { key: "render", value: function render()

    {var _this$props =































      this.props,autoComplete = _this$props.autoComplete,autoFocus = _this$props.autoFocus,children = _this$props.children,className = _this$props.className,defaultValue = _this$props.defaultValue,error = _this$props.error,FormHelperTextProps = _this$props.FormHelperTextProps,fullWidth = _this$props.fullWidth,helperText = _this$props.helperText,id = _this$props.id,InputLabelProps = _this$props.InputLabelProps,inputProps = _this$props.inputProps,InputProps = _this$props.InputProps,inputRef = _this$props.inputRef,label = _this$props.label,multiline = _this$props.multiline,name = _this$props.name,onBlur = _this$props.onBlur,onChange = _this$props.onChange,onFocus = _this$props.onFocus,placeholder = _this$props.placeholder,required = _this$props.required,rows = _this$props.rows,rowsMax = _this$props.rowsMax,select = _this$props.select,SelectProps = _this$props.SelectProps,type = _this$props.type,value = _this$props.value,variant = _this$props.variant,other = objectWithoutProperties(_this$props, ["autoComplete", "autoFocus", "children", "className", "defaultValue", "error", "FormHelperTextProps", "fullWidth", "helperText", "id", "InputLabelProps", "inputProps", "InputProps", "inputRef", "label", "multiline", "name", "onBlur", "onChange", "onFocus", "placeholder", "required", "rows", "rowsMax", "select", "SelectProps", "type", "value", "variant"]);

      warning_1(
      !select || Boolean(children),
      'Material-UI: `children` must be passed when using the `TextField` component with `select`.');


      var InputMore = {};

      if (variant === 'outlined') {
        if (InputLabelProps && typeof InputLabelProps.shrink !== 'undefined') {
          InputMore.notched = InputLabelProps.shrink;
        }

        InputMore.labelWidth = this.labelNode && this.labelNode.offsetWidth || 0;
      }

      var helperTextId = helperText && id ? "".concat(id, "-helper-text") : undefined;
      var InputComponent = variantComponent[variant];
      var InputElement =
      react.createElement(InputComponent, _extends_1({
        autoComplete: autoComplete,
        autoFocus: autoFocus,
        defaultValue: defaultValue,
        fullWidth: fullWidth,
        multiline: multiline,
        name: name,
        rows: rows,
        rowsMax: rowsMax,
        type: type,
        value: value,
        id: id,
        inputRef: inputRef,
        onBlur: onBlur,
        onChange: onChange,
        onFocus: onFocus,
        placeholder: placeholder,
        inputProps: inputProps },
      InputMore,
      InputProps));



      return (
        react.createElement(FormControl$1, _extends_1({
          "aria-describedby": helperTextId,
          className: className,
          error: error,
          fullWidth: fullWidth,
          required: required,
          variant: variant },
        other),

        label &&
        react.createElement(InputLabel$1, _extends_1({ htmlFor: id, ref: this.labelRef }, InputLabelProps),
        label),


        select ?
        react.createElement(Select$1, _extends_1({ value: value, input: InputElement }, SelectProps),
        children) :


        InputElement,

        helperText &&
        react.createElement(FormHelperText$1, _extends_1({ id: helperTextId }, FormHelperTextProps),
        helperText)));




    } }]);return TextField;}(react.Component);


TextField.propTypes = {
  /**
                         * This property helps users to fill forms faster, especially on mobile devices.
                         * The name can be confusing, as it's more like an autofill.
                         * You can learn more about it here:
                         * https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill
                         */
  autoComplete: propTypes.string,
  /**
                                   * If `true`, the input will be focused during the first mount.
                                   */
  autoFocus: propTypes.bool,
  /**
                              * @ignore
                              */
  children: propTypes.node,
  /**
                             * @ignore
                             */
  className: propTypes.string,
  /**
                                * The default value of the `Input` element.
                                */
  defaultValue: propTypes.oneOfType([propTypes.string, propTypes.number]),
  /**
                                                                            * If `true`, the input will be disabled.
                                                                            */
  disabled: propTypes.bool,
  /**
                             * If `true`, the label will be displayed in an error state.
                             */
  error: propTypes.bool,
  /**
                          * Properties applied to the [`FormHelperText`](/api/form-helper-text/) element.
                          */
  FormHelperTextProps: propTypes.object,
  /**
                                          * If `true`, the input will take up the full width of its container.
                                          */
  fullWidth: propTypes.bool,
  /**
                              * The helper text content.
                              */
  helperText: propTypes.node,
  /**
                               * The id of the `input` element.
                               * Use that property to make `label` and `helperText` accessible for screen readers.
                               */
  id: propTypes.string,
  /**
                         * Properties applied to the [`InputLabel`](/api/input-label/) element.
                         */
  InputLabelProps: propTypes.object,
  /**
                                      * Properties applied to the `Input` element.
                                      */
  InputProps: propTypes.object,
  /**
                                 * Attributes applied to the native `input` element.
                                 */
  inputProps: propTypes.object,
  /**
                                 * Use that property to pass a ref callback to the native input component.
                                 */
  inputRef: propTypes.oneOfType([propTypes.func, propTypes.object]),
  /**
                                                                      * The label content.
                                                                      */
  label: propTypes.node,
  /**
                          * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
                          */
  margin: propTypes.oneOf(['none', 'dense', 'normal']),
  /**
                                                         * If `true`, a textarea element will be rendered instead of an input.
                                                         */
  multiline: propTypes.bool,
  /**
                              * Name attribute of the `input` element.
                              */
  name: propTypes.string,
  /**
                           * @ignore
                           */
  onBlur: propTypes.func,
  /**
                           * Callback fired when the value is changed.
                           *
                           * @param {object} event The event source of the callback.
                           * You can pull out the new value by accessing `event.target.value`.
                           */
  onChange: propTypes.func,
  /**
                             * @ignore
                             */
  onFocus: propTypes.func,
  /**
                            * The short hint displayed in the input before the user enters a value.
                            */
  placeholder: propTypes.string,
  /**
                                  * If `true`, the label is displayed as required and the input will be required.
                                  */
  required: propTypes.bool,
  /**
                             * Number of rows to display when multiline option is set to true.
                             */
  rows: propTypes.oneOfType([propTypes.string, propTypes.number]),
  /**
                                                                    * Maximum number of rows to display when multiline option is set to true.
                                                                    */
  rowsMax: propTypes.oneOfType([propTypes.string, propTypes.number]),
  /**
                                                                       * Render a `Select` element while passing the `Input` element to `Select` as `input` parameter.
                                                                       * If this option is set you must pass the options of the select as children.
                                                                       */
  select: propTypes.bool,
  /**
                           * Properties applied to the [`Select`](/api/select/) element.
                           */
  SelectProps: propTypes.object,
  /**
                                  * Type attribute of the `Input` element. It should be a valid HTML5 input type.
                                  */
  type: propTypes.string,
  /**
                           * The value of the `Input` element, required for a controlled component.
                           */
  value: propTypes.oneOfType([
  propTypes.string,
  propTypes.number,
  propTypes.bool,
  propTypes.arrayOf(propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.bool]))]),

  /**
                                                                                                   * The variant to use.
                                                                                                   */
  variant: propTypes.oneOf(['standard', 'outlined', 'filled']) };


TextField.defaultProps = {
  required: false,
  select: false,
  variant: 'standard' };

var styles$1A = function styles(theme) {return {
    /* Styles applied to the Popper component. */
    popper: {
      zIndex: theme.zIndex.tooltip,
      opacity: 0.9 },

    /* Styles applied to the tooltip (label wrapper) element. */
    tooltip: {
      backgroundColor: theme.palette.grey[700],
      borderRadius: theme.shape.borderRadius,
      color: theme.palette.common.white,
      fontFamily: theme.typography.fontFamily,
      padding: '4px 8px',
      fontSize: theme.typography.pxToRem(10),
      lineHeight: "".concat(theme.typography.round(14 / 10), "em"),
      maxWidth: 300 },

    /* Styles applied to the tooltip (label wrapper) element if the tooltip is opened by touch. */
    touch: {
      padding: '8px 16px',
      fontSize: theme.typography.pxToRem(14),
      lineHeight: "".concat(theme.typography.round(16 / 14), "em") },

    /* Styles applied to the tooltip (label wrapper) element if `placement` contains "left". */
    tooltipPlacementLeft: defineProperty({
      transformOrigin: 'right center',
      margin: '0 24px ' },
    theme.breakpoints.up('sm'), {
      margin: '0 14px' }),


    /* Styles applied to the tooltip (label wrapper) element if `placement` contains "right". */
    tooltipPlacementRight: defineProperty({
      transformOrigin: 'left center',
      margin: '0 24px' },
    theme.breakpoints.up('sm'), {
      margin: '0 14px' }),


    /* Styles applied to the tooltip (label wrapper) element if `placement` contains "top". */
    tooltipPlacementTop: defineProperty({
      transformOrigin: 'center bottom',
      margin: '24px 0' },
    theme.breakpoints.up('sm'), {
      margin: '14px 0' }),


    /* Styles applied to the tooltip (label wrapper) element if `placement` contains "bottom". */
    tooltipPlacementBottom: defineProperty({
      transformOrigin: 'center top',
      margin: '24px 0' },
    theme.breakpoints.up('sm'), {
      margin: '14px 0' }) };};var




Tooltip = /*#__PURE__*/function (_React$Component) {inherits(Tooltip, _React$Component);


  function Tooltip(props) {var _this;classCallCheck(this, Tooltip);
    _this = possibleConstructorReturn(this, getPrototypeOf(Tooltip).call(this));defineProperty(assertThisInitialized(assertThisInitialized(_this)), "ignoreNonTouchEvents", false);defineProperty(assertThisInitialized(assertThisInitialized(_this)), "onRootRef",










































    function (ref) {
      _this.childrenRef = ref;
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleFocus",

    function (event) {
      event.persist();
      // The autoFocus of React might trigger the event before the componentDidMount.
      // We need to account for this eventuality.
      _this.focusTimer = setTimeout(function () {
        // We need to make sure the focus hasn't moved since the event was triggered.
        if (_this.childrenRef === document.activeElement) {
          _this.handleEnter(event);
        }
      }, 0);

      var childrenProps = _this.props.children.props;
      if (childrenProps.onFocus) {
        childrenProps.onFocus(event);
      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleEnter",

    function (event) {var _this$props =
      _this.props,children = _this$props.children,enterDelay = _this$props.enterDelay;
      var childrenProps = children.props;

      if (event.type === 'mouseover' && childrenProps.onMouseOver) {
        childrenProps.onMouseOver(event);
      }

      if (_this.ignoreNonTouchEvents && event.type !== 'touchstart') {
        return;
      }

      // Remove the title ahead of time.
      // We don't want to wait for the next render commit.
      // We would risk displaying two tooltips at the same time (native + this one).
      _this.childrenRef.setAttribute('title', '');

      clearTimeout(_this.enterTimer);
      clearTimeout(_this.leaveTimer);
      if (enterDelay) {
        event.persist();
        _this.enterTimer = setTimeout(function () {
          _this.handleOpen(event);
        }, enterDelay);
      } else {
        _this.handleOpen(event);
      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleOpen",

    function (event) {
      // The mouseover event will trigger for every nested element in the tooltip.
      // We can skip rerendering when the tooltip is already open.
      // We are using the mouseover event instead of the mouseenter event to fix a hide/show issue.
      if (!_this.isControlled && !_this.state.open) {
        _this.setState({ open: true });
      }

      if (_this.props.onOpen) {
        _this.props.onOpen(event);
      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleLeave",

    function (event) {var _this$props2 =
      _this.props,children = _this$props2.children,leaveDelay = _this$props2.leaveDelay;
      var childrenProps = children.props;

      if (event.type === 'blur' && childrenProps.onBlur) {
        childrenProps.onBlur(event);
      }

      if (event.type === 'mouseleave' && childrenProps.onMouseLeave) {
        childrenProps.onMouseLeave(event);
      }

      clearTimeout(_this.enterTimer);
      clearTimeout(_this.leaveTimer);
      if (leaveDelay) {
        event.persist();
        _this.leaveTimer = setTimeout(function () {
          _this.handleClose(event);
        }, leaveDelay);
      } else {
        _this.handleClose(event);
      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleClose",

    function (event) {
      if (!_this.isControlled) {
        _this.setState({ open: false });
      }

      if (_this.props.onClose) {
        _this.props.onClose(event);
      }

      clearTimeout(_this.closeTimer);
      _this.closeTimer = setTimeout(function () {
        _this.ignoreNonTouchEvents = false;
      }, _this.props.theme.transitions.duration.shortest);
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleTouchStart",

    function (event) {
      _this.ignoreNonTouchEvents = true;var _this$props3 =
      _this.props,children = _this$props3.children,enterTouchDelay = _this$props3.enterTouchDelay;

      if (children.props.onTouchStart) {
        children.props.onTouchStart(event);
      }

      clearTimeout(_this.leaveTimer);
      clearTimeout(_this.closeTimer);
      clearTimeout(_this.touchTimer);
      event.persist();
      _this.touchTimer = setTimeout(function () {
        _this.handleEnter(event);
      }, enterTouchDelay);
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleTouchEnd",

    function (event) {var _this$props4 =
      _this.props,children = _this$props4.children,leaveTouchDelay = _this$props4.leaveTouchDelay;

      if (children.props.onTouchEnd) {
        children.props.onTouchEnd(event);
      }

      clearTimeout(_this.touchTimer);
      clearTimeout(_this.leaveTimer);
      event.persist();
      _this.leaveTimer = setTimeout(function () {
        _this.handleClose(event);
      }, leaveTouchDelay);
    });_this.isControlled = props.open != null;_this.state = { open: null };if (!_this.isControlled) {// not controlled, use internal state
      _this.state.open = false;}return _this;}createClass(Tooltip, [{ key: "componentDidMount", value: function componentDidMount() {warning_1(!this.childrenRef.disabled || !this.childrenRef.tagName.toLowerCase() === 'button', ['Material-UI: you are providing a disabled `button` child to the Tooltip component.', 'A disabled element does not fire events.', "Tooltip needs to listen to the child element's events to display the title.", '', 'Place a `div` container on top of the element.'].join('\n')); // Fallback to this default id when possible.
      // Use the random value for client side rendering only.
      // We can't use it server side.
      this.defaultId = "mui-tooltip-".concat(Math.round(Math.random() * 1e5)); // Rerender with this.defaultId and this.childrenRef.
      if (this.props.open) {this.forceUpdate();}} }, { key: "componentWillUnmount", value: function componentWillUnmount() {clearTimeout(this.closeTimer);clearTimeout(this.enterTimer);clearTimeout(this.focusTimer);clearTimeout(this.leaveTimer);clearTimeout(this.touchTimer);} }, { key: "render", value: function render() {var _this2 = this;var _this$props5 =



















      this.props,children = _this$props5.children,classes = _this$props5.classes,disableFocusListener = _this$props5.disableFocusListener,disableHoverListener = _this$props5.disableHoverListener,disableTouchListener = _this$props5.disableTouchListener,enterDelay = _this$props5.enterDelay,enterTouchDelay = _this$props5.enterTouchDelay,id = _this$props5.id,interactive = _this$props5.interactive,leaveDelay = _this$props5.leaveDelay,leaveTouchDelay = _this$props5.leaveTouchDelay,onClose = _this$props5.onClose,onOpen = _this$props5.onOpen,openProp = _this$props5.open,placement = _this$props5.placement,PopperProps = _this$props5.PopperProps,theme = _this$props5.theme,title = _this$props5.title,TransitionComponent = _this$props5.TransitionComponent,TransitionProps = _this$props5.TransitionProps,other = objectWithoutProperties(_this$props5, ["children", "classes", "disableFocusListener", "disableHoverListener", "disableTouchListener", "enterDelay", "enterTouchDelay", "id", "interactive", "leaveDelay", "leaveTouchDelay", "onClose", "onOpen", "open", "placement", "PopperProps", "theme", "title", "TransitionComponent", "TransitionProps"]);

      var open = this.isControlled ? openProp : this.state.open;

      // There is no point in displaying an empty tooltip.
      if (title === '') {
        open = false;
      }

      // For accessibility and SEO concerns, we render the title to the DOM node when
      // the tooltip is hidden. However, we have made a tradeoff when
      // `disableHoverListener` is set. This title logic is disabled.
      // It's allowing us to keep the implementation size minimal.
      // We are open to change the tradeoff.
      var shouldShowNativeTitle = !open && !disableHoverListener;
      var childrenProps = objectSpread({
        'aria-describedby': open ? id || this.defaultId : null,
        title: shouldShowNativeTitle && typeof title === 'string' ? title : null },
      other,
      children.props, {
        className: classnames(other.className, children.props.className) });


      if (!disableTouchListener) {
        childrenProps.onTouchStart = this.handleTouchStart;
        childrenProps.onTouchEnd = this.handleTouchEnd;
      }

      if (!disableHoverListener) {
        childrenProps.onMouseOver = this.handleEnter;
        childrenProps.onMouseLeave = this.handleLeave;
      }

      if (!disableFocusListener) {
        childrenProps.onFocus = this.handleFocus;
        childrenProps.onBlur = this.handleLeave;
      }

      var interactiveWrapperListeners = interactive ?
      {
        onMouseOver: childrenProps.onMouseOver,
        onMouseLeave: childrenProps.onMouseLeave,
        onFocus: childrenProps.onFocus,
        onBlur: childrenProps.onBlur } :

      {};

      warning_1(
      !children.props.title,
      [
      'Material-UI: you have provided a `title` property to the child of <Tooltip />.', "Remove this title property `".concat(
      children.props.title, "` or the Tooltip component.")].
      join('\n'));


      return (
        react.createElement(react.Fragment, null,
        react.createElement(RootRef, { rootRef: this.onRootRef }, react.cloneElement(children, childrenProps)),
        react.createElement(Popper$2, _extends_1({
          className: classes.popper,
          placement: placement,
          anchorEl: this.childrenRef,
          open: open,
          id: childrenProps['aria-describedby'],
          transition: true },
        interactiveWrapperListeners,
        PopperProps),

        function (_ref) {var placementInner = _ref.placement,TransitionPropsInner = _ref.TransitionProps;return (
            react.createElement(TransitionComponent, _extends_1({
              timeout: theme.transitions.duration.shorter },
            TransitionPropsInner,
            TransitionProps),

            react.createElement("div", {
              className: classnames(
              classes.tooltip, defineProperty({},

              classes.touch, _this2.ignoreNonTouchEvents),

              classes["tooltipPlacement".concat(capitalize(placementInner.split('-')[0]))]) },


            title)));})));






    } }]);return Tooltip;}(react.Component);


Tooltip.propTypes = {
  /**
                       * Tooltip reference element.
                       */
  children: propTypes.element.isRequired,
  /**
                                           * Override or extend the styles applied to the component.
                                           * See [CSS API](#css-api) below for more details.
                                           */
  classes: propTypes.object.isRequired,
  /**
                                         * Do not respond to focus events.
                                         */
  disableFocusListener: propTypes.bool,
  /**
                                         * Do not respond to hover events.
                                         */
  disableHoverListener: propTypes.bool,
  /**
                                         * Do not respond to long press touch events.
                                         */
  disableTouchListener: propTypes.bool,
  /**
                                         * The number of milliseconds to wait before showing the tooltip.
                                         * This property won't impact the enter touch delay (`enterTouchDelay`).
                                         */
  enterDelay: propTypes.number,
  /**
                                 * The number of milliseconds a user must touch the element before showing the tooltip.
                                 */
  enterTouchDelay: propTypes.number,
  /**
                                      * The relationship between the tooltip and the wrapper component is not clear from the DOM.
                                      * This property is used with aria-describedby to solve the accessibility issue.
                                      * If you don't provide this property. It falls back to a randomly generated id.
                                      */
  id: propTypes.string,
  /**
                         * Makes a tooltip interactive, i.e. will not close when the user
                         * hovers over the tooltip before the `leaveDelay` is expired.
                         */
  interactive: propTypes.bool,
  /**
                                * The number of milliseconds to wait before hiding the tooltip.
                                * This property won't impact the leave touch delay (`leaveTouchDelay`).
                                */
  leaveDelay: propTypes.number,
  /**
                                 * The number of milliseconds after the user stops touching an element before hiding the tooltip.
                                 */
  leaveTouchDelay: propTypes.number,
  /**
                                      * Callback fired when the tooltip requests to be closed.
                                      *
                                      * @param {object} event The event source of the callback
                                      */
  onClose: propTypes.func,
  /**
                            * Callback fired when the tooltip requests to be open.
                            *
                            * @param {object} event The event source of the callback
                            */
  onOpen: propTypes.func,
  /**
                           * If `true`, the tooltip is shown.
                           */
  open: propTypes.bool,
  /**
                         * Tooltip placement.
                         */
  placement: propTypes.oneOf([
  'bottom-end',
  'bottom-start',
  'bottom',
  'left-end',
  'left-start',
  'left',
  'right-end',
  'right-start',
  'right',
  'top-end',
  'top-start',
  'top']),

  /**
            * Properties applied to the [`Popper`](/api/popper/) element.
            */
  PopperProps: propTypes.object,
  /**
                                  * @ignore
                                  */
  theme: propTypes.object.isRequired,
  /**
                                       * Tooltip title. Zero-length titles string are never displayed.
                                       */
  title: propTypes.node.isRequired,
  /**
                                     * Transition component.
                                     */
  TransitionComponent: propTypes.oneOfType([propTypes.string, propTypes.func, propTypes.object]),
  /**
                                                                                                   * Properties applied to the `Transition` element.
                                                                                                   */
  TransitionProps: propTypes.object };


Tooltip.defaultProps = {
  disableFocusListener: false,
  disableHoverListener: false,
  disableTouchListener: false,
  enterDelay: 0,
  enterTouchDelay: 1000,
  interactive: false,
  leaveDelay: 0,
  leaveTouchDelay: 1500,
  placement: 'bottom',
  TransitionComponent: Grow$1 };


withStyles(styles$1A, { name: 'MuiTooltip', withTheme: true })(Tooltip);

var styles$1B = {
  entering: {
    transform: 'scale(1)' },

  entered: {
    transform: 'scale(1)' } };



/**
                                * The Zoom transition can be used for the floating variant of the
                                * [Button](https://material-ui.com/demos/buttons/#floating-action-buttons) component.
                                * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
                                */var
Zoom = /*#__PURE__*/function (_React$Component) {inherits(Zoom, _React$Component);function Zoom() {var _getPrototypeOf2;var _this;classCallCheck(this, Zoom);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Zoom)).call.apply(_getPrototypeOf2, [this].concat(args)));defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleEnter",
    function (node) {var
      theme = _this.props.theme;
      reflow(node); // So the animation always start from the start.

      var transitionProps = getTransitionProps(_this.props, {
        mode: 'enter' });

      node.style.webkitTransition = theme.transitions.create('transform', transitionProps);
      node.style.transition = theme.transitions.create('transform', transitionProps);

      if (_this.props.onEnter) {
        _this.props.onEnter(node);
      }
    });defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleExit",

    function (node) {var
      theme = _this.props.theme;
      var transitionProps = getTransitionProps(_this.props, {
        mode: 'exit' });

      node.style.webkitTransition = theme.transitions.create('transform', transitionProps);
      node.style.transition = theme.transitions.create('transform', transitionProps);

      if (_this.props.onExit) {
        _this.props.onExit(node);
      }
    });return _this;}createClass(Zoom, [{ key: "render", value: function render()

    {var _this$props =
      this.props,children = _this$props.children,onEnter = _this$props.onEnter,onExit = _this$props.onExit,styleProp = _this$props.style,theme = _this$props.theme,other = objectWithoutProperties(_this$props, ["children", "onEnter", "onExit", "style", "theme"]);

      var style = objectSpread({},
      styleProp,
      react.isValidElement(children) ? children.props.style : {});


      return (
        react.createElement(Transition, _extends_1({ appear: true, onEnter: this.handleEnter, onExit: this.handleExit }, other),
        function (state, childProps) {
          return react.cloneElement(children, objectSpread({
            style: objectSpread({
              transform: 'scale(0)',
              willChange: 'transform' },
            styles$1B[state],
            style) },

          childProps));

        }));


    } }]);return Zoom;}(react.Component);


Zoom.propTypes = {
  /**
                    * A single child content element.
                    */
  children: propTypes.oneOfType([propTypes.element, propTypes.func]),
  /**
                                                                       * If `true`, the component will transition in.
                                                                       */
  in: propTypes.bool,
  /**
                       * @ignore
                       */
  onEnter: propTypes.func,
  /**
                            * @ignore
                            */
  onExit: propTypes.func,
  /**
                           * @ignore
                           */
  style: propTypes.object,
  /**
                            * @ignore
                            */
  theme: propTypes.object.isRequired,
  /**
                                       * The duration for the transition, in milliseconds.
                                       * You may specify a single timeout for all transitions, or individually with an object.
                                       */
  timeout: propTypes.oneOfType([
  propTypes.number,
  propTypes.shape({ enter: propTypes.number, exit: propTypes.number })]) };



Zoom.defaultProps = {
  timeout: {
    enter: duration.enteringScreen,
    exit: duration.leavingScreen } };



withTheme()(Zoom);

var

Root = /*#__PURE__*/function (_Component) {inherits(Root, _Component);function Root() {var _getPrototypeOf2;var _this;classCallCheck(this, Root);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = possibleConstructorReturn(this, (_getPrototypeOf2 = getPrototypeOf(Root)).call.apply(_getPrototypeOf2, [this].concat(args)));defineProperty(assertThisInitialized(assertThisInitialized(_this)), "handleBtnClick",
    function () {
      console.log("Btn click >>");
    });return _this;}createClass(Root, [{ key: "render", value: function render()

    {
      return (
        react.createElement("div", null,
        react.createElement(Button$1, {
          onClick: this.handleBtnClick,
          variant: "outlined",
          color: "primary" }, "Check")));





    } }]);return Root;}(react_5);

var _global = createCommonjsModule(function (module) {
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef
});

var hasOwnProperty$2 = {}.hasOwnProperty;
var _has = function (it, key) {
  return hasOwnProperty$2.call(it, key);
};

var _fails = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};

// Thank's IE8 for his funny defineProperty
var _descriptors = !_fails(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});

var _core = createCommonjsModule(function (module) {
var core = module.exports = { version: '2.5.7' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef
});
var _core_1 = _core.version;

var _isObject = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};

var _anObject = function (it) {
  if (!_isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};

var document$1 = _global.document;
// typeof document.createElement is 'object' in old IE
var is$1 = _isObject(document$1) && _isObject(document$1.createElement);
var _domCreate = function (it) {
  return is$1 ? document$1.createElement(it) : {};
};

var _ie8DomDefine = !_descriptors && !_fails(function () {
  return Object.defineProperty(_domCreate('div'), 'a', { get: function () { return 7; } }).a != 7;
});

// 7.1.1 ToPrimitive(input [, PreferredType])

// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
var _toPrimitive = function (it, S) {
  if (!_isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !_isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};

var dP = Object.defineProperty;

var f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  _anObject(O);
  P = _toPrimitive(P, true);
  _anObject(Attributes);
  if (_ie8DomDefine) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

var _objectDp = {
	f: f
};

var _propertyDesc = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

var _hide = _descriptors ? function (object, key, value) {
  return _objectDp.f(object, key, _propertyDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

var id$1 = 0;
var px = Math.random();
var _uid = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id$1 + px).toString(36));
};

var _redefine = createCommonjsModule(function (module) {
var SRC = _uid('src');
var TO_STRING = 'toString';
var $toString = Function[TO_STRING];
var TPL = ('' + $toString).split(TO_STRING);

_core.inspectSource = function (it) {
  return $toString.call(it);
};

(module.exports = function (O, key, val, safe) {
  var isFunction = typeof val == 'function';
  if (isFunction) _has(val, 'name') || _hide(val, 'name', key);
  if (O[key] === val) return;
  if (isFunction) _has(val, SRC) || _hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  if (O === _global) {
    O[key] = val;
  } else if (!safe) {
    delete O[key];
    _hide(O, key, val);
  } else if (O[key]) {
    O[key] = val;
  } else {
    _hide(O, key, val);
  }
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString() {
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});
});

var _aFunction = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};

// optional / simple context binding

var _ctx = function (fn, that, length) {
  _aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};

var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] || (_global[name] = {}) : (_global[name] || {})[PROTOTYPE];
  var exports = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});
  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
  var key, own, out, exp;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? _ctx(out, _global) : IS_PROTO && typeof out == 'function' ? _ctx(Function.call, out) : out;
    // extend global
    if (target) _redefine(target, key, out, type & $export.U);
    // export
    if (exports[key] != out) _hide(exports, key, exp);
    if (IS_PROTO && expProto[key] != out) expProto[key] = out;
  }
};
_global.core = _core;
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
var _export = $export;

var _meta = createCommonjsModule(function (module) {
var META = _uid('meta');


var setDesc = _objectDp.f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !_fails(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!_isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!_has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!_has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !_has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};
});
var _meta_1 = _meta.KEY;
var _meta_2 = _meta.NEED;
var _meta_3 = _meta.fastKey;
var _meta_4 = _meta.getWeak;
var _meta_5 = _meta.onFreeze;

var _library = false;

var _shared = createCommonjsModule(function (module) {
var SHARED = '__core-js_shared__';
var store = _global[SHARED] || (_global[SHARED] = {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: _core.version,
  mode: 'global',
  copyright: '© 2018 Denis Pushkarev (zloirock.ru)'
});
});

var _wks = createCommonjsModule(function (module) {
var store = _shared('wks');

var Symbol = _global.Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : _uid)('Symbol.' + name));
};

$exports.store = store;
});

var def = _objectDp.f;

var TAG = _wks('toStringTag');

var _setToStringTag = function (it, tag, stat) {
  if (it && !_has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};

var f$1 = _wks;

var _wksExt = {
	f: f$1
};

var defineProperty$3 = _objectDp.f;
var _wksDefine = function (name) {
  var $Symbol = _core.Symbol || (_core.Symbol = _global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty$3($Symbol, name, { value: _wksExt.f(name) });
};

var toString = {}.toString;

var _cof = function (it) {
  return toString.call(it).slice(8, -1);
};

// fallback for non-array-like ES3 and non-enumerable old V8 strings

// eslint-disable-next-line no-prototype-builtins
var _iobject = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return _cof(it) == 'String' ? it.split('') : Object(it);
};

// 7.2.1 RequireObjectCoercible(argument)
var _defined = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};

// to indexed object, toObject with fallback for non-array-like ES3 strings


var _toIobject = function (it) {
  return _iobject(_defined(it));
};

// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
var _toInteger = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};

// 7.1.15 ToLength

var min = Math.min;
var _toLength = function (it) {
  return it > 0 ? min(_toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

var max = Math.max;
var min$1 = Math.min;
var _toAbsoluteIndex = function (index, length) {
  index = _toInteger(index);
  return index < 0 ? max(index + length, 0) : min$1(index, length);
};

// false -> Array#indexOf
// true  -> Array#includes



var _arrayIncludes = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = _toIobject($this);
    var length = _toLength(O.length);
    var index = _toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

var shared = _shared('keys');

var _sharedKey = function (key) {
  return shared[key] || (shared[key] = _uid(key));
};

var arrayIndexOf = _arrayIncludes(false);
var IE_PROTO = _sharedKey('IE_PROTO');

var _objectKeysInternal = function (object, names) {
  var O = _toIobject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) _has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (_has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};

// IE 8- don't enum bug keys
var _enumBugKeys = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');

// 19.1.2.14 / 15.2.3.14 Object.keys(O)



var _objectKeys = Object.keys || function keys(O) {
  return _objectKeysInternal(O, _enumBugKeys);
};

var f$2 = Object.getOwnPropertySymbols;

var _objectGops = {
	f: f$2
};

var f$3 = {}.propertyIsEnumerable;

var _objectPie = {
	f: f$3
};

// all enumerable object keys, includes symbols



var _enumKeys = function (it) {
  var result = _objectKeys(it);
  var getSymbols = _objectGops.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = _objectPie.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};

// 7.2.2 IsArray(argument)

var _isArray = Array.isArray || function isArray(arg) {
  return _cof(arg) == 'Array';
};

var _objectDps = _descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
  _anObject(O);
  var keys = _objectKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) _objectDp.f(O, P = keys[i++], Properties[P]);
  return O;
};

var document$2 = _global.document;
var _html = document$2 && document$2.documentElement;

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])



var IE_PROTO$1 = _sharedKey('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE$1 = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = _domCreate('iframe');
  var i = _enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  _html.appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE$1][_enumBugKeys[i]];
  return createDict();
};

var _objectCreate = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE$1] = _anObject(O);
    result = new Empty();
    Empty[PROTOTYPE$1] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO$1] = O;
  } else result = createDict();
  return Properties === undefined ? result : _objectDps(result, Properties);
};

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)

var hiddenKeys = _enumBugKeys.concat('length', 'prototype');

var f$4 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return _objectKeysInternal(O, hiddenKeys);
};

var _objectGopn = {
	f: f$4
};

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window

var gOPN = _objectGopn.f;
var toString$1 = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

var f$5 = function getOwnPropertyNames(it) {
  return windowNames && toString$1.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(_toIobject(it));
};

var _objectGopnExt = {
	f: f$5
};

var gOPD = Object.getOwnPropertyDescriptor;

var f$6 = _descriptors ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = _toIobject(O);
  P = _toPrimitive(P, true);
  if (_ie8DomDefine) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (_has(O, P)) return _propertyDesc(!_objectPie.f.call(O, P), O[P]);
};

var _objectGopd = {
	f: f$6
};

// ECMAScript 6 symbols shim





var META = _meta.KEY;



















var gOPD$1 = _objectGopd.f;
var dP$1 = _objectDp.f;
var gOPN$1 = _objectGopnExt.f;
var $Symbol = _global.Symbol;
var $JSON = _global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE$2 = 'prototype';
var HIDDEN = _wks('_hidden');
var TO_PRIMITIVE = _wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = _shared('symbol-registry');
var AllSymbols = _shared('symbols');
var OPSymbols = _shared('op-symbols');
var ObjectProto = Object[PROTOTYPE$2];
var USE_NATIVE = typeof $Symbol == 'function';
var QObject = _global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE$2] || !QObject[PROTOTYPE$2].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = _descriptors && _fails(function () {
  return _objectCreate(dP$1({}, 'a', {
    get: function () { return dP$1(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD$1(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP$1(it, key, D);
  if (protoDesc && it !== ObjectProto) dP$1(ObjectProto, key, protoDesc);
} : dP$1;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _objectCreate($Symbol[PROTOTYPE$2]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  _anObject(it);
  key = _toPrimitive(key, true);
  _anObject(D);
  if (_has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!_has(it, HIDDEN)) dP$1(it, HIDDEN, _propertyDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (_has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _objectCreate(D, { enumerable: _propertyDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP$1(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  _anObject(it);
  var keys = _enumKeys(P = _toIobject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _objectCreate(it) : $defineProperties(_objectCreate(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = _toPrimitive(key, true));
  if (this === ObjectProto && _has(AllSymbols, key) && !_has(OPSymbols, key)) return false;
  return E || !_has(this, key) || !_has(AllSymbols, key) || _has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = _toIobject(it);
  key = _toPrimitive(key, true);
  if (it === ObjectProto && _has(AllSymbols, key) && !_has(OPSymbols, key)) return;
  var D = gOPD$1(it, key);
  if (D && _has(AllSymbols, key) && !(_has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN$1(_toIobject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!_has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN$1(IS_OP ? OPSymbols : _toIobject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (_has(AllSymbols, key = names[i++]) && (IS_OP ? _has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = _uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (_has(this, HIDDEN) && _has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, _propertyDesc(1, value));
    };
    if (_descriptors && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  _redefine($Symbol[PROTOTYPE$2], 'toString', function toString() {
    return this._k;
  });

  _objectGopd.f = $getOwnPropertyDescriptor;
  _objectDp.f = $defineProperty;
  _objectGopn.f = _objectGopnExt.f = $getOwnPropertyNames;
  _objectPie.f = $propertyIsEnumerable;
  _objectGops.f = $getOwnPropertySymbols;

  if (_descriptors && !_library) {
    _redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  _wksExt.f = function (name) {
    return wrap(_wks(name));
  };
}

_export(_export.G + _export.W + _export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)_wks(es6Symbols[j++]);

for (var wellKnownSymbols = _objectKeys(_wks.store), k = 0; wellKnownSymbols.length > k;) _wksDefine(wellKnownSymbols[k++]);

_export(_export.S + _export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return _has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

_export(_export.S + _export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && _export(_export.S + _export.F * (!USE_NATIVE || _fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!_isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!_isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE$2][TO_PRIMITIVE] || _hide($Symbol[PROTOTYPE$2], TO_PRIMITIVE, $Symbol[PROTOTYPE$2].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
_setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
_setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
_setToStringTag(_global.JSON, 'JSON', true);

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
_export(_export.S, 'Object', { create: _objectCreate });

// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
_export(_export.S + _export.F * !_descriptors, 'Object', { defineProperty: _objectDp.f });

// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
_export(_export.S + _export.F * !_descriptors, 'Object', { defineProperties: _objectDps });

// most Object methods by ES6 should accept primitives



var _objectSap = function (KEY, exec) {
  var fn = (_core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  _export(_export.S + _export.F * _fails(function () { fn(1); }), 'Object', exp);
};

// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)

var $getOwnPropertyDescriptor$1 = _objectGopd.f;

_objectSap('getOwnPropertyDescriptor', function () {
  return function getOwnPropertyDescriptor(it, key) {
    return $getOwnPropertyDescriptor$1(_toIobject(it), key);
  };
});

// 7.1.13 ToObject(argument)

var _toObject = function (it) {
  return Object(_defined(it));
};

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)


var IE_PROTO$2 = _sharedKey('IE_PROTO');
var ObjectProto$1 = Object.prototype;

var _objectGpo = Object.getPrototypeOf || function (O) {
  O = _toObject(O);
  if (_has(O, IE_PROTO$2)) return O[IE_PROTO$2];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto$1 : null;
};

// 19.1.2.9 Object.getPrototypeOf(O)



_objectSap('getPrototypeOf', function () {
  return function getPrototypeOf(it) {
    return _objectGpo(_toObject(it));
  };
});

// 19.1.2.14 Object.keys(O)



_objectSap('keys', function () {
  return function keys(it) {
    return _objectKeys(_toObject(it));
  };
});

// 19.1.2.7 Object.getOwnPropertyNames(O)
_objectSap('getOwnPropertyNames', function () {
  return _objectGopnExt.f;
});

// 19.1.2.5 Object.freeze(O)

var meta = _meta.onFreeze;

_objectSap('freeze', function ($freeze) {
  return function freeze(it) {
    return $freeze && _isObject(it) ? $freeze(meta(it)) : it;
  };
});

// 19.1.2.17 Object.seal(O)

var meta$1 = _meta.onFreeze;

_objectSap('seal', function ($seal) {
  return function seal(it) {
    return $seal && _isObject(it) ? $seal(meta$1(it)) : it;
  };
});

// 19.1.2.15 Object.preventExtensions(O)

var meta$2 = _meta.onFreeze;

_objectSap('preventExtensions', function ($preventExtensions) {
  return function preventExtensions(it) {
    return $preventExtensions && _isObject(it) ? $preventExtensions(meta$2(it)) : it;
  };
});

// 19.1.2.12 Object.isFrozen(O)


_objectSap('isFrozen', function ($isFrozen) {
  return function isFrozen(it) {
    return _isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
  };
});

// 19.1.2.13 Object.isSealed(O)


_objectSap('isSealed', function ($isSealed) {
  return function isSealed(it) {
    return _isObject(it) ? $isSealed ? $isSealed(it) : false : true;
  };
});

// 19.1.2.11 Object.isExtensible(O)


_objectSap('isExtensible', function ($isExtensible) {
  return function isExtensible(it) {
    return _isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
  };
});

// 19.1.2.1 Object.assign(target, source, ...)





var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
var _objectAssign = !$assign || _fails(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = _toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = _objectGops.f;
  var isEnum = _objectPie.f;
  while (aLen > index) {
    var S = _iobject(arguments[index++]);
    var keys = getSymbols ? _objectKeys(S).concat(getSymbols(S)) : _objectKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
  } return T;
} : $assign;

// 19.1.3.1 Object.assign(target, source)


_export(_export.S + _export.F, 'Object', { assign: _objectAssign });

// 7.2.9 SameValue(x, y)
var _sameValue = Object.is || function is(x, y) {
  // eslint-disable-next-line no-self-compare
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};

// 19.1.3.10 Object.is(value1, value2)

_export(_export.S, 'Object', { is: _sameValue });

// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */


var check = function (O, proto) {
  _anObject(O);
  if (!_isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
var _setProto = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = _ctx(Function.call, _objectGopd.f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) { buggy = true; }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};

// 19.1.3.19 Object.setPrototypeOf(O, proto)

_export(_export.S, 'Object', { setPrototypeOf: _setProto.set });

// getting tag from 19.1.3.6 Object.prototype.toString()

var TAG$1 = _wks('toStringTag');
// ES3 wrong here
var ARG = _cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

var _classof = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG$1)) == 'string' ? T
    // builtinTag case
    : ARG ? _cof(O)
    // ES3 arguments fallback
    : (B = _cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};

// 19.1.3.6 Object.prototype.toString()

var test = {};
test[_wks('toStringTag')] = 'z';
if (test + '' != '[object z]') {
  _redefine(Object.prototype, 'toString', function toString() {
    return '[object ' + _classof(this) + ']';
  }, true);
}

// fast apply, http://jsperf.lnkit.com/fast-apply/5
var _invoke = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};

var arraySlice = [].slice;
var factories = {};

var construct = function (F, len, args) {
  if (!(len in factories)) {
    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';
    // eslint-disable-next-line no-new-func
    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  } return factories[len](F, args);
};

var _bind = Function.bind || function bind(that /* , ...args */) {
  var fn = _aFunction(this);
  var partArgs = arraySlice.call(arguments, 1);
  var bound = function (/* args... */) {
    var args = partArgs.concat(arraySlice.call(arguments));
    return this instanceof bound ? construct(fn, args.length, args) : _invoke(fn, args, that);
  };
  if (_isObject(fn.prototype)) bound.prototype = fn.prototype;
  return bound;
};

// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)


_export(_export.P, 'Function', { bind: _bind });

var dP$2 = _objectDp.f;
var FProto = Function.prototype;
var nameRE = /^\s*function ([^ (]*)/;
var NAME = 'name';

// 19.2.4.2 name
NAME in FProto || _descriptors && dP$2(FProto, NAME, {
  configurable: true,
  get: function () {
    try {
      return ('' + this).match(nameRE)[1];
    } catch (e) {
      return '';
    }
  }
});

var HAS_INSTANCE = _wks('hasInstance');
var FunctionProto = Function.prototype;
// 19.2.3.6 Function.prototype[@@hasInstance](V)
if (!(HAS_INSTANCE in FunctionProto)) _objectDp.f(FunctionProto, HAS_INSTANCE, { value: function (O) {
  if (typeof this != 'function' || !_isObject(O)) return false;
  if (!_isObject(this.prototype)) return O instanceof this;
  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
  while (O = _objectGpo(O)) if (this.prototype === O) return true;
  return false;
} });

var _stringWs = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

var space = '[' + _stringWs + ']';
var non = '\u200b\u0085';
var ltrim = RegExp('^' + space + space + '*');
var rtrim = RegExp(space + space + '*$');

var exporter = function (KEY, exec, ALIAS) {
  var exp = {};
  var FORCE = _fails(function () {
    return !!_stringWs[KEY]() || non[KEY]() != non;
  });
  var fn = exp[KEY] = FORCE ? exec(trim) : _stringWs[KEY];
  if (ALIAS) exp[ALIAS] = fn;
  _export(_export.P + _export.F * FORCE, 'String', exp);
};

// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
var trim = exporter.trim = function (string, TYPE) {
  string = String(_defined(string));
  if (TYPE & 1) string = string.replace(ltrim, '');
  if (TYPE & 2) string = string.replace(rtrim, '');
  return string;
};

var _stringTrim = exporter;

var $parseInt = _global.parseInt;
var $trim = _stringTrim.trim;

var hex = /^[-+]?0[xX]/;

var _parseInt = $parseInt(_stringWs + '08') !== 8 || $parseInt(_stringWs + '0x16') !== 22 ? function parseInt(str, radix) {
  var string = $trim(String(str), 3);
  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
} : $parseInt;

// 18.2.5 parseInt(string, radix)
_export(_export.G + _export.F * (parseInt != _parseInt), { parseInt: _parseInt });

var $parseFloat = _global.parseFloat;
var $trim$1 = _stringTrim.trim;

var _parseFloat = 1 / $parseFloat(_stringWs + '-0') !== -Infinity ? function parseFloat(str) {
  var string = $trim$1(String(str), 3);
  var result = $parseFloat(string);
  return result === 0 && string.charAt(0) == '-' ? -0 : result;
} : $parseFloat;

// 18.2.4 parseFloat(string)
_export(_export.G + _export.F * (parseFloat != _parseFloat), { parseFloat: _parseFloat });

var setPrototypeOf$2 = _setProto.set;
var _inheritIfRequired = function (that, target, C) {
  var S = target.constructor;
  var P;
  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && _isObject(P) && setPrototypeOf$2) {
    setPrototypeOf$2(that, P);
  } return that;
};

var gOPN$2 = _objectGopn.f;
var gOPD$2 = _objectGopd.f;
var dP$3 = _objectDp.f;
var $trim$2 = _stringTrim.trim;
var NUMBER = 'Number';
var $Number = _global[NUMBER];
var Base = $Number;
var proto = $Number.prototype;
// Opera ~12 has broken Object#toString
var BROKEN_COF = _cof(_objectCreate(proto)) == NUMBER;
var TRIM = 'trim' in String.prototype;

// 7.1.3 ToNumber(argument)
var toNumber = function (argument) {
  var it = _toPrimitive(argument, false);
  if (typeof it == 'string' && it.length > 2) {
    it = TRIM ? it.trim() : $trim$2(it, 3);
    var first = it.charCodeAt(0);
    var third, radix, maxCode;
    if (first === 43 || first === 45) {
      third = it.charCodeAt(2);
      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if (first === 48) {
      switch (it.charCodeAt(1)) {
        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
        default: return +it;
      }
      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
        code = digits.charCodeAt(i);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if (code < 48 || code > maxCode) return NaN;
      } return parseInt(digits, radix);
    }
  } return +it;
};

if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
  $Number = function Number(value) {
    var it = arguments.length < 1 ? 0 : value;
    var that = this;
    return that instanceof $Number
      // check on 1..constructor(foo) case
      && (BROKEN_COF ? _fails(function () { proto.valueOf.call(that); }) : _cof(that) != NUMBER)
        ? _inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
  };
  for (var keys$1 = _descriptors ? gOPN$2(Base) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES6 (in case, if modules with ES6 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
  ).split(','), j$1 = 0, key; keys$1.length > j$1; j$1++) {
    if (_has(Base, key = keys$1[j$1]) && !_has($Number, key)) {
      dP$3($Number, key, gOPD$2(Base, key));
    }
  }
  $Number.prototype = proto;
  proto.constructor = $Number;
  _redefine(_global, NUMBER, $Number);
}

var _aNumberValue = function (it, msg) {
  if (typeof it != 'number' && _cof(it) != 'Number') throw TypeError(msg);
  return +it;
};

var _stringRepeat = function repeat(count) {
  var str = String(_defined(this));
  var res = '';
  var n = _toInteger(count);
  if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;
  return res;
};

var $toFixed = 1.0.toFixed;
var floor$1 = Math.floor;
var data = [0, 0, 0, 0, 0, 0];
var ERROR = 'Number.toFixed: incorrect invocation!';
var ZERO = '0';

var multiply = function (n, c) {
  var i = -1;
  var c2 = c;
  while (++i < 6) {
    c2 += n * data[i];
    data[i] = c2 % 1e7;
    c2 = floor$1(c2 / 1e7);
  }
};
var divide = function (n) {
  var i = 6;
  var c = 0;
  while (--i >= 0) {
    c += data[i];
    data[i] = floor$1(c / n);
    c = (c % n) * 1e7;
  }
};
var numToString = function () {
  var i = 6;
  var s = '';
  while (--i >= 0) {
    if (s !== '' || i === 0 || data[i] !== 0) {
      var t = String(data[i]);
      s = s === '' ? t : s + _stringRepeat.call(ZERO, 7 - t.length) + t;
    }
  } return s;
};
var pow = function (x, n, acc) {
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};
var log = function (x) {
  var n = 0;
  var x2 = x;
  while (x2 >= 4096) {
    n += 12;
    x2 /= 4096;
  }
  while (x2 >= 2) {
    n += 1;
    x2 /= 2;
  } return n;
};

_export(_export.P + _export.F * (!!$toFixed && (
  0.00008.toFixed(3) !== '0.000' ||
  0.9.toFixed(0) !== '1' ||
  1.255.toFixed(2) !== '1.25' ||
  1000000000000000128.0.toFixed(0) !== '1000000000000000128'
) || !_fails(function () {
  // V8 ~ Android 4.3-
  $toFixed.call({});
})), 'Number', {
  toFixed: function toFixed(fractionDigits) {
    var x = _aNumberValue(this, ERROR);
    var f = _toInteger(fractionDigits);
    var s = '';
    var m = ZERO;
    var e, z, j, k;
    if (f < 0 || f > 20) throw RangeError(ERROR);
    // eslint-disable-next-line no-self-compare
    if (x != x) return 'NaN';
    if (x <= -1e21 || x >= 1e21) return String(x);
    if (x < 0) {
      s = '-';
      x = -x;
    }
    if (x > 1e-21) {
      e = log(x * pow(2, 69, 1)) - 69;
      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;
      if (e > 0) {
        multiply(0, z);
        j = f;
        while (j >= 7) {
          multiply(1e7, 0);
          j -= 7;
        }
        multiply(pow(10, j, 1), 0);
        j = e - 1;
        while (j >= 23) {
          divide(1 << 23);
          j -= 23;
        }
        divide(1 << j);
        multiply(1, 1);
        divide(2);
        m = numToString();
      } else {
        multiply(0, z);
        multiply(1 << -e, 0);
        m = numToString() + _stringRepeat.call(ZERO, f);
      }
    }
    if (f > 0) {
      k = m.length;
      m = s + (k <= f ? '0.' + _stringRepeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
    } else {
      m = s + m;
    } return m;
  }
});

var $toPrecision = 1.0.toPrecision;

_export(_export.P + _export.F * (_fails(function () {
  // IE7-
  return $toPrecision.call(1, undefined) !== '1';
}) || !_fails(function () {
  // V8 ~ Android 4.3-
  $toPrecision.call({});
})), 'Number', {
  toPrecision: function toPrecision(precision) {
    var that = _aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
  }
});

// 20.1.2.1 Number.EPSILON


_export(_export.S, 'Number', { EPSILON: Math.pow(2, -52) });

// 20.1.2.2 Number.isFinite(number)

var _isFinite = _global.isFinite;

_export(_export.S, 'Number', {
  isFinite: function isFinite(it) {
    return typeof it == 'number' && _isFinite(it);
  }
});

// 20.1.2.3 Number.isInteger(number)

var floor$2 = Math.floor;
var _isInteger = function isInteger(it) {
  return !_isObject(it) && isFinite(it) && floor$2(it) === it;
};

// 20.1.2.3 Number.isInteger(number)


_export(_export.S, 'Number', { isInteger: _isInteger });

// 20.1.2.4 Number.isNaN(number)


_export(_export.S, 'Number', {
  isNaN: function isNaN(number) {
    // eslint-disable-next-line no-self-compare
    return number != number;
  }
});

// 20.1.2.5 Number.isSafeInteger(number)


var abs = Math.abs;

_export(_export.S, 'Number', {
  isSafeInteger: function isSafeInteger(number) {
    return _isInteger(number) && abs(number) <= 0x1fffffffffffff;
  }
});

// 20.1.2.6 Number.MAX_SAFE_INTEGER


_export(_export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });

// 20.1.2.10 Number.MIN_SAFE_INTEGER


_export(_export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });

// 20.1.2.12 Number.parseFloat(string)
_export(_export.S + _export.F * (Number.parseFloat != _parseFloat), 'Number', { parseFloat: _parseFloat });

// 20.1.2.13 Number.parseInt(string, radix)
_export(_export.S + _export.F * (Number.parseInt != _parseInt), 'Number', { parseInt: _parseInt });

// 20.2.2.20 Math.log1p(x)
var _mathLog1p = Math.log1p || function log1p(x) {
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
};

// 20.2.2.3 Math.acosh(x)


var sqrt = Math.sqrt;
var $acosh = Math.acosh;

_export(_export.S + _export.F * !($acosh
  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
  && Math.floor($acosh(Number.MAX_VALUE)) == 710
  // Tor Browser bug: Math.acosh(Infinity) -> NaN
  && $acosh(Infinity) == Infinity
), 'Math', {
  acosh: function acosh(x) {
    return (x = +x) < 1 ? NaN : x > 94906265.62425156
      ? Math.log(x) + Math.LN2
      : _mathLog1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});

// 20.2.2.5 Math.asinh(x)

var $asinh = Math.asinh;

function asinh(x) {
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
}

// Tor Browser bug: Math.asinh(0) -> -0
_export(_export.S + _export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });

// 20.2.2.7 Math.atanh(x)

var $atanh = Math.atanh;

// Tor Browser bug: Math.atanh(-0) -> 0
_export(_export.S + _export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
  atanh: function atanh(x) {
    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
  }
});

// 20.2.2.28 Math.sign(x)
var _mathSign = Math.sign || function sign(x) {
  // eslint-disable-next-line no-self-compare
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};

// 20.2.2.9 Math.cbrt(x)



_export(_export.S, 'Math', {
  cbrt: function cbrt(x) {
    return _mathSign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
  }
});

// 20.2.2.11 Math.clz32(x)


_export(_export.S, 'Math', {
  clz32: function clz32(x) {
    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
  }
});

// 20.2.2.12 Math.cosh(x)

var exp = Math.exp;

_export(_export.S, 'Math', {
  cosh: function cosh(x) {
    return (exp(x = +x) + exp(-x)) / 2;
  }
});

// 20.2.2.14 Math.expm1(x)
var $expm1 = Math.expm1;
var _mathExpm1 = (!$expm1
  // Old FF bug
  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
  // Tor Browser bug
  || $expm1(-2e-17) != -2e-17
) ? function expm1(x) {
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
} : $expm1;

// 20.2.2.14 Math.expm1(x)



_export(_export.S + _export.F * (_mathExpm1 != Math.expm1), 'Math', { expm1: _mathExpm1 });

// 20.2.2.16 Math.fround(x)

var pow$1 = Math.pow;
var EPSILON = pow$1(2, -52);
var EPSILON32 = pow$1(2, -23);
var MAX32 = pow$1(2, 127) * (2 - EPSILON32);
var MIN32 = pow$1(2, -126);

var roundTiesToEven = function (n) {
  return n + 1 / EPSILON - 1 / EPSILON;
};

var _mathFround = Math.fround || function fround(x) {
  var $abs = Math.abs(x);
  var $sign = _mathSign(x);
  var a, result;
  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
  a = (1 + EPSILON32 / EPSILON) * $abs;
  result = a - (a - $abs);
  // eslint-disable-next-line no-self-compare
  if (result > MAX32 || result != result) return $sign * Infinity;
  return $sign * result;
};

// 20.2.2.16 Math.fround(x)


_export(_export.S, 'Math', { fround: _mathFround });

// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])

var abs$1 = Math.abs;

_export(_export.S, 'Math', {
  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars
    var sum = 0;
    var i = 0;
    var aLen = arguments.length;
    var larg = 0;
    var arg, div;
    while (i < aLen) {
      arg = abs$1(arguments[i++]);
      if (larg < arg) {
        div = larg / arg;
        sum = sum * div * div + 1;
        larg = arg;
      } else if (arg > 0) {
        div = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
  }
});

// 20.2.2.18 Math.imul(x, y)

var $imul = Math.imul;

// some WebKit versions fails with big numbers, some has wrong arity
_export(_export.S + _export.F * _fails(function () {
  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
}), 'Math', {
  imul: function imul(x, y) {
    var UINT16 = 0xffff;
    var xn = +x;
    var yn = +y;
    var xl = UINT16 & xn;
    var yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});

// 20.2.2.21 Math.log10(x)


_export(_export.S, 'Math', {
  log10: function log10(x) {
    return Math.log(x) * Math.LOG10E;
  }
});

// 20.2.2.20 Math.log1p(x)


_export(_export.S, 'Math', { log1p: _mathLog1p });

// 20.2.2.22 Math.log2(x)


_export(_export.S, 'Math', {
  log2: function log2(x) {
    return Math.log(x) / Math.LN2;
  }
});

// 20.2.2.28 Math.sign(x)


_export(_export.S, 'Math', { sign: _mathSign });

// 20.2.2.30 Math.sinh(x)


var exp$1 = Math.exp;

// V8 near Chromium 38 has a problem with very small numbers
_export(_export.S + _export.F * _fails(function () {
  return !Math.sinh(-2e-17) != -2e-17;
}), 'Math', {
  sinh: function sinh(x) {
    return Math.abs(x = +x) < 1
      ? (_mathExpm1(x) - _mathExpm1(-x)) / 2
      : (exp$1(x - 1) - exp$1(-x - 1)) * (Math.E / 2);
  }
});

// 20.2.2.33 Math.tanh(x)


var exp$2 = Math.exp;

_export(_export.S, 'Math', {
  tanh: function tanh(x) {
    var a = _mathExpm1(x = +x);
    var b = _mathExpm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp$2(x) + exp$2(-x));
  }
});

// 20.2.2.34 Math.trunc(x)


_export(_export.S, 'Math', {
  trunc: function trunc(it) {
    return (it > 0 ? Math.floor : Math.ceil)(it);
  }
});

var fromCharCode = String.fromCharCode;
var $fromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
_export(_export.S + _export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
  // 21.1.2.2 String.fromCodePoint(...codePoints)
  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars
    var res = [];
    var aLen = arguments.length;
    var i = 0;
    var code;
    while (aLen > i) {
      code = +arguments[i++];
      if (_toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
      res.push(code < 0x10000
        ? fromCharCode(code)
        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
      );
    } return res.join('');
  }
});

_export(_export.S, 'String', {
  // 21.1.2.4 String.raw(callSite, ...substitutions)
  raw: function raw(callSite) {
    var tpl = _toIobject(callSite.raw);
    var len = _toLength(tpl.length);
    var aLen = arguments.length;
    var res = [];
    var i = 0;
    while (len > i) {
      res.push(String(tpl[i++]));
      if (i < aLen) res.push(String(arguments[i]));
    } return res.join('');
  }
});

// 21.1.3.25 String.prototype.trim()
_stringTrim('trim', function ($trim) {
  return function trim() {
    return $trim(this, 3);
  };
});

// true  -> String#at
// false -> String#codePointAt
var _stringAt = function (TO_STRING) {
  return function (that, pos) {
    var s = String(_defined(that));
    var i = _toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};

var _iterators = {};

var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
_hide(IteratorPrototype, _wks('iterator'), function () { return this; });

var _iterCreate = function (Constructor, NAME, next) {
  Constructor.prototype = _objectCreate(IteratorPrototype, { next: _propertyDesc(1, next) });
  _setToStringTag(Constructor, NAME + ' Iterator');
};

var ITERATOR = _wks('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

var _iterDefine = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  _iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = _objectGpo($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      _setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (typeof IteratorPrototype[ITERATOR] != 'function') _hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if (BUGGY || VALUES_BUG || !proto[ITERATOR]) {
    _hide(proto, ITERATOR, $default);
  }
  // Plug for library
  _iterators[NAME] = $default;
  _iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) _redefine(proto, key, methods[key]);
    } else _export(_export.P + _export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};

var $at = _stringAt(true);

// 21.1.3.27 String.prototype[@@iterator]()
_iterDefine(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});

var $at$1 = _stringAt(false);
_export(_export.P, 'String', {
  // 21.1.3.3 String.prototype.codePointAt(pos)
  codePointAt: function codePointAt(pos) {
    return $at$1(this, pos);
  }
});

// 7.2.8 IsRegExp(argument)


var MATCH = _wks('match');
var _isRegexp = function (it) {
  var isRegExp;
  return _isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : _cof(it) == 'RegExp');
};

// helper for String#{startsWith, endsWith, includes}



var _stringContext = function (that, searchString, NAME) {
  if (_isRegexp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(_defined(that));
};

var MATCH$1 = _wks('match');
var _failsIsRegexp = function (KEY) {
  var re = /./;
  try {
    '/./'[KEY](re);
  } catch (e) {
    try {
      re[MATCH$1] = false;
      return !'/./'[KEY](re);
    } catch (f) { /* empty */ }
  } return true;
};

var ENDS_WITH = 'endsWith';
var $endsWith = ''[ENDS_WITH];

_export(_export.P + _export.F * _failsIsRegexp(ENDS_WITH), 'String', {
  endsWith: function endsWith(searchString /* , endPosition = @length */) {
    var that = _stringContext(this, searchString, ENDS_WITH);
    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
    var len = _toLength(that.length);
    var end = endPosition === undefined ? len : Math.min(_toLength(endPosition), len);
    var search = String(searchString);
    return $endsWith
      ? $endsWith.call(that, search, end)
      : that.slice(end - search.length, end) === search;
  }
});

var INCLUDES = 'includes';

_export(_export.P + _export.F * _failsIsRegexp(INCLUDES), 'String', {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~_stringContext(this, searchString, INCLUDES)
      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});

_export(_export.P, 'String', {
  // 21.1.3.13 String.prototype.repeat(count)
  repeat: _stringRepeat
});

var STARTS_WITH = 'startsWith';
var $startsWith = ''[STARTS_WITH];

_export(_export.P + _export.F * _failsIsRegexp(STARTS_WITH), 'String', {
  startsWith: function startsWith(searchString /* , position = 0 */) {
    var that = _stringContext(this, searchString, STARTS_WITH);
    var index = _toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
    var search = String(searchString);
    return $startsWith
      ? $startsWith.call(that, search, index)
      : that.slice(index, index + search.length) === search;
  }
});

var quot = /"/g;
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
var createHTML = function (string, tag, attribute, value) {
  var S = String(_defined(string));
  var p1 = '<' + tag;
  if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};
var _stringHtml = function (NAME, exec) {
  var O = {};
  O[NAME] = exec(createHTML);
  _export(_export.P + _export.F * _fails(function () {
    var test = ''[NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  }), 'String', O);
};

// B.2.3.2 String.prototype.anchor(name)
_stringHtml('anchor', function (createHTML) {
  return function anchor(name) {
    return createHTML(this, 'a', 'name', name);
  };
});

// B.2.3.3 String.prototype.big()
_stringHtml('big', function (createHTML) {
  return function big() {
    return createHTML(this, 'big', '', '');
  };
});

// B.2.3.4 String.prototype.blink()
_stringHtml('blink', function (createHTML) {
  return function blink() {
    return createHTML(this, 'blink', '', '');
  };
});

// B.2.3.5 String.prototype.bold()
_stringHtml('bold', function (createHTML) {
  return function bold() {
    return createHTML(this, 'b', '', '');
  };
});

// B.2.3.6 String.prototype.fixed()
_stringHtml('fixed', function (createHTML) {
  return function fixed() {
    return createHTML(this, 'tt', '', '');
  };
});

// B.2.3.7 String.prototype.fontcolor(color)
_stringHtml('fontcolor', function (createHTML) {
  return function fontcolor(color) {
    return createHTML(this, 'font', 'color', color);
  };
});

// B.2.3.8 String.prototype.fontsize(size)
_stringHtml('fontsize', function (createHTML) {
  return function fontsize(size) {
    return createHTML(this, 'font', 'size', size);
  };
});

// B.2.3.9 String.prototype.italics()
_stringHtml('italics', function (createHTML) {
  return function italics() {
    return createHTML(this, 'i', '', '');
  };
});

// B.2.3.10 String.prototype.link(url)
_stringHtml('link', function (createHTML) {
  return function link(url) {
    return createHTML(this, 'a', 'href', url);
  };
});

// B.2.3.11 String.prototype.small()
_stringHtml('small', function (createHTML) {
  return function small() {
    return createHTML(this, 'small', '', '');
  };
});

// B.2.3.12 String.prototype.strike()
_stringHtml('strike', function (createHTML) {
  return function strike() {
    return createHTML(this, 'strike', '', '');
  };
});

// B.2.3.13 String.prototype.sub()
_stringHtml('sub', function (createHTML) {
  return function sub() {
    return createHTML(this, 'sub', '', '');
  };
});

// B.2.3.14 String.prototype.sup()
_stringHtml('sup', function (createHTML) {
  return function sup() {
    return createHTML(this, 'sup', '', '');
  };
});

// 20.3.3.1 / 15.9.4.4 Date.now()


_export(_export.S, 'Date', { now: function () { return new Date().getTime(); } });

_export(_export.P + _export.F * _fails(function () {
  return new Date(NaN).toJSON() !== null
    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;
}), 'Date', {
  // eslint-disable-next-line no-unused-vars
  toJSON: function toJSON(key) {
    var O = _toObject(this);
    var pv = _toPrimitive(O);
    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
  }
});

// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()

var getTime = Date.prototype.getTime;
var $toISOString = Date.prototype.toISOString;

var lz = function (num) {
  return num > 9 ? num : '0' + num;
};

// PhantomJS / old WebKit has a broken implementations
var _dateToIsoString = (_fails(function () {
  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
}) || !_fails(function () {
  $toISOString.call(new Date(NaN));
})) ? function toISOString() {
  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
  var d = this;
  var y = d.getUTCFullYear();
  var m = d.getUTCMilliseconds();
  var s = y < 0 ? '-' : y > 9999 ? '+' : '';
  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
    '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
    'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
    ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
} : $toISOString;

// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()



// PhantomJS / old WebKit has a broken implementations
_export(_export.P + _export.F * (Date.prototype.toISOString !== _dateToIsoString), 'Date', {
  toISOString: _dateToIsoString
});

var DateProto = Date.prototype;
var INVALID_DATE = 'Invalid Date';
var TO_STRING = 'toString';
var $toString = DateProto[TO_STRING];
var getTime$1 = DateProto.getTime;
if (new Date(NaN) + '' != INVALID_DATE) {
  _redefine(DateProto, TO_STRING, function toString() {
    var value = getTime$1.call(this);
    // eslint-disable-next-line no-self-compare
    return value === value ? $toString.call(this) : INVALID_DATE;
  });
}

var NUMBER$1 = 'number';

var _dateToPrimitive = function (hint) {
  if (hint !== 'string' && hint !== NUMBER$1 && hint !== 'default') throw TypeError('Incorrect hint');
  return _toPrimitive(_anObject(this), hint != NUMBER$1);
};

var TO_PRIMITIVE$1 = _wks('toPrimitive');
var proto$1 = Date.prototype;

if (!(TO_PRIMITIVE$1 in proto$1)) _hide(proto$1, TO_PRIMITIVE$1, _dateToPrimitive);

// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)


_export(_export.S, 'Array', { isArray: _isArray });

// call something on iterator step with safe closing on error

var _iterCall = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(_anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) _anObject(ret.call(iterator));
    throw e;
  }
};

// check on default Array iterator

var ITERATOR$1 = _wks('iterator');
var ArrayProto = Array.prototype;

var _isArrayIter = function (it) {
  return it !== undefined && (_iterators.Array === it || ArrayProto[ITERATOR$1] === it);
};

var _createProperty = function (object, index, value) {
  if (index in object) _objectDp.f(object, index, _propertyDesc(0, value));
  else object[index] = value;
};

var ITERATOR$2 = _wks('iterator');

var core_getIteratorMethod = _core.getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR$2]
    || it['@@iterator']
    || _iterators[_classof(it)];
};

var ITERATOR$3 = _wks('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR$3]();
  riter['return'] = function () { SAFE_CLOSING = true; };
} catch (e) { /* empty */ }

var _iterDetect = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) return false;
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR$3]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR$3] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};

_export(_export.S + _export.F * !_iterDetect(function (iter) { }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
    var O = _toObject(arrayLike);
    var C = typeof this == 'function' ? this : Array;
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var index = 0;
    var iterFn = core_getIteratorMethod(O);
    var length, result, step, iterator;
    if (mapping) mapfn = _ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if (iterFn != undefined && !(C == Array && _isArrayIter(iterFn))) {
      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
        _createProperty(result, index, mapping ? _iterCall(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = _toLength(O.length);
      for (result = new C(length); length > index; index++) {
        _createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});

// WebKit Array.of isn't generic
_export(_export.S + _export.F * _fails(function () {
  function F() { /* empty */ }
  return !(Array.of.call(F) instanceof F);
}), 'Array', {
  // 22.1.2.3 Array.of( ...items)
  of: function of(/* ...args */) {
    var index = 0;
    var aLen = arguments.length;
    var result = new (typeof this == 'function' ? this : Array)(aLen);
    while (aLen > index) _createProperty(result, index, arguments[index++]);
    result.length = aLen;
    return result;
  }
});

var _strictMethod = function (method, arg) {
  return !!method && _fails(function () {
    // eslint-disable-next-line no-useless-call
    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);
  });
};

// 22.1.3.13 Array.prototype.join(separator)


var arrayJoin = [].join;

// fallback for not array-like strings
_export(_export.P + _export.F * (_iobject != Object || !_strictMethod(arrayJoin)), 'Array', {
  join: function join(separator) {
    return arrayJoin.call(_toIobject(this), separator === undefined ? ',' : separator);
  }
});

var arraySlice$1 = [].slice;

// fallback for not array-like ES3 strings and DOM objects
_export(_export.P + _export.F * _fails(function () {
  if (_html) arraySlice$1.call(_html);
}), 'Array', {
  slice: function slice(begin, end) {
    var len = _toLength(this.length);
    var klass = _cof(this);
    end = end === undefined ? len : end;
    if (klass == 'Array') return arraySlice$1.call(this, begin, end);
    var start = _toAbsoluteIndex(begin, len);
    var upTo = _toAbsoluteIndex(end, len);
    var size = _toLength(upTo - start);
    var cloned = new Array(size);
    var i = 0;
    for (; i < size; i++) cloned[i] = klass == 'String'
      ? this.charAt(start + i)
      : this[start + i];
    return cloned;
  }
});

var $sort = [].sort;
var test$1 = [1, 2, 3];

_export(_export.P + _export.F * (_fails(function () {
  // IE8-
  test$1.sort(undefined);
}) || !_fails(function () {
  // V8 bug
  test$1.sort(null);
  // Old WebKit
}) || !_strictMethod($sort)), 'Array', {
  // 22.1.3.25 Array.prototype.sort(comparefn)
  sort: function sort(comparefn) {
    return comparefn === undefined
      ? $sort.call(_toObject(this))
      : $sort.call(_toObject(this), _aFunction(comparefn));
  }
});

var SPECIES = _wks('species');

var _arraySpeciesConstructor = function (original) {
  var C;
  if (_isArray(original)) {
    C = original.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || _isArray(C.prototype))) C = undefined;
    if (_isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? Array : C;
};

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)


var _arraySpeciesCreate = function (original, length) {
  return new (_arraySpeciesConstructor(original))(length);
};

// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex





var _arrayMethods = function (TYPE, $create) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = $create || _arraySpeciesCreate;
  return function ($this, callbackfn, that) {
    var O = _toObject($this);
    var self = _iobject(O);
    var f = _ctx(callbackfn, that, 3);
    var length = _toLength(self.length);
    var index = 0;
    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var val, res;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      val = self[index];
      res = f(val, index, O);
      if (TYPE) {
        if (IS_MAP) result[index] = res;   // map
        else if (res) switch (TYPE) {
          case 3: return true;             // some
          case 5: return val;              // find
          case 6: return index;            // findIndex
          case 2: result.push(val);        // filter
        } else if (IS_EVERY) return false; // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};

var $forEach = _arrayMethods(0);
var STRICT = _strictMethod([].forEach, true);

_export(_export.P + _export.F * !STRICT, 'Array', {
  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
  forEach: function forEach(callbackfn /* , thisArg */) {
    return $forEach(this, callbackfn, arguments[1]);
  }
});

var $map = _arrayMethods(1);

_export(_export.P + _export.F * !_strictMethod([].map, true), 'Array', {
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
  map: function map(callbackfn /* , thisArg */) {
    return $map(this, callbackfn, arguments[1]);
  }
});

var $filter = _arrayMethods(2);

_export(_export.P + _export.F * !_strictMethod([].filter, true), 'Array', {
  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
  filter: function filter(callbackfn /* , thisArg */) {
    return $filter(this, callbackfn, arguments[1]);
  }
});

var $some = _arrayMethods(3);

_export(_export.P + _export.F * !_strictMethod([].some, true), 'Array', {
  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
  some: function some(callbackfn /* , thisArg */) {
    return $some(this, callbackfn, arguments[1]);
  }
});

var $every = _arrayMethods(4);

_export(_export.P + _export.F * !_strictMethod([].every, true), 'Array', {
  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
  every: function every(callbackfn /* , thisArg */) {
    return $every(this, callbackfn, arguments[1]);
  }
});

var _arrayReduce = function (that, callbackfn, aLen, memo, isRight) {
  _aFunction(callbackfn);
  var O = _toObject(that);
  var self = _iobject(O);
  var length = _toLength(O.length);
  var index = isRight ? length - 1 : 0;
  var i = isRight ? -1 : 1;
  if (aLen < 2) for (;;) {
    if (index in self) {
      memo = self[index];
      index += i;
      break;
    }
    index += i;
    if (isRight ? index < 0 : length <= index) {
      throw TypeError('Reduce of empty array with no initial value');
    }
  }
  for (;isRight ? index >= 0 : length > index; index += i) if (index in self) {
    memo = callbackfn(memo, self[index], index, O);
  }
  return memo;
};

_export(_export.P + _export.F * !_strictMethod([].reduce, true), 'Array', {
  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
  reduce: function reduce(callbackfn /* , initialValue */) {
    return _arrayReduce(this, callbackfn, arguments.length, arguments[1], false);
  }
});

_export(_export.P + _export.F * !_strictMethod([].reduceRight, true), 'Array', {
  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
  reduceRight: function reduceRight(callbackfn /* , initialValue */) {
    return _arrayReduce(this, callbackfn, arguments.length, arguments[1], true);
  }
});

var $indexOf = _arrayIncludes(false);
var $native = [].indexOf;
var NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

_export(_export.P + _export.F * (NEGATIVE_ZERO || !_strictMethod($native)), 'Array', {
  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
    return NEGATIVE_ZERO
      // convert -0 to +0
      ? $native.apply(this, arguments) || 0
      : $indexOf(this, searchElement, arguments[1]);
  }
});

var $native$1 = [].lastIndexOf;
var NEGATIVE_ZERO$1 = !!$native$1 && 1 / [1].lastIndexOf(1, -0) < 0;

_export(_export.P + _export.F * (NEGATIVE_ZERO$1 || !_strictMethod($native$1)), 'Array', {
  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {
    // convert -0 to +0
    if (NEGATIVE_ZERO$1) return $native$1.apply(this, arguments) || 0;
    var O = _toIobject(this);
    var length = _toLength(O.length);
    var index = length - 1;
    if (arguments.length > 1) index = Math.min(index, _toInteger(arguments[1]));
    if (index < 0) index = length + index;
    for (;index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;
    return -1;
  }
});

var _arrayCopyWithin = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {
  var O = _toObject(this);
  var len = _toLength(O.length);
  var to = _toAbsoluteIndex(target, len);
  var from = _toAbsoluteIndex(start, len);
  var end = arguments.length > 2 ? arguments[2] : undefined;
  var count = Math.min((end === undefined ? len : _toAbsoluteIndex(end, len)) - from, len - to);
  var inc = 1;
  if (from < to && to < from + count) {
    inc = -1;
    from += count - 1;
    to += count - 1;
  }
  while (count-- > 0) {
    if (from in O) O[to] = O[from];
    else delete O[to];
    to += inc;
    from += inc;
  } return O;
};

// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = _wks('unscopables');
var ArrayProto$1 = Array.prototype;
if (ArrayProto$1[UNSCOPABLES] == undefined) _hide(ArrayProto$1, UNSCOPABLES, {});
var _addToUnscopables = function (key) {
  ArrayProto$1[UNSCOPABLES][key] = true;
};

// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)


_export(_export.P, 'Array', { copyWithin: _arrayCopyWithin });

_addToUnscopables('copyWithin');

var _arrayFill = function fill(value /* , start = 0, end = @length */) {
  var O = _toObject(this);
  var length = _toLength(O.length);
  var aLen = arguments.length;
  var index = _toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
  var end = aLen > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : _toAbsoluteIndex(end, length);
  while (endPos > index) O[index++] = value;
  return O;
};

// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)


_export(_export.P, 'Array', { fill: _arrayFill });

_addToUnscopables('fill');

// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)

var $find = _arrayMethods(5);
var KEY = 'find';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function () { forced = false; });
_export(_export.P + _export.F * forced, 'Array', {
  find: function find(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
_addToUnscopables(KEY);

// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)

var $find$1 = _arrayMethods(6);
var KEY$1 = 'findIndex';
var forced$1 = true;
// Shouldn't skip holes
if (KEY$1 in []) Array(1)[KEY$1](function () { forced$1 = false; });
_export(_export.P + _export.F * forced$1, 'Array', {
  findIndex: function findIndex(callbackfn /* , that = undefined */) {
    return $find$1(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
_addToUnscopables(KEY$1);

var SPECIES$1 = _wks('species');

var _setSpecies = function (KEY) {
  var C = _global[KEY];
  if (_descriptors && C && !C[SPECIES$1]) _objectDp.f(C, SPECIES$1, {
    configurable: true,
    get: function () { return this; }
  });
};

_setSpecies('Array');

var _iterStep = function (done, value) {
  return { value: value, done: !!done };
};

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
var es6_array_iterator = _iterDefine(Array, 'Array', function (iterated, kind) {
  this._t = _toIobject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return _iterStep(1);
  }
  if (kind == 'keys') return _iterStep(0, index);
  if (kind == 'values') return _iterStep(0, O[index]);
  return _iterStep(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
_iterators.Arguments = _iterators.Array;

_addToUnscopables('keys');
_addToUnscopables('values');
_addToUnscopables('entries');

// 21.2.5.3 get RegExp.prototype.flags

var _flags = function () {
  var that = _anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};

var dP$4 = _objectDp.f;
var gOPN$3 = _objectGopn.f;


var $RegExp = _global.RegExp;
var Base$1 = $RegExp;
var proto$2 = $RegExp.prototype;
var re1 = /a/g;
var re2 = /a/g;
// "new" creates a new object, old webkit buggy here
var CORRECT_NEW = new $RegExp(re1) !== re1;

if (_descriptors && (!CORRECT_NEW || _fails(function () {
  re2[_wks('match')] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))) {
  $RegExp = function RegExp(p, f) {
    var tiRE = this instanceof $RegExp;
    var piRE = _isRegexp(p);
    var fiU = f === undefined;
    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
      : _inheritIfRequired(CORRECT_NEW
        ? new Base$1(piRE && !fiU ? p.source : p, f)
        : Base$1((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? _flags.call(p) : f)
      , tiRE ? this : proto$2, $RegExp);
  };
  var proxy = function (key) {
    key in $RegExp || dP$4($RegExp, key, {
      configurable: true,
      get: function () { return Base$1[key]; },
      set: function (it) { Base$1[key] = it; }
    });
  };
  for (var keys$2 = gOPN$3(Base$1), i$1 = 0; keys$2.length > i$1;) proxy(keys$2[i$1++]);
  proto$2.constructor = $RegExp;
  $RegExp.prototype = proto$2;
  _redefine(_global, 'RegExp', $RegExp);
}

_setSpecies('RegExp');

// 21.2.5.3 get RegExp.prototype.flags()
if (_descriptors && /./g.flags != 'g') _objectDp.f(RegExp.prototype, 'flags', {
  configurable: true,
  get: _flags
});

var TO_STRING$1 = 'toString';
var $toString$1 = /./[TO_STRING$1];

var define = function (fn) {
  _redefine(RegExp.prototype, TO_STRING$1, fn, true);
};

// 21.2.5.14 RegExp.prototype.toString()
if (_fails(function () { return $toString$1.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {
  define(function toString() {
    var R = _anObject(this);
    return '/'.concat(R.source, '/',
      'flags' in R ? R.flags : !_descriptors && R instanceof RegExp ? _flags.call(R) : undefined);
  });
// FF44- RegExp#toString has a wrong name
} else if ($toString$1.name != TO_STRING$1) {
  define(function toString() {
    return $toString$1.call(this);
  });
}

var _fixReWks = function (KEY, length, exec) {
  var SYMBOL = _wks(KEY);
  var fns = exec(_defined, SYMBOL, ''[KEY]);
  var strfn = fns[0];
  var rxfn = fns[1];
  if (_fails(function () {
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) != 7;
  })) {
    _redefine(String.prototype, KEY, strfn);
    _hide(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function (string, arg) { return rxfn.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function (string) { return rxfn.call(string, this); }
    );
  }
};

// @@match logic
_fixReWks('match', 1, function (defined, MATCH, $match) {
  // 21.1.3.11 String.prototype.match(regexp)
  return [function match(regexp) {
    var O = defined(this);
    var fn = regexp == undefined ? undefined : regexp[MATCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
  }, $match];
});

// @@replace logic
_fixReWks('replace', 2, function (defined, REPLACE, $replace) {
  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
  return [function replace(searchValue, replaceValue) {
    var O = defined(this);
    var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
    return fn !== undefined
      ? fn.call(searchValue, O, replaceValue)
      : $replace.call(String(O), searchValue, replaceValue);
  }, $replace];
});

// @@search logic
_fixReWks('search', 1, function (defined, SEARCH, $search) {
  // 21.1.3.15 String.prototype.search(regexp)
  return [function search(regexp) {
    var O = defined(this);
    var fn = regexp == undefined ? undefined : regexp[SEARCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
  }, $search];
});

// @@split logic
_fixReWks('split', 2, function (defined, SPLIT, $split) {
  var isRegExp = _isRegexp;
  var _split = $split;
  var $push = [].push;
  var $SPLIT = 'split';
  var LENGTH = 'length';
  var LAST_INDEX = 'lastIndex';
  if (
    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
    ''[$SPLIT](/.?/)[LENGTH]
  ) {
    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group
    // based on es5-shim implementation, need to rework it
    $split = function (separator, limit) {
      var string = String(this);
      if (separator === undefined && limit === 0) return [];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) return _split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var separator2, match, lastIndex, lastLength, i;
      // Doesn't need flags gy, but they don't hurt
      if (!NPCG) separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
      while (match = separatorCopy.exec(string)) {
        // `separatorCopy.lastIndex` is not reliable cross-browser
        lastIndex = match.index + match[0][LENGTH];
        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index));
          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG
          // eslint-disable-next-line no-loop-func
          if (!NPCG && match[LENGTH] > 1) match[0].replace(separator2, function () {
            for (i = 1; i < arguments[LENGTH] - 2; i++) if (arguments[i] === undefined) match[i] = undefined;
          });
          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if (output[LENGTH] >= splitLimit) break;
        }
        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }
      if (lastLastIndex === string[LENGTH]) {
        if (lastLength || !separatorCopy.test('')) output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    };
  // Chakra, V8
  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
    $split = function (separator, limit) {
      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
    };
  }
  // 21.1.3.17 String.prototype.split(separator, limit)
  return [function split(separator, limit) {
    var O = defined(this);
    var fn = separator == undefined ? undefined : separator[SPLIT];
    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
  }, $split];
});

var _anInstance = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};

var _forOf = createCommonjsModule(function (module) {
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () { return iterable; } : core_getIteratorMethod(iterable);
  var f = _ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if (_isArrayIter(iterFn)) for (length = _toLength(iterable.length); length > index; index++) {
    result = entries ? f(_anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) return result;
  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = _iterCall(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) return result;
  }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;
});

// 7.3.20 SpeciesConstructor(O, defaultConstructor)


var SPECIES$2 = _wks('species');
var _speciesConstructor = function (O, D) {
  var C = _anObject(O).constructor;
  var S;
  return C === undefined || (S = _anObject(C)[SPECIES$2]) == undefined ? D : _aFunction(S);
};

var process = _global.process;
var setTask = _global.setImmediate;
var clearTask = _global.clearImmediate;
var MessageChannel = _global.MessageChannel;
var Dispatch = _global.Dispatch;
var counter = 0;
var queue$1 = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue$1.hasOwnProperty(id)) {
    var fn = queue$1[id];
    delete queue$1[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var args = [];
    var i = 1;
    while (arguments.length > i) args.push(arguments[i++]);
    queue$1[++counter] = function () {
      // eslint-disable-next-line no-new-func
      _invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue$1[id];
  };
  // Node.js 0.8-
  if (_cof(process) == 'process') {
    defer = function (id) {
      process.nextTick(_ctx(run, id, 1));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(_ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = _ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (_global.addEventListener && typeof postMessage == 'function' && !_global.importScripts) {
    defer = function (id) {
      _global.postMessage(id + '', '*');
    };
    _global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in _domCreate('script')) {
    defer = function (id) {
      _html.appendChild(_domCreate('script'))[ONREADYSTATECHANGE] = function () {
        _html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(_ctx(run, id, 1), 0);
    };
  }
}
var _task = {
  set: setTask,
  clear: clearTask
};

var macrotask = _task.set;
var Observer = _global.MutationObserver || _global.WebKitMutationObserver;
var process$1 = _global.process;
var Promise$1 = _global.Promise;
var isNode = _cof(process$1) == 'process';

var _microtask = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode && (parent = process$1.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // Node.js
  if (isNode) {
    notify = function () {
      process$1.nextTick(flush);
    };
  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
  } else if (Observer && !(_global.navigator && _global.navigator.standalone)) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise$1 && Promise$1.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    var promise = Promise$1.resolve(undefined);
    notify = function () {
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(_global, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) last.next = task;
    if (!head) {
      head = task;
      notify();
    } last = task;
  };
};

// 25.4.1.5 NewPromiseCapability(C)


function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = _aFunction(resolve);
  this.reject = _aFunction(reject);
}

var f$7 = function (C) {
  return new PromiseCapability(C);
};

var _newPromiseCapability = {
	f: f$7
};

var _perform = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};

var navigator$1 = _global.navigator;

var _userAgent = navigator$1 && navigator$1.userAgent || '';

var _promiseResolve = function (C, x) {
  _anObject(C);
  if (_isObject(x) && x.constructor === C) return x;
  var promiseCapability = _newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};

var _redefineAll = function (target, src, safe) {
  for (var key in src) _redefine(target, key, src[key], safe);
  return target;
};

var task = _task.set;
var microtask = _microtask();




var PROMISE = 'Promise';
var TypeError$1 = _global.TypeError;
var process$2 = _global.process;
var versions$1 = process$2 && process$2.versions;
var v8 = versions$1 && versions$1.v8 || '';
var $Promise = _global[PROMISE];
var isNode$1 = _classof(process$2) == 'process';
var empty = function () { /* empty */ };
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = _newPromiseCapability.f;

var USE_NATIVE$1 = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[_wks('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode$1 || typeof PromiseRejectionEvent == 'function')
      && promise.then(empty) instanceof FakePromise
      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
      // we can't detect it synchronously, so just check versions
      && v8.indexOf('6.6') !== 0
      && _userAgent.indexOf('Chrome/66') === -1;
  } catch (e) { /* empty */ }
}();

// helpers
var isThenable = function (it) {
  var then;
  return _isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) return;
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) onHandleUnhandled(promise);
            promise._h = 1;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // may throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError$1('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (e) {
        if (domain && !exited) domain.exit();
        reject(e);
      }
    };
    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) onUnhandled(promise);
  });
};
var onUnhandled = function (promise) {
  task.call(_global, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = _perform(function () {
        if (isNode$1) {
          process$2.emit('unhandledRejection', value, promise);
        } else if (handler = _global.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = _global.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode$1 || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if (unhandled && result.e) throw result.v;
  });
};
var isUnhandled = function (promise) {
  return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function (promise) {
  task.call(_global, function () {
    var handler;
    if (isNode$1) {
      process$2.emit('rejectionHandled', promise);
    } else if (handler = _global.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) throw TypeError$1("Promise can't be resolved itself");
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, _ctx($resolve, wrapper, 1), _ctx($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE$1) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    _anInstance(this, $Promise, PROMISE, '_h');
    _aFunction(executor);
    Internal.call(this);
    try {
      executor(_ctx($resolve, this, 1), _ctx($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = _redefineAll($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(_speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode$1 ? process$2.domain : undefined;
      this._c.push(reaction);
      if (this._a) this._a.push(reaction);
      if (this._s) notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = _ctx($resolve, promise, 1);
    this.reject = _ctx($reject, promise, 1);
  };
  _newPromiseCapability.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };
}

_export(_export.G + _export.W + _export.F * !USE_NATIVE$1, { Promise: $Promise });
_setToStringTag($Promise, PROMISE);
_setSpecies(PROMISE);
Wrapper = _core[PROMISE];

// statics
_export(_export.S + _export.F * !USE_NATIVE$1, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
_export(_export.S + _export.F * (_library || !USE_NATIVE$1), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return _promiseResolve(_library && this === Wrapper ? $Promise : this, x);
  }
});
_export(_export.S + _export.F * !(USE_NATIVE$1 && _iterDetect(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = _perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      _forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) reject(result.v);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = _perform(function () {
      _forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) reject(result.v);
    return capability.promise;
  }
});

var _validateCollection = function (it, TYPE) {
  if (!_isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
  return it;
};

var dP$5 = _objectDp.f;









var fastKey = _meta.fastKey;

var SIZE$1 = _descriptors ? '_s' : 'size';

var getEntry = function (that, key) {
  // fast case
  var index = fastKey(key);
  var entry;
  if (index !== 'F') return that._i[index];
  // frozen object case
  for (entry = that._f; entry; entry = entry.n) {
    if (entry.k == key) return entry;
  }
};

var _collectionStrong = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      _anInstance(that, C, NAME, '_i');
      that._t = NAME;         // collection type
      that._i = _objectCreate(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE$1] = 0;         // size
      if (iterable != undefined) _forOf(iterable, IS_MAP, that[ADDER], that);
    });
    _redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear() {
        for (var that = _validateCollection(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {
          entry.r = true;
          if (entry.p) entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE$1] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function (key) {
        var that = _validateCollection(this, NAME);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.n;
          var prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if (prev) prev.n = next;
          if (next) next.p = prev;
          if (that._f == entry) that._f = next;
          if (that._l == entry) that._l = prev;
          that[SIZE$1]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /* , that = undefined */) {
        _validateCollection(this, NAME);
        var f = _ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
        var entry;
        while (entry = entry ? entry.n : this._f) {
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while (entry && entry.r) entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key) {
        return !!getEntry(_validateCollection(this, NAME), key);
      }
    });
    if (_descriptors) dP$5(C.prototype, 'size', {
      get: function () {
        return _validateCollection(this, NAME)[SIZE$1];
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var entry = getEntry(that, key);
    var prev, index;
    // change existing entry
    if (entry) {
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if (!that._f) that._f = entry;
      if (prev) prev.n = entry;
      that[SIZE$1]++;
      // add to index
      if (index !== 'F') that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function (C, NAME, IS_MAP) {
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    _iterDefine(C, NAME, function (iterated, kind) {
      this._t = _validateCollection(iterated, NAME); // target
      this._k = kind;                     // kind
      this._l = undefined;                // previous
    }, function () {
      var that = this;
      var kind = that._k;
      var entry = that._l;
      // revert to the last existing entry
      while (entry && entry.r) entry = entry.p;
      // get next entry
      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
        // or finish the iteration
        that._t = undefined;
        return _iterStep(1);
      }
      // return step by kind
      if (kind == 'keys') return _iterStep(0, entry.k);
      if (kind == 'values') return _iterStep(0, entry.v);
      return _iterStep(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    _setSpecies(NAME);
  }
};

var _collection = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
  var Base = _global[NAME];
  var C = Base;
  var ADDER = IS_MAP ? 'set' : 'add';
  var proto = C && C.prototype;
  var O = {};
  var fixMethod = function (KEY) {
    var fn = proto[KEY];
    _redefine(proto, KEY,
      KEY == 'delete' ? function (a) {
        return IS_WEAK && !_isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'has' ? function has(a) {
        return IS_WEAK && !_isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'get' ? function get(a) {
        return IS_WEAK && !_isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }
        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }
    );
  };
  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !_fails(function () {
    new C().entries().next();
  }))) {
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    _redefineAll(C.prototype, methods);
    _meta.NEED = true;
  } else {
    var instance = new C();
    // early implementations not supports chaining
    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
    var THROWS_ON_PRIMITIVES = _fails(function () { instance.has(1); });
    // most early implementations doesn't supports iterables, most modern - not close it correctly
    var ACCEPT_ITERABLES = _iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new
    // for early implementations -0 and +0 not the same
    var BUGGY_ZERO = !IS_WEAK && _fails(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new C();
      var index = 5;
      while (index--) $instance[ADDER](index, index);
      return !$instance.has(-0);
    });
    if (!ACCEPT_ITERABLES) {
      C = wrapper(function (target, iterable) {
        _anInstance(target, C, NAME);
        var that = _inheritIfRequired(new Base(), target, C);
        if (iterable != undefined) _forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }
    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
    // weak collections should not contains .clear method
    if (IS_WEAK && proto.clear) delete proto.clear;
  }

  _setToStringTag(C, NAME);

  O[NAME] = C;
  _export(_export.G + _export.W + _export.F * (C != Base), O);

  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

  return C;
};

var MAP = 'Map';

// 23.1 Map Objects
var es6_map = _collection(MAP, function (get) {
  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key) {
    var entry = _collectionStrong.getEntry(_validateCollection(this, MAP), key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value) {
    return _collectionStrong.def(_validateCollection(this, MAP), key === 0 ? 0 : key, value);
  }
}, _collectionStrong, true);

var SET = 'Set';

// 23.2 Set Objects
var es6_set = _collection(SET, function (get) {
  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value) {
    return _collectionStrong.def(_validateCollection(this, SET), value = value === 0 ? 0 : value, value);
  }
}, _collectionStrong);

var getWeak = _meta.getWeak;







var arrayFind = _arrayMethods(5);
var arrayFindIndex = _arrayMethods(6);
var id$2 = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function (that) {
  return that._l || (that._l = new UncaughtFrozenStore());
};
var UncaughtFrozenStore = function () {
  this.a = [];
};
var findUncaughtFrozen = function (store, key) {
  return arrayFind(store.a, function (it) {
    return it[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function (key) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) return entry[1];
  },
  has: function (key) {
    return !!findUncaughtFrozen(this, key);
  },
  set: function (key, value) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) entry[1] = value;
    else this.a.push([key, value]);
  },
  'delete': function (key) {
    var index = arrayFindIndex(this.a, function (it) {
      return it[0] === key;
    });
    if (~index) this.a.splice(index, 1);
    return !!~index;
  }
};

var _collectionWeak = {
  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
    var C = wrapper(function (that, iterable) {
      _anInstance(that, C, NAME, '_i');
      that._t = NAME;      // collection type
      that._i = id$2++;      // collection id
      that._l = undefined; // leak store for uncaught frozen objects
      if (iterable != undefined) _forOf(iterable, IS_MAP, that[ADDER], that);
    });
    _redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function (key) {
        if (!_isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(_validateCollection(this, NAME))['delete'](key);
        return data && _has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key) {
        if (!_isObject(key)) return false;
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(_validateCollection(this, NAME)).has(key);
        return data && _has(data, this._i);
      }
    });
    return C;
  },
  def: function (that, key, value) {
    var data = getWeak(_anObject(key), true);
    if (data === true) uncaughtFrozenStore(that).set(key, value);
    else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};

var es6_weakMap = createCommonjsModule(function (module) {
var each = _arrayMethods(0);







var WEAK_MAP = 'WeakMap';
var getWeak = _meta.getWeak;
var isExtensible = Object.isExtensible;
var uncaughtFrozenStore = _collectionWeak.ufstore;
var tmp = {};
var InternalMap;

var wrapper = function (get) {
  return function WeakMap() {
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key) {
    if (_isObject(key)) {
      var data = getWeak(key);
      if (data === true) return uncaughtFrozenStore(_validateCollection(this, WEAK_MAP)).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value) {
    return _collectionWeak.def(_validateCollection(this, WEAK_MAP), key, value);
  }
};

// 23.3 WeakMap Objects
var $WeakMap = module.exports = _collection(WEAK_MAP, wrapper, methods, _collectionWeak, true, true);

// IE11 WeakMap frozen keys fix
if (_fails(function () { return new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7; })) {
  InternalMap = _collectionWeak.getConstructor(wrapper, WEAK_MAP);
  _objectAssign(InternalMap.prototype, methods);
  _meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function (key) {
    var proto = $WeakMap.prototype;
    var method = proto[key];
    _redefine(proto, key, function (a, b) {
      // store frozen objects on internal weakmap shim
      if (_isObject(a) && !isExtensible(a)) {
        if (!this._f) this._f = new InternalMap();
        var result = this._f[key](a, b);
        return key == 'set' ? this : result;
      // store all the rest on native weakmap
      } return method.call(this, a, b);
    });
  });
}
});

var WEAK_SET = 'WeakSet';

// 23.4 WeakSet Objects
_collection(WEAK_SET, function (get) {
  return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.4.3.1 WeakSet.prototype.add(value)
  add: function add(value) {
    return _collectionWeak.def(_validateCollection(this, WEAK_SET), value, true);
  }
}, _collectionWeak, false, true);

var TYPED = _uid('typed_array');
var VIEW = _uid('view');
var ABV = !!(_global.ArrayBuffer && _global.DataView);
var CONSTR = ABV;
var i$2 = 0;
var l = 9;
var Typed;

var TypedArrayConstructors = (
  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
).split(',');

while (i$2 < l) {
  if (Typed = _global[TypedArrayConstructors[i$2++]]) {
    _hide(Typed.prototype, TYPED, true);
    _hide(Typed.prototype, VIEW, true);
  } else CONSTR = false;
}

var _typed = {
  ABV: ABV,
  CONSTR: CONSTR,
  TYPED: TYPED,
  VIEW: VIEW
};

// https://tc39.github.io/ecma262/#sec-toindex


var _toIndex = function (it) {
  if (it === undefined) return 0;
  var number = _toInteger(it);
  var length = _toLength(number);
  if (number !== length) throw RangeError('Wrong length!');
  return length;
};

var _typedBuffer = createCommonjsModule(function (module, exports) {











var gOPN = _objectGopn.f;
var dP = _objectDp.f;


var ARRAY_BUFFER = 'ArrayBuffer';
var DATA_VIEW = 'DataView';
var PROTOTYPE = 'prototype';
var WRONG_LENGTH = 'Wrong length!';
var WRONG_INDEX = 'Wrong index!';
var $ArrayBuffer = _global[ARRAY_BUFFER];
var $DataView = _global[DATA_VIEW];
var Math = _global.Math;
var RangeError = _global.RangeError;
// eslint-disable-next-line no-shadow-restricted-names
var Infinity = _global.Infinity;
var BaseBuffer = $ArrayBuffer;
var abs = Math.abs;
var pow = Math.pow;
var floor = Math.floor;
var log = Math.log;
var LN2 = Math.LN2;
var BUFFER = 'buffer';
var BYTE_LENGTH = 'byteLength';
var BYTE_OFFSET = 'byteOffset';
var $BUFFER = _descriptors ? '_b' : BUFFER;
var $LENGTH = _descriptors ? '_l' : BYTE_LENGTH;
var $OFFSET = _descriptors ? '_o' : BYTE_OFFSET;

// IEEE754 conversions based on https://github.com/feross/ieee754
function packIEEE754(value, mLen, nBytes) {
  var buffer = new Array(nBytes);
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
  var i = 0;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  var e, m, c;
  value = abs(value);
  // eslint-disable-next-line no-self-compare
  if (value != value || value === Infinity) {
    // eslint-disable-next-line no-self-compare
    m = value != value ? 1 : 0;
    e = eMax;
  } else {
    e = floor(log(value) / LN2);
    if (value * (c = pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }
    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * pow(2, eBias - 1) * pow(2, mLen);
      e = 0;
    }
  }
  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
  e = e << mLen | m;
  eLen += mLen;
  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
  buffer[--i] |= s * 128;
  return buffer;
}
function unpackIEEE754(buffer, mLen, nBytes) {
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = eLen - 7;
  var i = nBytes - 1;
  var s = buffer[i--];
  var e = s & 127;
  var m;
  s >>= 7;
  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : s ? -Infinity : Infinity;
  } else {
    m = m + pow(2, mLen);
    e = e - eBias;
  } return (s ? -1 : 1) * m * pow(2, e - mLen);
}

function unpackI32(bytes) {
  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
}
function packI8(it) {
  return [it & 0xff];
}
function packI16(it) {
  return [it & 0xff, it >> 8 & 0xff];
}
function packI32(it) {
  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
}
function packF64(it) {
  return packIEEE754(it, 52, 8);
}
function packF32(it) {
  return packIEEE754(it, 23, 4);
}

function addGetter(C, key, internal) {
  dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });
}

function get(view, bytes, index, isLittleEndian) {
  var numIndex = +index;
  var intIndex = _toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = store.slice(start, start + bytes);
  return isLittleEndian ? pack : pack.reverse();
}
function set(view, bytes, index, conversion, value, isLittleEndian) {
  var numIndex = +index;
  var intIndex = _toIndex(numIndex);
  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b;
  var start = intIndex + view[$OFFSET];
  var pack = conversion(+value);
  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
}

if (!_typed.ABV) {
  $ArrayBuffer = function ArrayBuffer(length) {
    _anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
    var byteLength = _toIndex(length);
    this._b = _arrayFill.call(new Array(byteLength), 0);
    this[$LENGTH] = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength) {
    _anInstance(this, $DataView, DATA_VIEW);
    _anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = buffer[$LENGTH];
    var offset = _toInteger(byteOffset);
    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
    byteLength = byteLength === undefined ? bufferLength - offset : _toLength(byteLength);
    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
    this[$BUFFER] = buffer;
    this[$OFFSET] = offset;
    this[$LENGTH] = byteLength;
  };

  if (_descriptors) {
    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
    addGetter($DataView, BUFFER, '_b');
    addGetter($DataView, BYTE_LENGTH, '_l');
    addGetter($DataView, BYTE_OFFSET, '_o');
  }

  _redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset) {
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset) {
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1]));
    },
    getUint32: function getUint32(byteOffset /* , littleEndian */) {
      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
    },
    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
    },
    setInt8: function setInt8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setUint8: function setUint8(byteOffset, value) {
      set(this, 1, byteOffset, packI8, value);
    },
    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packF32, value, arguments[2]);
    },
    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
      set(this, 8, byteOffset, packF64, value, arguments[2]);
    }
  });
} else {
  if (!_fails(function () {
    $ArrayBuffer(1);
  }) || !_fails(function () {
    new $ArrayBuffer(-1); // eslint-disable-line no-new
  }) || _fails(function () {
    new $ArrayBuffer(); // eslint-disable-line no-new
    new $ArrayBuffer(1.5); // eslint-disable-line no-new
    new $ArrayBuffer(NaN); // eslint-disable-line no-new
    return $ArrayBuffer.name != ARRAY_BUFFER;
  })) {
    $ArrayBuffer = function ArrayBuffer(length) {
      _anInstance(this, $ArrayBuffer);
      return new BaseBuffer(_toIndex(length));
    };
    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
      if (!((key = keys[j++]) in $ArrayBuffer)) _hide($ArrayBuffer, key, BaseBuffer[key]);
    }
    ArrayBufferProto.constructor = $ArrayBuffer;
  }
  // iOS Safari 7.x bug
  var view = new $DataView(new $ArrayBuffer(2));
  var $setInt8 = $DataView[PROTOTYPE].setInt8;
  view.setInt8(0, 2147483648);
  view.setInt8(1, 2147483649);
  if (view.getInt8(0) || !view.getInt8(1)) _redefineAll($DataView[PROTOTYPE], {
    setInt8: function setInt8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value) {
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, true);
}
_setToStringTag($ArrayBuffer, ARRAY_BUFFER);
_setToStringTag($DataView, DATA_VIEW);
_hide($DataView[PROTOTYPE], _typed.VIEW, true);
exports[ARRAY_BUFFER] = $ArrayBuffer;
exports[DATA_VIEW] = $DataView;
});

var ArrayBuffer = _global.ArrayBuffer;

var $ArrayBuffer = _typedBuffer.ArrayBuffer;
var $DataView = _typedBuffer.DataView;
var $isView = _typed.ABV && ArrayBuffer.isView;
var $slice = $ArrayBuffer.prototype.slice;
var VIEW$1 = _typed.VIEW;
var ARRAY_BUFFER = 'ArrayBuffer';

_export(_export.G + _export.W + _export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });

_export(_export.S + _export.F * !_typed.CONSTR, ARRAY_BUFFER, {
  // 24.1.3.1 ArrayBuffer.isView(arg)
  isView: function isView(it) {
    return $isView && $isView(it) || _isObject(it) && VIEW$1 in it;
  }
});

_export(_export.P + _export.U + _export.F * _fails(function () {
  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
}), ARRAY_BUFFER, {
  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
  slice: function slice(start, end) {
    if ($slice !== undefined && end === undefined) return $slice.call(_anObject(this), start); // FF fix
    var len = _anObject(this).byteLength;
    var first = _toAbsoluteIndex(start, len);
    var fin = _toAbsoluteIndex(end === undefined ? len : end, len);
    var result = new (_speciesConstructor(this, $ArrayBuffer))(_toLength(fin - first));
    var viewS = new $DataView(this);
    var viewT = new $DataView(result);
    var index = 0;
    while (first < fin) {
      viewT.setUint8(index++, viewS.getUint8(first++));
    } return result;
  }
});

_setSpecies(ARRAY_BUFFER);

_export(_export.G + _export.W + _export.F * !_typed.ABV, {
  DataView: _typedBuffer.DataView
});

var _typedArray = createCommonjsModule(function (module) {
if (_descriptors) {
  var global = _global;
  var fails = _fails;
  var $export = _export;
  var $typed = _typed;
  var $buffer = _typedBuffer;
  var ctx = _ctx;
  var anInstance = _anInstance;
  var propertyDesc = _propertyDesc;
  var hide = _hide;
  var redefineAll = _redefineAll;
  var toInteger = _toInteger;
  var toLength = _toLength;
  var toIndex = _toIndex;
  var toAbsoluteIndex = _toAbsoluteIndex;
  var toPrimitive = _toPrimitive;
  var has = _has;
  var classof = _classof;
  var isObject = _isObject;
  var toObject = _toObject;
  var isArrayIter = _isArrayIter;
  var create = _objectCreate;
  var getPrototypeOf = _objectGpo;
  var gOPN = _objectGopn.f;
  var getIterFn = core_getIteratorMethod;
  var uid = _uid;
  var wks = _wks;
  var createArrayMethod = _arrayMethods;
  var createArrayIncludes = _arrayIncludes;
  var speciesConstructor = _speciesConstructor;
  var ArrayIterators = es6_array_iterator;
  var Iterators = _iterators;
  var $iterDetect = _iterDetect;
  var setSpecies = _setSpecies;
  var arrayFill = _arrayFill;
  var arrayCopyWithin = _arrayCopyWithin;
  var $DP = _objectDp;
  var $GOPD = _objectGopd;
  var dP = $DP.f;
  var gOPD = $GOPD.f;
  var RangeError = global.RangeError;
  var TypeError = global.TypeError;
  var Uint8Array = global.Uint8Array;
  var ARRAY_BUFFER = 'ArrayBuffer';
  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
  var PROTOTYPE = 'prototype';
  var ArrayProto = Array[PROTOTYPE];
  var $ArrayBuffer = $buffer.ArrayBuffer;
  var $DataView = $buffer.DataView;
  var arrayForEach = createArrayMethod(0);
  var arrayFilter = createArrayMethod(2);
  var arraySome = createArrayMethod(3);
  var arrayEvery = createArrayMethod(4);
  var arrayFind = createArrayMethod(5);
  var arrayFindIndex = createArrayMethod(6);
  var arrayIncludes = createArrayIncludes(true);
  var arrayIndexOf = createArrayIncludes(false);
  var arrayValues = ArrayIterators.values;
  var arrayKeys = ArrayIterators.keys;
  var arrayEntries = ArrayIterators.entries;
  var arrayLastIndexOf = ArrayProto.lastIndexOf;
  var arrayReduce = ArrayProto.reduce;
  var arrayReduceRight = ArrayProto.reduceRight;
  var arrayJoin = ArrayProto.join;
  var arraySort = ArrayProto.sort;
  var arraySlice = ArrayProto.slice;
  var arrayToString = ArrayProto.toString;
  var arrayToLocaleString = ArrayProto.toLocaleString;
  var ITERATOR = wks('iterator');
  var TAG = wks('toStringTag');
  var TYPED_CONSTRUCTOR = uid('typed_constructor');
  var DEF_CONSTRUCTOR = uid('def_constructor');
  var ALL_CONSTRUCTORS = $typed.CONSTR;
  var TYPED_ARRAY = $typed.TYPED;
  var VIEW = $typed.VIEW;
  var WRONG_LENGTH = 'Wrong length!';

  var $map = createArrayMethod(1, function (O, length) {
    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
  });

  var LITTLE_ENDIAN = fails(function () {
    // eslint-disable-next-line no-undef
    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
  });

  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
    new Uint8Array(1).set({});
  });

  var toOffset = function (it, BYTES) {
    var offset = toInteger(it);
    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
    return offset;
  };

  var validate = function (it) {
    if (isObject(it) && TYPED_ARRAY in it) return it;
    throw TypeError(it + ' is not a typed array!');
  };

  var allocate = function (C, length) {
    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
      throw TypeError('It is not a typed array constructor!');
    } return new C(length);
  };

  var speciesFromList = function (O, list) {
    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
  };

  var fromList = function (C, list) {
    var index = 0;
    var length = list.length;
    var result = allocate(C, length);
    while (length > index) result[index] = list[index++];
    return result;
  };

  var addGetter = function (it, key, internal) {
    dP(it, key, { get: function () { return this._d[internal]; } });
  };

  var $from = function from(source /* , mapfn, thisArg */) {
    var O = toObject(source);
    var aLen = arguments.length;
    var mapfn = aLen > 1 ? arguments[1] : undefined;
    var mapping = mapfn !== undefined;
    var iterFn = getIterFn(O);
    var i, length, values, result, step, iterator;
    if (iterFn != undefined && !isArrayIter(iterFn)) {
      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
        values.push(step.value);
      } O = values;
    }
    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
      result[i] = mapping ? mapfn(O[i], i) : O[i];
    }
    return result;
  };

  var $of = function of(/* ...items */) {
    var index = 0;
    var length = arguments.length;
    var result = allocate(this, length);
    while (length > index) result[index] = arguments[index++];
    return result;
  };

  // iOS Safari 6.x fails here
  var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });

  var $toLocaleString = function toLocaleString() {
    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
  };

  var proto = {
    copyWithin: function copyWithin(target, start /* , end */) {
      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
    },
    every: function every(callbackfn /* , thisArg */) {
      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars
      return arrayFill.apply(validate(this), arguments);
    },
    filter: function filter(callbackfn /* , thisArg */) {
      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
        arguments.length > 1 ? arguments[1] : undefined));
    },
    find: function find(predicate /* , thisArg */) {
      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    findIndex: function findIndex(predicate /* , thisArg */) {
      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    forEach: function forEach(callbackfn /* , thisArg */) {
      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    indexOf: function indexOf(searchElement /* , fromIndex */) {
      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    includes: function includes(searchElement /* , fromIndex */) {
      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    join: function join(separator) { // eslint-disable-line no-unused-vars
      return arrayJoin.apply(validate(this), arguments);
    },
    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars
      return arrayLastIndexOf.apply(validate(this), arguments);
    },
    map: function map(mapfn /* , thisArg */) {
      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduce.apply(validate(this), arguments);
    },
    reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars
      return arrayReduceRight.apply(validate(this), arguments);
    },
    reverse: function reverse() {
      var that = this;
      var length = validate(that).length;
      var middle = Math.floor(length / 2);
      var index = 0;
      var value;
      while (index < middle) {
        value = that[index];
        that[index++] = that[--length];
        that[length] = value;
      } return that;
    },
    some: function some(callbackfn /* , thisArg */) {
      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    sort: function sort(comparefn) {
      return arraySort.call(validate(this), comparefn);
    },
    subarray: function subarray(begin, end) {
      var O = validate(this);
      var length = O.length;
      var $begin = toAbsoluteIndex(begin, length);
      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
        O.buffer,
        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)
      );
    }
  };

  var $slice = function slice(start, end) {
    return speciesFromList(this, arraySlice.call(validate(this), start, end));
  };

  var $set = function set(arrayLike /* , offset */) {
    validate(this);
    var offset = toOffset(arguments[1], 1);
    var length = this.length;
    var src = toObject(arrayLike);
    var len = toLength(src.length);
    var index = 0;
    if (len + offset > length) throw RangeError(WRONG_LENGTH);
    while (index < len) this[offset + index] = src[index++];
  };

  var $iterators = {
    entries: function entries() {
      return arrayEntries.call(validate(this));
    },
    keys: function keys() {
      return arrayKeys.call(validate(this));
    },
    values: function values() {
      return arrayValues.call(validate(this));
    }
  };

  var isTAIndex = function (target, key) {
    return isObject(target)
      && target[TYPED_ARRAY]
      && typeof key != 'symbol'
      && key in target
      && String(+key) == String(key);
  };
  var $getDesc = function getOwnPropertyDescriptor(target, key) {
    return isTAIndex(target, key = toPrimitive(key, true))
      ? propertyDesc(2, target[key])
      : gOPD(target, key);
  };
  var $setDesc = function defineProperty(target, key, desc) {
    if (isTAIndex(target, key = toPrimitive(key, true))
      && isObject(desc)
      && has(desc, 'value')
      && !has(desc, 'get')
      && !has(desc, 'set')
      // TODO: add validation descriptor w/o calling accessors
      && !desc.configurable
      && (!has(desc, 'writable') || desc.writable)
      && (!has(desc, 'enumerable') || desc.enumerable)
    ) {
      target[key] = desc.value;
      return target;
    } return dP(target, key, desc);
  };

  if (!ALL_CONSTRUCTORS) {
    $GOPD.f = $getDesc;
    $DP.f = $setDesc;
  }

  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
    getOwnPropertyDescriptor: $getDesc,
    defineProperty: $setDesc
  });

  if (fails(function () { arrayToString.call({}); })) {
    arrayToString = arrayToLocaleString = function toString() {
      return arrayJoin.call(this);
    };
  }

  var $TypedArrayPrototype$ = redefineAll({}, proto);
  redefineAll($TypedArrayPrototype$, $iterators);
  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
  redefineAll($TypedArrayPrototype$, {
    slice: $slice,
    set: $set,
    constructor: function () { /* noop */ },
    toString: arrayToString,
    toLocaleString: $toLocaleString
  });
  addGetter($TypedArrayPrototype$, 'buffer', 'b');
  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
  addGetter($TypedArrayPrototype$, 'length', 'e');
  dP($TypedArrayPrototype$, TAG, {
    get: function () { return this[TYPED_ARRAY]; }
  });

  // eslint-disable-next-line max-statements
  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
    CLAMPED = !!CLAMPED;
    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
    var GETTER = 'get' + KEY;
    var SETTER = 'set' + KEY;
    var TypedArray = global[NAME];
    var Base = TypedArray || {};
    var TAC = TypedArray && getPrototypeOf(TypedArray);
    var FORCED = !TypedArray || !$typed.ABV;
    var O = {};
    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
    var getter = function (that, index) {
      var data = that._d;
      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
    };
    var setter = function (that, index, value) {
      var data = that._d;
      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
    };
    var addElement = function (that, index) {
      dP(that, index, {
        get: function () {
          return getter(this, index);
        },
        set: function (value) {
          return setter(this, index, value);
        },
        enumerable: true
      });
    };
    if (FORCED) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME, '_d');
        var index = 0;
        var offset = 0;
        var buffer, byteLength, length, klass;
        if (!isObject(data)) {
          length = toIndex(data);
          byteLength = length * BYTES;
          buffer = new $ArrayBuffer(byteLength);
        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          buffer = data;
          offset = toOffset($offset, BYTES);
          var $len = data.byteLength;
          if ($length === undefined) {
            if ($len % BYTES) throw RangeError(WRONG_LENGTH);
            byteLength = $len - offset;
            if (byteLength < 0) throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
          }
          length = byteLength / BYTES;
        } else if (TYPED_ARRAY in data) {
          return fromList(TypedArray, data);
        } else {
          return $from.call(TypedArray, data);
        }
        hide(that, '_d', {
          b: buffer,
          o: offset,
          l: byteLength,
          e: length,
          v: new $DataView(buffer)
        });
        while (index < length) addElement(that, index++);
      });
      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
      hide(TypedArrayPrototype, 'constructor', TypedArray);
    } else if (!fails(function () {
      TypedArray(1);
    }) || !fails(function () {
      new TypedArray(-1); // eslint-disable-line no-new
    }) || !$iterDetect(function (iter) {
      new TypedArray(); // eslint-disable-line no-new
      new TypedArray(null); // eslint-disable-line no-new
      new TypedArray(1.5); // eslint-disable-line no-new
      new TypedArray(iter); // eslint-disable-line no-new
    }, true)) {
      TypedArray = wrapper(function (that, data, $offset, $length) {
        anInstance(that, TypedArray, NAME);
        var klass;
        // `ws` module bug, temporarily remove validation length for Uint8Array
        // https://github.com/websockets/ws/pull/645
        if (!isObject(data)) return new Base(toIndex(data));
        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
          return $length !== undefined
            ? new Base(data, toOffset($offset, BYTES), $length)
            : $offset !== undefined
              ? new Base(data, toOffset($offset, BYTES))
              : new Base(data);
        }
        if (TYPED_ARRAY in data) return fromList(TypedArray, data);
        return $from.call(TypedArray, data);
      });
      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
      });
      TypedArray[PROTOTYPE] = TypedArrayPrototype;
      TypedArrayPrototype.constructor = TypedArray;
    }
    var $nativeIterator = TypedArrayPrototype[ITERATOR];
    var CORRECT_ITER_NAME = !!$nativeIterator
      && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
    var $iterator = $iterators.values;
    hide(TypedArray, TYPED_CONSTRUCTOR, true);
    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
    hide(TypedArrayPrototype, VIEW, true);
    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
      dP(TypedArrayPrototype, TAG, {
        get: function () { return NAME; }
      });
    }

    O[NAME] = TypedArray;

    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

    $export($export.S, NAME, {
      BYTES_PER_ELEMENT: BYTES
    });

    $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {
      from: $from,
      of: $of
    });

    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

    $export($export.P, NAME, proto);

    setSpecies(NAME);

    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });

    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

    if (TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;

    $export($export.P + $export.F * fails(function () {
      new TypedArray(1).slice();
    }), NAME, { slice: $slice });

    $export($export.P + $export.F * (fails(function () {
      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
    }) || !fails(function () {
      TypedArrayPrototype.toLocaleString.call([1, 2]);
    })), NAME, { toLocaleString: $toLocaleString });

    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
    if (!CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
  };
} else module.exports = function () { /* empty */ };
});

_typedArray('Int8', 1, function (init) {
  return function Int8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

_typedArray('Uint8', 1, function (init) {
  return function Uint8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

_typedArray('Uint8', 1, function (init) {
  return function Uint8ClampedArray(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
}, true);

_typedArray('Int16', 2, function (init) {
  return function Int16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

_typedArray('Uint16', 2, function (init) {
  return function Uint16Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

_typedArray('Int32', 4, function (init) {
  return function Int32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

_typedArray('Uint32', 4, function (init) {
  return function Uint32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

_typedArray('Float32', 4, function (init) {
  return function Float32Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

_typedArray('Float64', 8, function (init) {
  return function Float64Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)



var rApply = (_global.Reflect || {}).apply;
var fApply = Function.apply;
// MS Edge argumentsList argument is optional
_export(_export.S + _export.F * !_fails(function () {
  rApply(function () { /* empty */ });
}), 'Reflect', {
  apply: function apply(target, thisArgument, argumentsList) {
    var T = _aFunction(target);
    var L = _anObject(argumentsList);
    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
  }
});

// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])







var rConstruct = (_global.Reflect || {}).construct;

// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = _fails(function () {
  function F() { /* empty */ }
  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);
});
var ARGS_BUG = !_fails(function () {
  rConstruct(function () { /* empty */ });
});

_export(_export.S + _export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
  construct: function construct(Target, args /* , newTarget */) {
    _aFunction(Target);
    _anObject(args);
    var newTarget = arguments.length < 3 ? Target : _aFunction(arguments[2]);
    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);
    if (Target == newTarget) {
      // w/o altered newTarget, optimization for 0-4 arguments
      switch (args.length) {
        case 0: return new Target();
        case 1: return new Target(args[0]);
        case 2: return new Target(args[0], args[1]);
        case 3: return new Target(args[0], args[1], args[2]);
        case 4: return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      $args.push.apply($args, args);
      return new (_bind.apply(Target, $args))();
    }
    // with altered newTarget, not support built-in constructors
    var proto = newTarget.prototype;
    var instance = _objectCreate(_isObject(proto) ? proto : Object.prototype);
    var result = Function.apply.call(Target, instance, args);
    return _isObject(result) ? result : instance;
  }
});

// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)





// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
_export(_export.S + _export.F * _fails(function () {
  // eslint-disable-next-line no-undef
  Reflect.defineProperty(_objectDp.f({}, 1, { value: 1 }), 1, { value: 2 });
}), 'Reflect', {
  defineProperty: function defineProperty(target, propertyKey, attributes) {
    _anObject(target);
    propertyKey = _toPrimitive(propertyKey, true);
    _anObject(attributes);
    try {
      _objectDp.f(target, propertyKey, attributes);
      return true;
    } catch (e) {
      return false;
    }
  }
});

// 26.1.4 Reflect.deleteProperty(target, propertyKey)

var gOPD$3 = _objectGopd.f;


_export(_export.S, 'Reflect', {
  deleteProperty: function deleteProperty(target, propertyKey) {
    var desc = gOPD$3(_anObject(target), propertyKey);
    return desc && !desc.configurable ? false : delete target[propertyKey];
  }
});

// 26.1.5 Reflect.enumerate(target)


var Enumerate = function (iterated) {
  this._t = _anObject(iterated); // target
  this._i = 0;                  // next index
  var keys = this._k = [];      // keys
  var key;
  for (key in iterated) keys.push(key);
};
_iterCreate(Enumerate, 'Object', function () {
  var that = this;
  var keys = that._k;
  var key;
  do {
    if (that._i >= keys.length) return { value: undefined, done: true };
  } while (!((key = keys[that._i++]) in that._t));
  return { value: key, done: false };
});

_export(_export.S, 'Reflect', {
  enumerate: function enumerate(target) {
    return new Enumerate(target);
  }
});

// 26.1.6 Reflect.get(target, propertyKey [, receiver])







function get(target, propertyKey /* , receiver */) {
  var receiver = arguments.length < 3 ? target : arguments[2];
  var desc, proto;
  if (_anObject(target) === receiver) return target[propertyKey];
  if (desc = _objectGopd.f(target, propertyKey)) return _has(desc, 'value')
    ? desc.value
    : desc.get !== undefined
      ? desc.get.call(receiver)
      : undefined;
  if (_isObject(proto = _objectGpo(target))) return get(proto, propertyKey, receiver);
}

_export(_export.S, 'Reflect', { get: get });

// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)




_export(_export.S, 'Reflect', {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
    return _objectGopd.f(_anObject(target), propertyKey);
  }
});

// 26.1.8 Reflect.getPrototypeOf(target)




_export(_export.S, 'Reflect', {
  getPrototypeOf: function getPrototypeOf(target) {
    return _objectGpo(_anObject(target));
  }
});

// 26.1.9 Reflect.has(target, propertyKey)


_export(_export.S, 'Reflect', {
  has: function has(target, propertyKey) {
    return propertyKey in target;
  }
});

// 26.1.10 Reflect.isExtensible(target)


var $isExtensible = Object.isExtensible;

_export(_export.S, 'Reflect', {
  isExtensible: function isExtensible(target) {
    _anObject(target);
    return $isExtensible ? $isExtensible(target) : true;
  }
});

// all object keys, includes non-enumerable and symbols



var Reflect$1 = _global.Reflect;
var _ownKeys = Reflect$1 && Reflect$1.ownKeys || function ownKeys(it) {
  var keys = _objectGopn.f(_anObject(it));
  var getSymbols = _objectGops.f;
  return getSymbols ? keys.concat(getSymbols(it)) : keys;
};

// 26.1.11 Reflect.ownKeys(target)


_export(_export.S, 'Reflect', { ownKeys: _ownKeys });

// 26.1.12 Reflect.preventExtensions(target)


var $preventExtensions = Object.preventExtensions;

_export(_export.S, 'Reflect', {
  preventExtensions: function preventExtensions(target) {
    _anObject(target);
    try {
      if ($preventExtensions) $preventExtensions(target);
      return true;
    } catch (e) {
      return false;
    }
  }
});

// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])









function set(target, propertyKey, V /* , receiver */) {
  var receiver = arguments.length < 4 ? target : arguments[3];
  var ownDesc = _objectGopd.f(_anObject(target), propertyKey);
  var existingDescriptor, proto;
  if (!ownDesc) {
    if (_isObject(proto = _objectGpo(target))) {
      return set(proto, propertyKey, V, receiver);
    }
    ownDesc = _propertyDesc(0);
  }
  if (_has(ownDesc, 'value')) {
    if (ownDesc.writable === false || !_isObject(receiver)) return false;
    if (existingDescriptor = _objectGopd.f(receiver, propertyKey)) {
      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
      existingDescriptor.value = V;
      _objectDp.f(receiver, propertyKey, existingDescriptor);
    } else _objectDp.f(receiver, propertyKey, _propertyDesc(0, V));
    return true;
  }
  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
}

_export(_export.S, 'Reflect', { set: set });

// 26.1.14 Reflect.setPrototypeOf(target, proto)



if (_setProto) _export(_export.S, 'Reflect', {
  setPrototypeOf: function setPrototypeOf(target, proto) {
    _setProto.check(target, proto);
    try {
      _setProto.set(target, proto);
      return true;
    } catch (e) {
      return false;
    }
  }
});

// https://github.com/tc39/Array.prototype.includes

var $includes = _arrayIncludes(true);

_export(_export.P, 'Array', {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

_addToUnscopables('includes');

var includes = _core.Array.includes;

// https://github.com/tc39/proposal-string-pad-start-end




var _stringPad = function (that, maxLength, fillString, left) {
  var S = String(_defined(that));
  var stringLength = S.length;
  var fillStr = fillString === undefined ? ' ' : String(fillString);
  var intMaxLength = _toLength(maxLength);
  if (intMaxLength <= stringLength || fillStr == '') return S;
  var fillLen = intMaxLength - stringLength;
  var stringFiller = _stringRepeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
  return left ? stringFiller + S : S + stringFiller;
};

// https://github.com/tc39/proposal-string-pad-start-end




// https://github.com/zloirock/core-js/issues/280
_export(_export.P + _export.F * /Version\/10\.\d+(\.\d+)? Safari\//.test(_userAgent), 'String', {
  padStart: function padStart(maxLength /* , fillString = ' ' */) {
    return _stringPad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
  }
});

var padStart = _core.String.padStart;

// https://github.com/tc39/proposal-string-pad-start-end




// https://github.com/zloirock/core-js/issues/280
_export(_export.P + _export.F * /Version\/10\.\d+(\.\d+)? Safari\//.test(_userAgent), 'String', {
  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {
    return _stringPad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
  }
});

var padEnd = _core.String.padEnd;

_wksDefine('asyncIterator');

var asyncIterator = _wksExt.f('asyncIterator');

// https://github.com/tc39/proposal-object-getownpropertydescriptors






_export(_export.S, 'Object', {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
    var O = _toIobject(object);
    var getDesc = _objectGopd.f;
    var keys = _ownKeys(O);
    var result = {};
    var i = 0;
    var key, desc;
    while (keys.length > i) {
      desc = getDesc(O, key = keys[i++]);
      if (desc !== undefined) _createProperty(result, key, desc);
    }
    return result;
  }
});

var getOwnPropertyDescriptors = _core.Object.getOwnPropertyDescriptors;

var isEnum$1 = _objectPie.f;
var _objectToArray = function (isEntries) {
  return function (it) {
    var O = _toIobject(it);
    var keys = _objectKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;
    while (length > i) if (isEnum$1.call(O, key = keys[i++])) {
      result.push(isEntries ? [key, O[key]] : O[key]);
    } return result;
  };
};

// https://github.com/tc39/proposal-object-values-entries

var $values = _objectToArray(false);

_export(_export.S, 'Object', {
  values: function values(it) {
    return $values(it);
  }
});

var values = _core.Object.values;

// https://github.com/tc39/proposal-object-values-entries

var $entries = _objectToArray(true);

_export(_export.S, 'Object', {
  entries: function entries(it) {
    return $entries(it);
  }
});

var entries = _core.Object.entries;

_export(_export.P + _export.R, 'Promise', { 'finally': function (onFinally) {
  var C = _speciesConstructor(this, _core.Promise || _global.Promise);
  var isFunction = typeof onFinally == 'function';
  return this.then(
    isFunction ? function (x) {
      return _promiseResolve(C, onFinally()).then(function () { return x; });
    } : onFinally,
    isFunction ? function (e) {
      return _promiseResolve(C, onFinally()).then(function () { throw e; });
    } : onFinally
  );
} });

var _finally = _core.Promise['finally'];

// ie9- setTimeout & setInterval additional parameters fix



var slice = [].slice;
var MSIE = /MSIE .\./.test(_userAgent); // <- dirty ie9- check
var wrap$1 = function (set) {
  return function (fn, time /* , ...args */) {
    var boundArgs = arguments.length > 2;
    var args = boundArgs ? slice.call(arguments, 2) : false;
    return set(boundArgs ? function () {
      // eslint-disable-next-line no-new-func
      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
    } : fn, time);
  };
};
_export(_export.G + _export.B + _export.F * MSIE, {
  setTimeout: wrap$1(_global.setTimeout),
  setInterval: wrap$1(_global.setInterval)
});

_export(_export.G + _export.B, {
  setImmediate: _task.set,
  clearImmediate: _task.clear
});

var ITERATOR$4 = _wks('iterator');
var TO_STRING_TAG = _wks('toStringTag');
var ArrayValues = _iterators.Array;

var DOMIterables = {
  CSSRuleList: true, // TODO: Not spec compliant, should be false.
  CSSStyleDeclaration: false,
  CSSValueList: false,
  ClientRectList: false,
  DOMRectList: false,
  DOMStringList: false,
  DOMTokenList: true,
  DataTransferItemList: false,
  FileList: false,
  HTMLAllCollection: false,
  HTMLCollection: false,
  HTMLFormElement: false,
  HTMLSelectElement: false,
  MediaList: true, // TODO: Not spec compliant, should be false.
  MimeTypeArray: false,
  NamedNodeMap: false,
  NodeList: true,
  PaintRequestList: false,
  Plugin: false,
  PluginArray: false,
  SVGLengthList: false,
  SVGNumberList: false,
  SVGPathSegList: false,
  SVGPointList: false,
  SVGStringList: false,
  SVGTransformList: false,
  SourceBufferList: false,
  StyleSheetList: true, // TODO: Not spec compliant, should be false.
  TextTrackCueList: false,
  TextTrackList: false,
  TouchList: false
};

for (var collections = _objectKeys(DOMIterables), i$3 = 0; i$3 < collections.length; i$3++) {
  var NAME$1 = collections[i$3];
  var explicit = DOMIterables[NAME$1];
  var Collection = _global[NAME$1];
  var proto$3 = Collection && Collection.prototype;
  var key$1;
  if (proto$3) {
    if (!proto$3[ITERATOR$4]) _hide(proto$3, ITERATOR$4, ArrayValues);
    if (!proto$3[TO_STRING_TAG]) _hide(proto$3, TO_STRING_TAG, NAME$1);
    _iterators[NAME$1] = ArrayValues;
    if (explicit) for (key$1 in es6_array_iterator) if (!proto$3[key$1]) _redefine(proto$3, key$1, es6_array_iterator[key$1], true);
  }
}

var runtime = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

!(function(global) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = module.exports;

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // In sloppy mode, unbound `this` refers to the global object, fallback to
  // Function constructor if we're in global strict mode. That is sadly a form
  // of indirect eval which violates Content Security Policy.
  (function() { return this })() || Function("return this")()
);
});

if (commonjsGlobal._babelPolyfill && typeof console !== "undefined" && console.warn) {
  console.warn("@babel/polyfill is loaded more than once on this page. This is probably not desirable/intended " + "and may have consequences if different versions of the polyfills are applied sequentially. " + "If you do need to load the polyfill more than once, use @babel/polyfill/noConflict " + "instead to bypass the warning.");
}

commonjsGlobal._babelPolyfill = true;

reactDom.render(react.createElement(Root, null), document.getElementById("root"));
